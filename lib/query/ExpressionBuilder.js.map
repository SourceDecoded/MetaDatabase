{"version":3,"sources":["../../src/query/ExpressionBuilder.js"],"names":["ExpressionBuilder","Type","Object","property","propertyAccess","type","and","apply","arguments","or","filter","expressionBuilder","expression","setExpression","any","all"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;IAEqBA,iB;AACjB,+BAAYC,IAAZ,EAAkB;AAAA;;AACd,aAAKA,IAAL,GAAYA,QAAQC,MAApB;AACH;;;;iCACQC,S,EAAU;AACf,mBAAO,yCAA+B,YAAW;AAC7C,uBAAO,qBAAWC,cAAX,CAA0B,qBAAWC,IAAX,CAAgB,KAAKJ,IAArB,CAA1B,EAAsDE,SAAtD,CAAP;AACH,aAFM,CAAP;AAGH;;;8BAEK;AACF,mBAAO,qBAAWG,GAAX,CAAeC,KAAf,uBAAiCC,SAAjC,CAAP;AACH;;;6BAEI;AACD,mBAAO,qBAAWC,EAAX,CAAcF,KAAd,uBAAgCC,SAAhC,CAAP;AACH;;;4BAEGE,M,EAAQ;AACR,gBAAIC,oBAAoB,IAAIX,iBAAJ,EAAxB;AACA,gBAAIY,aAAaF,OAAOC,iBAAP,CAAjB;AACA,mBAAOE,cAAc,qBAAWC,GAAX,CAAe,EAAf,EAAmBF,UAAnB,CAAd,CAAP;AACH;;;4BAEGF,M,EAAQ;AACR,gBAAIC,oBAAoB,IAAIX,iBAAJ,EAAxB;AACA,gBAAIY,aAAaF,OAAOC,iBAAP,CAAjB;AACA,mBAAOE,cAAc,qBAAWE,GAAX,CAAe,EAAf,EAAmBH,UAAnB,CAAd,CAAP;AACH;;;gCAEO;AACJ,mBAAO,yCAA+B,YAAW;AAC7C,uBAAO,qBAAWP,IAAX,CAAgB,KAAKJ,IAArB,CAAP;AACH,aAFM,CAAP;AAGH;;;;;;kBAlCgBD,iB","file":"ExpressionBuilder.js","sourcesContent":["import Expression from \"./Expression\";\r\nimport OperationExpressionBuilder from \"./OperationExpressionBuilder\";\r\n\r\nexport default class ExpressionBuilder {\r\n    constructor(Type) {\r\n        this.Type = Type || Object;\r\n    }\r\n    property(property) {\r\n        return new OperationExpressionBuilder(function() {\r\n            return Expression.propertyAccess(Expression.type(this.Type), property);\r\n        });\r\n    }\r\n\r\n    and() {\r\n        return Expression.and.apply(Expression, arguments);\r\n    }\r\n\r\n    or() {\r\n        return Expression.or.apply(Expression, arguments);\r\n    }\r\n\r\n    any(filter) {\r\n        var expressionBuilder = new ExpressionBuilder();\r\n        var expression = filter(expressionBuilder);\r\n        return setExpression(Expression.any(\"\", expression));\r\n    }\r\n\r\n    all(filter) {\r\n        var expressionBuilder = new ExpressionBuilder();\r\n        var expression = filter(expressionBuilder);\r\n        return setExpression(Expression.all(\"\", expression));\r\n    }\r\n\r\n    value() {\r\n        return new OperationExpressionBuilder(function() {\r\n            return Expression.type(this.Type);\r\n        });\r\n    }\r\n}\r\n"]}