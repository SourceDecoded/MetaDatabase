{"version":3,"sources":["../../src/query/ValueExpression.js"],"names":["ValueExpression","nodeName","value","node","isEqualTo"],"mappings":";;;;;;;;AAAA;;;;;;;;;;;;IAEqBA,e;;;AACjB,6BAAYC,QAAZ,EAAsBC,KAAtB,EAA6B;AAAA;;AAAA;;AAEzB,cAAKA,KAAL,GAAaA,KAAb;AACA,cAAKD,QAAL,GAAgBA,QAAhB;AAHyB;AAI5B;;;;+BAEM;AACH,mBAAO,IAAID,eAAJ,CAAoB,KAAKC,QAAzB,EAAmC,KAAKC,KAAxC,CAAP;AACH;;;kCAESC,I,EAAM;AACZ,gBAAIA,QAAQ,KAAKF,QAAL,KAAkBE,KAAKF,QAA/B,IAA2C,KAAKC,KAAL,KAAeC,KAAKD,KAAnE,EAA0E;AACtE,uBAAO,IAAP;AACH;AACD,mBAAO,KAAP;AACH;;;iCAEQC,I,EAAM;AACX,mBAAO,KAAKC,SAAL,CAAeD,IAAf,CAAP;AACH;;;;;;kBApBgBH,e","file":"ValueExpression.js","sourcesContent":["import Expression from \"./Expression\";\r\n\r\nexport default class ValueExpression extends Expression {\r\n    constructor(nodeName, value) {\r\n        super();\r\n        this.value = value;\r\n        this.nodeName = nodeName;\r\n    }\r\n\r\n    copy() {\r\n        return new ValueExpression(this.nodeName, this.value);\r\n    }\r\n\r\n    isEqualTo(node) {\r\n        if (node && this.nodeName === node.nodeName && this.value === node.value) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    contains(node) {\r\n        return this.isEqualTo(node);\r\n    }\r\n}\r\n"]}