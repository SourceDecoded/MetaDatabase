{"version":3,"sources":["../../src/query/OperationExpressionBuilder.js"],"names":["returnExpression","expression","OperationExpressionBuilder","getLeftExpression","fn","expressionBuilder","any","propertyAccessExpression","Object","queryable","where","all","value","constant","getExpressionType","equalTo","notEqualTo","substringOf","array","Array","isArray","isIn","Error","isNotIn","console","warn","string","greaterThan","greaterThanOrEqualTo","lessThanOrEqualTo","lessThan","endsWith","startsWith","propertyAccess"],"mappings":"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","file":"OperationExpressionBuilder.js","sourcesContent":["import ExpressionBuilder from \"./ExpressionBuilder\";\r\nimport Expression from \"./Expression\";\r\n\r\nconst returnExpression = () => {\r\n    return expression;\r\n};\r\n\r\nexport default class OperationExpressionBuilder {\r\n    constructor(getLeftExpression) {\r\n        this.getLeftExpression = getLeftExpression || returnExpression;\r\n    }\r\n\r\n    any(fn) {\r\n        var expressionBuilder = new ExpressionBuilder();\r\n        var expression = fn(expressionBuilder);\r\n        return Expression.any(this.getLeftExpression(), expression);\r\n    }\r\n\r\n    where(fn) {\r\n        var propertyAccessExpression = this.getLeftExpression();\r\n\r\n        this.getLeftExpression = function() {\r\n            var expressionBuilder = new ExpressionBuilder(Object);\r\n            var expression = fn(expressionBuilder);\r\n\r\n            return Expression.queryable(propertyAccessExpression, Expression.expression(Expression.where(expression)));\r\n        };\r\n\r\n        return this;\r\n    }\r\n\r\n    all(fn) {\r\n        var expressionBuilder = new ExpressionBuilder();\r\n        var expression = fn(expressionBuilder);\r\n        return Expression.all(this.getLeftExpression(), expression);\r\n    }\r\n\r\n    isEqualTo(value) {\r\n        var constant = Expression.getExpressionType(value);\r\n        return Expression.equalTo(this.getLeftExpression(), constant);\r\n    }\r\n\r\n    isNotEqualTo(value) {\r\n        var constant = Expression.getExpressionType(value);\r\n        return Expression.notEqualTo(this.getLeftExpression(), constant);\r\n    }\r\n\r\n    contains(value) {\r\n        var constant = Expression.getExpressionType(value);\r\n        return Expression.substringOf(this.getLeftExpression(), constant);\r\n    }\r\n\r\n    isIn(array) {\r\n        if (Array.isArray(array)) {\r\n            return Expression.isIn(this.getLeftExpression(), Expression.array(array));\r\n        } else {\r\n            throw new Error(\"isIn is expecting to be passed an array!\");\r\n        }\r\n    }\r\n\r\n    isNotIn(array) {\r\n        if (Array.isArray(array)) {\r\n            return Expression.isNotIn(this.getLeftExpression(), Expression.array(array));\r\n        } else {\r\n            throw new Error(\"isNotIn is expecting to be passed an array!\");\r\n        }\r\n    }\r\n\r\n    isSubstringOf(value) {\r\n        console.warn(\"isSubstringOf is deprecated, please us contains.\");\r\n        return Expression.substringOf(this.getLeftExpression(), Expression.string(value));\r\n    }\r\n\r\n    isGreaterThan(value) {\r\n        var constant = Expression.getExpressionType(value);\r\n        return Expression.greaterThan(this.getLeftExpression(), constant);\r\n    }\r\n\r\n    isGreaterThanOrEqualTo(value) {\r\n        var constant = Expression.getExpressionType(value);\r\n        return Expression.greaterThanOrEqualTo(this.getLeftExpression(), constant);\r\n    }\r\n\r\n    isLessThanOrEqualTo(value) {\r\n        var constant = Expression.getExpressionType(value);\r\n        return Expression.lessThanOrEqualTo(this.getLeftExpression(), constant);\r\n    }\r\n\r\n    isLessThan(value) {\r\n        var constant = Expression.getExpressionType(value);\r\n        return Expression.lessThan(this.getLeftExpression(), constant);\r\n    }\r\n\r\n    endsWith(value) {\r\n        return Expression.endsWith(this.getLeftExpression(), Expression.string(value));\r\n    }\r\n\r\n    startsWith(value) {\r\n        return Expression.startsWith(this.getLeftExpression(), Expression.string(value));\r\n    }\r\n\r\n    property(value) {\r\n        return new OperationExpressionBuilder(function() {\r\n            return Expression.propertyAccess(this.getLeftExpression(), value);\r\n        });\r\n    }\r\n\r\n    getExpression() {\r\n        return this.getLeftExpression();\r\n    }\r\n}\r\n"]}