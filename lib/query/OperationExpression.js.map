{"version":3,"sources":["../../src/query/OperationExpression.js"],"names":["OperationExpression","nodeName","args","Array","prototype","slice","call","arguments","children","copy","forEach","push","expression","isArray","node","length","every","index","isEqualTo","matched","childNode","contains","some","matchedNodes","getMatchingNodes"],"mappings":";;;;;;;;AAAA;;;;;;;;;;;;IAEqBA,mB;;;AACjB,iCAAYC,QAAZ,EAAsB;AAAA;;AAAA;;AAElB,YAAIC,OAAOC,MAAMC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BC,SAA3B,EAAsC,CAAtC,CAAX;;AAEA,cAAKN,QAAL,GAAgBA,QAAhB;AACA,cAAKO,QAAL,GAAgBN,KAAKG,KAAL,CAAW,CAAX,CAAhB;AALkB;AAMrB;;;;+BACM;AACH,gBAAIG,WAAW,EAAf;AACA,gBAAIC,OAAO,IAAIT,mBAAJ,CAAwB,KAAKC,QAA7B,CAAX;;AAEA,iBAAKO,QAAL,CAAcE,OAAd,CAAsB,sBAAc;AAChCD,qBAAKD,QAAL,CAAcG,IAAd,CAAmBC,WAAWH,IAAX,EAAnB;AACH,aAFD;;AAIA,mBAAOA,IAAP;AACH;;;oCAEW;AACR,gBAAI,CAACN,MAAMU,OAAN,CAAcC,KAAKN,QAAnB,CAAD,IAAiC,KAAKP,QAAL,KAAkBa,KAAKb,QAA5D,EAAsE;AAClE,uBAAO,KAAP;AACH;;AAED,gBAAIa,KAAKN,QAAL,CAAcO,MAAd,KAAyB,KAAKP,QAAL,CAAcO,MAA3C,EAAmD;AAC/C,uBAAO,KAAP;AACH;;AAED,mBAAO,KAAKP,QAAL,CAAcQ,KAAd,CAAoB,UAACJ,UAAD,EAAaK,KAAb,EAAuB;AAC9C,uBAAOL,WAAWM,SAAX,CAAqBJ,KAAKN,QAAL,CAAcS,KAAd,CAArB,CAAP;AACH,aAFM,CAAP;AAGH;;;iCAEQH,I,EAAM;AAAA;;AACX,gBAAIA,KAAKb,QAAL,KAAkB,KAAKA,QAAvB,IAAmCE,MAAMU,OAAN,CAAcC,KAAKN,QAAnB,CAAvC,EAAqE;AACjE,oBAAIW,UAAUL,KAAKN,QAAL,CAAcQ,KAAd,CAAoB,UAACI,SAAD,EAAYH,KAAZ,EAAsB;AACpD,2BAAOG,UAAUC,QAAV,CAAmB,OAAKb,QAAL,CAAcS,KAAd,CAAnB,CAAP;AACH,iBAFa,CAAd;;AAIA,oBAAIE,OAAJ,EAAa;AACT,2BAAO,IAAP;AACH;AACJ;;AAED,mBAAO,KAAKX,QAAL,CAAcc,IAAd,CAAmB,qBAAa;AACnC,uBAAOF,UAAUC,QAAV,CAAmBP,IAAnB,CAAP;AACH,aAFM,CAAP;AAGH;;;yCAEgBA,I,EAAMS,Y,EAAc;AAAA;;AACjCA,2BAAepB,MAAMU,OAAN,CAAcU,YAAd,IAA8BA,YAA9B,GAA6C,EAA5D;;AAEA,gBAAIT,KAAKb,QAAL,KAAkB,KAAKA,QAAvB,IAAmCE,MAAMU,OAAN,CAAcC,KAAKN,QAAnB,CAAvC,EAAqE;AACjE,oBAAIW,UAAUL,KAAKN,QAAL,CAAcQ,KAAd,CAAoB,UAACI,SAAD,EAAYH,KAAZ,EAAsB;AACpD,2BAAOG,UAAUC,QAAV,CAAmB,OAAKb,QAAL,CAAcS,KAAd,CAAnB,EAAyCM,YAAzC,CAAP;AACH,iBAFa,CAAd;;AAIA,oBAAIJ,OAAJ,EAAa;AACTI,iCAAaZ,IAAb,CAAkB,IAAlB;AACH;AACJ;;AAED,iBAAKH,QAAL,CAAcE,OAAd,CAAsB,qBAAa;AAC/B,oBAAIP,MAAMU,OAAN,CAAcO,UAAUZ,QAAxB,CAAJ,EAAuC;AACnCY,8BAAUI,gBAAV,CAA2BV,IAA3B,EAAiCS,YAAjC;AACH;AACJ,aAJD,EAIGA,YAJH;;AAMA,mBAAOA,YAAP;AACH;;;;;;kBArEgBvB,mB","file":"OperationExpression.js","sourcesContent":["import Expression from \"./Expression\";\r\n\r\nexport default class OperationExpression extends Expression {\r\n    constructor(nodeName) {\r\n        super();\r\n        var args = Array.prototype.slice.call(arguments, 0);\r\n\r\n        this.nodeName = nodeName;\r\n        this.children = args.slice(1);\r\n    }\r\n    copy() {\r\n        var children = [];\r\n        var copy = new OperationExpression(this.nodeName);\r\n\r\n        this.children.forEach(expression => {\r\n            copy.children.push(expression.copy());\r\n        });\r\n\r\n        return copy;\r\n    }\r\n\r\n    isEqualTo() {\r\n        if (!Array.isArray(node.children) || this.nodeName !== node.nodeName) {\r\n            return false;\r\n        }\r\n\r\n        if (node.children.length !== this.children.length) {\r\n            return false;\r\n        }\r\n\r\n        return this.children.every((expression, index) => {\r\n            return expression.isEqualTo(node.children[index]);\r\n        });\r\n    }\r\n\r\n    contains(node) {\r\n        if (node.nodeName === this.nodeName && Array.isArray(node.children)) {\r\n            var matched = node.children.every((childNode, index) => {\r\n                return childNode.contains(this.children[index]);\r\n            });\r\n\r\n            if (matched) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return this.children.some(childNode => {\r\n            return childNode.contains(node);\r\n        });\r\n    }\r\n\r\n    getMatchingNodes(node, matchedNodes) {\r\n        matchedNodes = Array.isArray(matchedNodes) ? matchedNodes : [];\r\n\r\n        if (node.nodeName === this.nodeName && Array.isArray(node.children)) {\r\n            var matched = node.children.every((childNode, index) => {\r\n                return childNode.contains(this.children[index], matchedNodes);\r\n            });\r\n\r\n            if (matched) {\r\n                matchedNodes.push(this);\r\n            }\r\n        }\r\n\r\n        this.children.forEach(childNode => {\r\n            if (Array.isArray(childNode.children)) {\r\n                childNode.getMatchingNodes(node, matchedNodes);\r\n            }\r\n        }, matchedNodes);\r\n\r\n        return matchedNodes;\r\n    }\r\n}\r\n"]}