{"version":3,"sources":["../../src/query/Queryable.js"],"names":["assertHasProvider","queryable","provider","Error","copyQuery","query","copy","where","orderBy","include","parameters","JSON","parse","stringify","take","skip","Queryable","Type","Object","nodeName","Infinity","lambda","rightExpression","getQuery","call","children","length","push","leftExpression","pop","or","and","value","propertyExpression","getExpression","descendingExpression","descending","contains","ascendingExpression","ascending","params","keys","forEach","key","operationExpressionBuilder","queryableExpression","expression","clone","cloneQuery","execute","guid","constant","onEach","toArrayAsync","then","results","count","toArrayWithCount","all","any","firstOrDefault","console","log","lastOrDefault","first","last","select","callback","toArray","a","compareToQueryable","Array","asQueryable","intersects"],"mappings":"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","file":"Queryable.js","sourcesContent":["import { Expression, ValueExpression, OperationExpression } from \"./Expression\";\nimport ExpressionBuilder from \"./ExpressionBuilder\";\n\nconst assertHasProvider = (queryable) => {\n    if (typeof queryable.provider === \"undefined\") {\n        throw new Error(\"No provider found.\");\n    }\n};\n\nconst copyQuery = (query) => {\n    var copy = {};\n\n    copy.where = query.where.copy();\n    copy.orderBy = query.orderBy.copy();\n    copy.include = query.include.copy();\n    copy.parameters = JSON.parse(JSON.stringify(query.parameters));\n    copy.take = query.take;\n    copy.skip = query.skip;\n\n    return copy;\n};\n\nexport default class Queryable {\n    constructor(Type, query) {\n        query = query || {};\n\n        this.Type = Type || Object;\n        this.provider = null;\n        this.query = {};\n        this.query.parameters = (query && query.parameters) || {};\n\n        if (query.where != null && query.where.nodeName === \"where\") {\n            this.query.where = query.where;\n        } else {\n            this.query.where = Expression.where();\n        }\n\n        if (query.skip != null && query.skip.nodeName === \"skip\") {\n            this.query.skip = query.skip;\n        } else {\n            this.query.skip = Expression.skip(0);\n        }\n\n        if (query.take != null && query.take.nodeName === \"take\") {\n            this.query.take = query.take;\n        } else {\n            this.query.take = Expression.take(Infinity);\n        }\n\n        if (query.include != null && query.include.nodeName === \"include\") {\n            this.query.include = query.include;\n        } else {\n            this.query.include = Expression.include();\n        }\n\n        if (query.orderBy != null && query.orderBy.nodeName === \"orderBy\") {\n            this.query.orderBy = query.orderBy;\n        } else {\n            this.query.orderBy = Expression.orderBy();\n        }\n    }\n\n    getExpression() {\n        return this.query;\n    }\n\n    getQuery() {\n        return this.query;\n    }\n\n    or(lambda) {\n        var rightExpression;\n        var query = copyQuery(this.getQuery());\n\n        if (typeof lambda === \"function\") {\n            lambda = lambda || function () { };\n            rightExpression = lambda.call(ExpressionBuilder, new ExpressionBuilder(this.Type));\n        } else if (lambda instanceof Expression) {\n            rightExpression = lambda;\n        } else {\n            return;\n        }\n\n        if (query.where.children.length === 0) {\n            query.where.children.push(rightExpression);\n        } else {\n            var leftExpression = query.where.children.pop();\n            query.where.children.push(Expression.or(leftExpression, rightExpression));\n        }\n\n        return this.copy(query);\n    }\n\n    where(lambda) {\n        var rightExpression;\n        var query = copyQuery(this.getQuery());\n\n        if (typeof lambda === \"function\") {\n            lambda = lambda || function () { };\n            rightExpression = lambda.call(ExpressionBuilder, new ExpressionBuilder(this.Type));\n        } else if (lambda instanceof Expression) {\n            rightExpression = lambda;\n        } else {\n            return;\n        }\n\n        if (query.where.children.length === 0) {\n            query.where.children.push(rightExpression);\n        } else {\n            var leftExpression = query.where.children.pop();\n            query.where.children.push(Expression.and(leftExpression, rightExpression));\n        }\n\n        return this.copy(query);\n    }\n\n    and(lambda) {\n        return this.where(lambda);\n    }\n\n    take(value) {\n        if (typeof value !== \"number\") {\n            throw new Error(\"Illegal Argument Exception: value needs to be a number.\");\n        }\n\n        var query = copyQuery(this.getQuery());\n        query.take = Expression.take(value);\n\n        return this.copy(query);\n    }\n\n    skip(value) {\n        if (typeof value !== \"number\") {\n            throw new Error(\"Illegal Argument Exception: value needs to be a number.\");\n        }\n\n        var query = copyQuery(this.getQuery());\n        query.skip = Expression.skip(value);\n\n        return this.copy(query);\n    }\n\n    orderByDesc(lambda) {\n        var query = copyQuery(this.getQuery());\n        var propertyExpression = lambda.call(\n            ExpressionBuilder, new ExpressionBuilder(this.Type)\n        ).getExpression();\n\n        var descendingExpression = Expression.descending(propertyExpression);\n\n        if (!query.orderBy.contains(propertyExpression)) {\n            query.orderBy.children.push(descendingExpression);\n            return this.copy(query);\n        } else {\n            return this;\n        }\n    }\n\n    orderBy(lambda) {\n        var query = copyQuery(this.getQuery());\n        var propertyExpression = lambda.call(\n            ExpressionBuilder, new ExpressionBuilder(this.Type)\n        ).getExpression();\n\n        var ascendingExpression = Expression.ascending(propertyExpression);\n\n        if (!query.orderBy.contains(propertyExpression)) {\n            query.orderBy.children.push(ascendingExpression);\n            return this.copy(query);\n        } else {\n            return this;\n        }\n    }\n\n    setParameters(params) {\n        if (!params) {\n            return;\n        }\n        var parameters = this.query.parameters;\n\n        Object.keys(params).forEach(function (key) {\n            parameters[key] = params[key];\n        });\n        return this;\n    }\n\n    withParameters(params) {\n        if (!params) {\n            return;\n        }\n\n        var parameters = this.query.parameters = {};\n        Object.keys(params).forEach(function (key) {\n            parameters[key] = params[key];\n        });\n        return this;\n    }\n\n    include(lambda) {\n        var query = copyQuery(this.getQuery());\n\n        var operationExpressionBuilder = lambda.call(ExpressionBuilder, new ExpressionBuilder(this.Type));\n\n        if (typeof operationExpressionBuilder.getExpression !== \"function\") {\n            throw new Error(\"Expected a property to include.\");\n        }\n\n        var queryableExpression = operationExpressionBuilder.getExpression();\n\n        if (queryableExpression.nodeName !== \"queryable\") {\n            queryableExpression = Expression.queryable(queryableExpression, Expression.expression(Expression.where()));\n        }\n\n        query.include.children.push(queryableExpression);\n        return this.copy(query);\n\n    }\n\n    merge(queryable) {\n        var clone = this.copy();\n        var cloneQuery = clone.getQuery();\n        var query = queryable.getQuery();\n        var rightExpression = query.where.children[0];\n\n        if (rightExpression != null) {\n            // No need to copy if there is nothing to copy.\n            if (cloneQuery.where.children.length === 0) {\n                cloneQuery.where.children.push(rightExpression.copy());\n            } else if (cloneQuery.where.children.length === 1 && cloneQuery.where.children[0].nodeName === \"and\") {\n                cloneQuery.where.children[0].children.push(rightExpression.copy());\n            } else {\n                var leftExpression = cloneQuery.where.children.pop();\n                cloneQuery.where.children.push(Expression.and(leftExpression, rightExpression.copy()));\n            }\n        }\n\n        query.include.children.forEach(function (expression) {\n            cloneQuery.include.children.push(expression.copy());\n        });\n\n        query.orderBy.children.forEach(function (expression) {\n            if (!cloneQuery.orderBy.contains(expression)) {\n                cloneQuery.orderBy.children.push(expression.copy());\n            }\n        });\n\n        return this.copy(cloneQuery);\n    }\n\n    toArrayAsync() {\n        assertHasProvider(this);\n        return this.provider.execute(this);\n    }\n\n    toGuid(value) {\n        return Expression.guid(Expression.constant(value));\n    }\n\n    forEach(onEach) {\n        this.toArrayAsync().then(function (results) {\n            results.forEach(onEach);\n        });\n    }\n\n    count() {\n        assertHasProvider(this);\n        return this.provider.count(this);\n    }\n\n    toArrayWithCount() {\n        assertHasProvider(this);\n        return this.provider.toArrayWithCount(this);\n    }\n\n    all(lambda) {\n        assertHasProvider(this);\n        return this.provider.all(this, lambda);\n    }\n\n    any(lambda) {\n        assertHasProvider(this);\n        return this.provider.any(this, lambda);\n    }\n\n    firstOrDefault(lambda) {\n        assertHasProvider(this);\n        return this.provider.firstOrDefault(this, lambda);\n    }\n\n    lastOrDefault(lambda) {\n        console.log(\"Deprecated. Use orderBy and firstOrDefault\");\n        assertHasProvider(this);\n        return this.provider.lastOrDefault(this, lambda);\n    }\n\n    first(lambda) {\n        assertHasProvider(this);\n        return this.provider.first(this, lambda);\n    }\n\n    last(lambda) {\n        assertHasProvider(this);\n        return this.provider.last(this, lambda);\n    }\n\n    select(lambda) {\n        assertHasProvider(this);\n        return this.provider.select(this, lambda);\n    }\n\n    contains(lambda) {\n        assertHasProvider(this);\n        return this.provider.contains(this, lambda);\n    };\n\n    ifNone(callback) {\n        this.count().then(function (count) {\n            if (count === 0) {\n                callback();\n            }\n        });\n\n        return this;\n    }\n\n    ifAny(callback) {\n        this.toArray(function (a) {\n            if (a.length > 0) {\n                callback(a);\n            }\n        });\n\n        return this;\n    }\n\n    intersects(compareToQueryable) {\n        assertHasProvider(this);\n        if (compareToQueryable instanceof Array) {\n            compareToQueryable = compareToQueryable.asQueryable();\n        }\n        return this.provider.intersects(this, compareToQueryable);\n    }\n\n    ofType(Type) {\n        var queryable = new Queryable(Type);\n        queryable.provider = this.provider;\n        return queryable;\n    }\n\n    copy(query) {\n        var queryable = new Queryable(this.Type, query || copyQuery(this.query));\n        queryable.provider = this.provider;\n        return queryable;\n    }\n}\n\n"]}