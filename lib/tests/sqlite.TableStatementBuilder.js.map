{"version":3,"sources":["../../src/tests/sqlite.TableStatementBuilder.js"],"names":["assert","sourceTable","tables","find","table","name","foreignTable","otherForeignTable","relationships","exports","builder","tableStatement","createTableStatement","equal","insertStatement","createInsertStatement","string","statement","values","length","updateStatement","createUpdateStatement","id","deleteStatement","createDeleteStatement","indexStatements","createTableIndexesStatements"],"mappings":"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","file":"sqlite.TableStatementBuilder.js","sourcesContent":["import * as assert from \"assert\";\nimport edm from \"./../mock/edm\";\nimport TableStatementBuilder from \"./../sqlite/TableStatementBuilder\";\n\nvar sourceTable = edm.tables.find((table) => {\n    return table.name === \"Source\";\n});\n\nconst foreignTable = edm.tables.find((table) => {\n    return table.name === \"Foreign\";\n});\n\nconst otherForeignTable = edm.tables.find((table) => {\n    return table.name === \"OtherForeign\";\n});\n\nconst relationships = edm.relationships;\n\nexports[\"TableStatementBuilder: Constructor\"] = () => {\n    var builder = new TableStatementBuilder();\n}\n\nexports[\"TableStatementBuilder.createTableStatement: Without Relationships.\"] = () => {\n    var builder = new TableStatementBuilder();\n\n    var tableStatement = builder.createTableStatement(sourceTable, relationships);\n\n    assert.equal(\n        tableStatement,\n        'CREATE TABLE IF NOT EXISTS \"Source\" (\"id\" INTEGER PRIMARY KEY AUTOINCREMENT, \"string\" TEXT, \"number\" NUMERIC, \"date\" NUMERIC, \"boolean\" NUMERIC, \"float\" REAL)'\n    )\n}\n\nexports[\"TableStatementBuilder.createTableStatement: With Relationships.\"] = () => {\n    var builder = new TableStatementBuilder();\n\n    var tableStatement = builder.createTableStatement(foreignTable, relationships);\n\n    assert.equal(\n        tableStatement,\n        `CREATE TABLE IF NOT EXISTS \"Foreign\" (\"id\" INTEGER PRIMARY KEY AUTOINCREMENT, \"foreignKey\" INTEGER, FOREIGN KEY (\"foreignKey\") REFERENCES \"Source\" (\"id\"))`\n    )\n}\n\nexports[\"TableStatementBuilder.createInsertStatement\"] = () => {\n    var builder = new TableStatementBuilder();\n\n    var insertStatement = builder.createInsertStatement(sourceTable, {\n        string: \"This is a test.\"\n    });\n\n    assert.equal(\n        insertStatement.statement,\n        'INSERT INTO \"Source\" (\"string\") VALUES (?)'\n\n    );\n\n    assert.equal(\n        insertStatement.values[0],\n        \"This is a test.\"\n    );\n}\n\nexports[\"TableStatementBuilder.createInsertStatement: Defualt Values.\"] = () => {\n    var builder = new TableStatementBuilder();\n\n    var insertStatement = builder.createInsertStatement(sourceTable, {});\n\n    assert.equal(\n        insertStatement.statement,\n        'INSERT INTO \"Source\" DEFAULT VALUES'\n    );\n\n    assert.equal(\n        insertStatement.values.length,\n        0\n    );\n}\n\nexports[\"TableStatementBuilder.createUpdateStatement\"] = () => {\n    var builder = new TableStatementBuilder();\n\n    var updateStatement = builder.createUpdateStatement(sourceTable, { id: 1 }, { string: \"This is a update test.\" });\n\n    assert.equal(\n        updateStatement.statement,\n        `UPDATE \"Source\" SET \"string\" = ? WHERE \"id\" = ?`\n    );\n\n    assert.equal(\n        updateStatement.values[0],\n        \"This is a update test.\"\n    );\n\n    assert.equal(\n        updateStatement.values[1],\n        1\n    );\n\n    assert.equal(\n        updateStatement.values.length,\n        2\n    );\n}\n\n\nexports[\"TableStatementBuilder.createDeleteStatement\"] = () => {\n    var builder = new TableStatementBuilder();\n\n    var deleteStatement = builder.createDeleteStatement(sourceTable, { id: 1 });\n\n    assert.equal(\n        deleteStatement.statement,\n        `DELETE FROM \"Source\" WHERE \"id\" = ?`\n    );\n\n    assert.equal(\n        deleteStatement.values[0],\n        1\n    );\n\n    assert.equal(\n        deleteStatement.values.length,\n        1\n    );\n}\n\nexports[\"TableStatementBuilder.createTableIndexesStatements\"] = () => {\n    var builder = new TableStatementBuilder();\n\n    var indexStatements = builder.createTableIndexesStatements(foreignTable, relationships);\n\n    assert.equal(indexStatements[0], `CREATE INDEX IF NOT EXISTS \"foreignKey\" ON \"Foreign\" (\"foreignKey\")`);\n    assert.equal(indexStatements[1], `CREATE INDEX IF NOT EXISTS \"id\" ON \"Foreign\" (\"id\")`);\n}\n\nexports[\"TableStatementBuilder.createTableIndexesStatements: With custom indexes.\"] = () => {\n    var builder = new TableStatementBuilder();\n\n    var indexStatements = builder.createTableIndexesStatements(otherForeignTable, relationships);\n\n}"]}