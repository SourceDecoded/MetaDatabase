{"version":3,"sources":["../../src/tests/migration.Runner.js"],"names":["commandBuilder","exports","throws","runner","edm","name","version","migrator","addTableAsyncCount","label","addTableAsync","command","createAddTableCommand","pluralLabel","migrateAsync","then","equal","tables","length","addColumnAsyncCount","addColumnAsync","tableCommand","columnCommand","createAddColumnCommand","type","isPrimaryKey","personTable","idColumn","columns","removeTableAsync","removeColumnAsync","invalidCommand","execute","action","revert","ok","catch","error"],"mappings":"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","file":"migration.Runner.js","sourcesContent":["import MigrationRunner from \"./../migration/Runner\";\nimport Edm from \"./../edm/Edm\";\nimport EdmMigrator from \"./../edm/Migrator\";\nimport assert from \"assert\";\nimport CommandBuilder from \"./../migration/CommandBuilder\";\nimport Command from \"./../migration/Command\";\n\nlet commandBuilder = new CommandBuilder();\n\nexports[\"migration.Runner.constructor: empty options\"] = () => {\n    assert.throws(() => {\n        let runner = new MigrationRunner();\n    });\n};\n\nexports[\"migration.Runner.constructor: null edm.\"] = () => {\n    assert.throws(() => {\n        let runner = new MigrationRunner({\n            edm: null\n        });\n    });\n};\n\nexports[\"migration.Runner.constructor: Invalid Migrator.\"] = () => {\n    let edm = new Edm();\n    edm.name = \"Test\";\n    edm.version = \"0.0.1\";\n\n    assert.throws(() => {\n        let runner = new MigrationRunner({\n            edm: edm,\n            migrator: {\n                name: null\n            }\n        });\n    });\n};\n\nexports[\"migration.Runner.migrateAction: addTableAsync\"] = () => {\n    let addTableAsyncCount = 0;\n\n    let edm = new Edm();\n    edm.name = \"Test\";\n    edm.label = \"Test\";\n    edm.version = \"0.0.1\";\n\n    let migrator = {\n        name: \"mockMigrator\",\n        addTableAsync() {\n            addTableAsyncCount++;\n        }\n    };\n\n    let runner = new MigrationRunner({\n        edm: edm,\n        migrator: migrator\n    });\n\n    let command = commandBuilder.createAddTableCommand({\n        name: \"Person\",\n        label: \"Person\",\n        pluralLabel: \"People\"\n    });\n\n    return runner.migrateAsync([command]).then(() => {\n        assert.equal(edm.tables.length, 1);\n        assert.equal(edm.tables[0].name, \"Person\");\n        assert.equal(edm.tables[0].label, \"Person\");\n        assert.equal(edm.tables[0].pluralLabel, \"People\");\n        assert.equal(addTableAsyncCount, 1);\n    });\n}\n\nexports[\"migration.Runner.migrateAction: addTableAsync and addColumnAsync\"] = () => {\n    let addTableAsyncCount = 0;\n    let addColumnAsyncCount = 0;\n\n    let edm = new Edm();\n    edm.name = \"Test\";\n    edm.label = \"Test\";\n    edm.version = \"0.0.1\";\n\n    let migrator = {\n        name: \"mockMigrator\",\n        addTableAsync() {\n            addTableAsyncCount++;\n        },\n        addColumnAsync() {\n            addColumnAsyncCount++;\n        }\n    };\n\n    let runner = new MigrationRunner({\n        edm: edm,\n        migrator: migrator\n    });\n\n    let tableCommand = commandBuilder.createAddTableCommand({\n        name: \"Person\",\n        label: \"Person\",\n        pluralLabel: \"People\"\n    });\n\n    let columnCommand = commandBuilder.createAddColumnCommand(\"Person\", {\n        type: \"Integer\",\n        name: \"id\",\n        label: \"Identifier\",\n        isPrimaryKey: true\n    });\n\n    return runner.migrateAsync([tableCommand, columnCommand]).then(() => {\n        assert.equal(edm.tables.length, 1);\n        assert.equal(addTableAsyncCount, 1);\n        assert.equal(addColumnAsyncCount, 1);\n\n        let personTable = edm.tables[0];\n        let idColumn = personTable.columns[0];\n\n        assert.equal(personTable.name, \"Person\");\n        assert.equal(personTable.label, \"Person\");\n        assert.equal(personTable.pluralLabel, \"People\");\n        assert.equal(idColumn.name, \"id\");\n        assert.equal(idColumn.label, \"Identifier\");\n\n    });\n}\n\nexports[\"migration.Runner.migrateAction: addTableAsync, addColumnAsync and with a invalid action and successfully rollback.\"] = () => {\n    let addTableAsyncCount = 0;\n    let addColumnAsyncCount = 0;\n\n    let edm = new Edm();\n    edm.name = \"Test\";\n    edm.label = \"Test\";\n    edm.version = \"0.0.1\";\n\n    let migrator = {\n        name: \"mockMigrator\",\n        addTableAsync() {\n            addTableAsyncCount++;\n        },\n        addColumnAsync() {\n            addColumnAsyncCount++;\n        },\n        removeTableAsync() {\n            addTableAsyncCount--;\n        },\n        removeColumnAsync() {\n            addColumnAsyncCount--;\n        }\n    };\n\n    let runner = new MigrationRunner({\n        edm: edm,\n        migrator: migrator\n    });\n\n    let tableCommand = commandBuilder.createAddTableCommand({\n        name: \"Person\",\n        label: \"Person\",\n        pluralLabel: \"People\"\n    });\n\n    let columnCommand = commandBuilder.createAddColumnCommand(\"Person\", {\n        type: \"Integer\",\n        name: \"id\",\n        label: \"Identifier\",\n        isPrimaryKey: true\n    });\n\n    let invalidCommand = new Command();\n    invalidCommand.execute.action = \"badAction\";\n    invalidCommand.revert.action = \"anotherBadAction\";\n\n    return runner.migrateAsync([tableCommand, columnCommand, invalidCommand]).then(() => {\n        assert.ok(false, \"Supposed to fail with invalid action.\");\n    }).catch((error) => {\n        assert.equal(edm.tables.length, 0);\n        assert.equal(addTableAsyncCount, 0);\n        assert.equal(addColumnAsyncCount, 0);\n    });\n}"]}