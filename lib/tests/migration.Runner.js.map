{"version":3,"sources":["../../src/tests/migration.Runner.js"],"names":["exports","throws","runner","edm","name","version","migrator","addTableAsyncCount","label","addTableAsync","command","execute","action","options","pluralLabel","revert","migrateAsync","then","equal","tables","length"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEAA,QAAQ,6CAAR,IAAyD,YAAM;AAC3D,qBAAOC,MAAP,CAAc,YAAM;AAChB,YAAIC,SAAS,sBAAb;AACH,KAFD;AAGH,CAJD;;AAMAF,QAAQ,yCAAR,IAAqD,YAAM;AACvD,qBAAOC,MAAP,CAAc,YAAM;AAChB,YAAIC,SAAS,qBAAoB;AAC7BC,iBAAK;AADwB,SAApB,CAAb;AAGH,KAJD;AAKH,CAND;;AAQAH,QAAQ,iDAAR,IAA6D,YAAM;AAC/D,QAAIG,MAAM,mBAAV;AACAA,QAAIC,IAAJ,GAAW,MAAX;AACAD,QAAIE,OAAJ,GAAc,OAAd;;AAEA,qBAAOJ,MAAP,CAAc,YAAM;AAChB,YAAIC,SAAS,qBAAoB;AAC7BC,iBAAKA,GADwB;AAE7BG,sBAAU;AACNF,sBAAM;AADA;AAFmB,SAApB,CAAb;AAMH,KAPD;AAQH,CAbD;;AAeAJ,QAAQ,+CAAR,IAA2D,YAAM;AAC7D,QAAIO,qBAAqB,CAAzB;;AAEA,QAAIJ,MAAM,mBAAV;AACAA,QAAIC,IAAJ,GAAW,MAAX;AACAD,QAAIK,KAAJ,GAAY,MAAZ;AACAL,QAAIE,OAAJ,GAAc,OAAd;;AAEA,QAAIC,WAAW;AACXF,cAAM,cADK;AAEXK,uBAAe,yBAAI;AACfF;AACH;AAJU,KAAf;;AAOA,QAAIL,SAAS,qBAAoB;AAC7BC,aAAKA,GADwB;AAE7BG,kBAAUA;AAFmB,KAApB,CAAb;;AAKA,QAAII,UAAU,uBAAd;AACAA,YAAQC,OAAR,CAAgBC,MAAhB,GAAyB,UAAzB;AACAF,YAAQC,OAAR,CAAgBE,OAAhB,GAA0B;AACtBT,cAAM,WADgB;AAEtBI,eAAO,YAFe;AAGtBM,qBAAa;AAHS,KAA1B;;AAMAJ,YAAQK,MAAR,CAAeH,MAAf,GAAwB,aAAxB;AACAF,YAAQK,MAAR,CAAeF,OAAf,GAAyB;AACrBT,cAAM,WADe;AAErBI,eAAO,YAFc;AAGrBM,qBAAa;AAHQ,KAAzB;;AAMA,WAAOZ,OAAOc,YAAP,CAAoB,CAACN,OAAD,CAApB,EAA+BO,IAA/B,CAAoC,YAAM;AAC7C,yBAAOC,KAAP,CAAaf,IAAIgB,MAAJ,CAAWC,MAAxB,EAAgC,CAAhC;AACA,yBAAOF,KAAP,CAAaf,IAAIgB,MAAJ,CAAW,CAAX,EAAcf,IAA3B,EAAiC,WAAjC;AACA,yBAAOc,KAAP,CAAaX,kBAAb,EAAiC,CAAjC;AACH,KAJM,CAAP;AAKH,CAxCD","file":"migration.Runner.js","sourcesContent":["import MigrationRunner from \"./../migration/Runner\";\nimport Edm from \"./../edm/Edm\";\nimport EdmMigrator from \"./../edm/Migrator\";\nimport assert from \"assert\";\nimport Command from \"./../migration/Command\";\n\nexports[\"migration.Runner.constructor: empty options\"] = () => {\n    assert.throws(() => {\n        let runner = new MigrationRunner();\n    });\n};\n\nexports[\"migration.Runner.constructor: null edm.\"] = () => {\n    assert.throws(() => {\n        let runner = new MigrationRunner({\n            edm: null\n        });\n    });\n};\n\nexports[\"migration.Runner.constructor: Invalid Migrator.\"] = () => {\n    let edm = new Edm();\n    edm.name = \"Test\";\n    edm.version = \"0.0.1\";\n\n    assert.throws(() => {\n        let runner = new MigrationRunner({\n            edm: edm,\n            migrator: {\n                name: null\n            }\n        });\n    });\n};\n\nexports[\"migration.Runner.migrateAction: addTableAsync\"] = () => {\n    let addTableAsyncCount = 0;\n\n    let edm = new Edm();\n    edm.name = \"Test\";\n    edm.label = \"Test\";\n    edm.version = \"0.0.1\";\n\n    let migrator = {\n        name: \"mockMigrator\",\n        addTableAsync: ()=>{\n            addTableAsyncCount++;\n        }\n    };\n\n    let runner = new MigrationRunner({\n        edm: edm,\n        migrator: migrator\n    });\n\n    let command = new Command();\n    command.execute.action = \"addTable\";\n    command.execute.options = {\n        name: \"TestTable\",\n        label: \"Test Table\",\n        pluralLabel: \"Test Tables\"\n    };\n\n    command.revert.action = \"removeTable\";\n    command.revert.options = {\n        name: \"TestTable\",\n        label: \"Test Table\",\n        pluralLabel: \"Test Tables\"\n    };\n\n    return runner.migrateAsync([command]).then(() => {\n        assert.equal(edm.tables.length, 1);\n        assert.equal(edm.tables[0].name, \"TestTable\");\n        assert.equal(addTableAsyncCount, 1);\n    });\n}"]}