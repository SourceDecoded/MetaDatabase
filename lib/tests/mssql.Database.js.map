{"version":3,"sources":["../../src/tests/mssql.Database.js"],"names":["dbConfig","user","process","env","META_DB_TEST_USER","password","META_DB_TEST_PW","server","META_DB_TEST_SERVER","database","META_DB_TEST_DB","dataDb","META_DB_TEST_DB_DATA","edmDb","META_DB_TEST_DB_EDM","edmSchema","dataSchema","setupAsync","Promise","resolve","reject","dbDriver","getDatabaseForEdmAsync","then","db","instance","exports","setup","dispose","catch","e","fail","message","_createTables","table","_getTableFromEdm","buildOrder","_getTableBuildOrder","length","createAsync","dropAsync","getTable","tables","getTables"],"mappings":"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","file":"mssql.Database.js","sourcesContent":["import assert from \"assert\";\nimport Database from \"../mssql/Database\";\nimport edm from \"../mock/edm\";\nimport mssql from \"mssql\";\nimport MsSqlDriver from \"../dbDriver/MsSqlDriver\";\n\nlet dbConfig = {\n    user: process.env.META_DB_TEST_USER,\n    password: process.env.META_DB_TEST_PW,\n    server: process.env.META_DB_TEST_SERVER,\n    database: process.env.META_DB_TEST_DB,\n    dataDb: process.env.META_DB_TEST_DB_DATA,\n    edmDb: process.env.META_DB_TEST_DB_EDM,\n    edmSchema: \"dbo\",\n    dataSchema: \"dbo\"\n};\n\nlet setupAsync = () => {\n    return new Promise((resolve, reject) => {\n        let dbDriver = new MsSqlDriver(dbConfig);\n        dbDriver.getDatabaseForEdmAsync(edm).then((db) => {           \n            resolve({\n                dbDriver: dbDriver,\n                instance: db\n            });\n        });\n    });\n    \n};\n\nexports[\"mssql.Database constructor\"] = () => {\n    setupAsync().then((setup) => {\n        assert(setup.instance);\n        setup.dbDriver.dispose();\n    }).catch((e) => {\n        assert.fail(e.message);\n    });\n};\n\nexports[\"mssql.Database._createTables\"] = () => {\n    setupAsync().then((setup) => {\n        setup.instance._createTables();\n        setup.dbDriver.dispose();\n    }).catch((e) => {\n        assert.fail(e.message);\n    });\n};\n\nexports[\"mssql.Database._getTableFromEdm\"] = () => {\n    setupAsync().then((setup) => {\n        let table = setup.instance._getTableFromEdm(\"Source\");\n        assert(table);\n        setup.dbDriver.dispose();\n    }).catch((e) => {\n        assert.fail(e.message);\n    });\n};\n\nexports[\"mssql.Database._getTableBuildOrder\"] = () => {\n    setupAsync().then((setup) => {\n        let buildOrder = setup.instance._getTableBuildOrder();\n        assert(buildOrder.length > 0);\n        setup.dbDriver.dispose();\n    }).catch((e) => {\n        assert.fail(e.message);\n    });\n};\n\nexports[\"mssql.Database.createAsync\"] = () => {\n    setupAsync().then((setup) => {\n        setup.instance.createAsync().then(() => {\n            assert(true);\n        }).catch((e) => {\n            assert.fail((e.message));\n        }).then(() => {\n            setup.dbDriver.dispose();\n        });\n    }).catch(() => {\n        assert.fail(e.message);\n    });\n};\n\nexports[\"mssql.Database.dropAsync\"] = () => {\n    setupAsync().then((setup) => {\n        setup.instance.dropAsync().then(() => {\n            assert(true);\n        }).catch((e) => {\n            assert.fail(e.message); //\n        }).then(() => {\n            setup.dbDriver.dispose();\n        });\n    }).catch(() => {\n        assert.fail(e.message);\n    });\n};\n\nexports[\"mssql.Database.getTable\"] = () => {\n    setupAsync().then((setup) => {\n        let table = setup.instance.getTable(\"Source\");\n        assert(table);\n        setup.dbDriver.dispose();\n    }).catch((e) => {\n        assert.fail(e.message);\n    });\n};\n\nexports[\"mssql.Database.getTables\"] = () => {\n    setupAsync().then((setup) => {\n        let tables = setup.instance.getTables();\n        assert(tables.length > 0);\n        setup.dbDriver.dispose();\n    }).catch((e) => {\n        assert.fail(e.message);\n    });\n};\n"]}