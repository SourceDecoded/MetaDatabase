{"version":3,"sources":["../../src/tests/mssql.QueryBuilder.js"],"names":["schema","exports","queryBuilder","queryable","where","expBuilder","property","isEqualTo","query","getQuery","sql","createStatement","equal","select","isIn","otherQueryable","startsWith"],"mappings":";;AAAA;;;;AACA;;;;AACA;;AACA;;;;;;AAEA,IAAIA,SAAS,KAAb;;AAEAC,QAAQ,kCAAR,IAA8C,YAAM;;AAEhD,QAAIC,eAAe,0CAAsBF,MAAtB,CAAnB;AAEH,CAJD;;AAMAC,QAAQ,gCAAR,IAA4C,YAAM;;AAE9C,QAAIC,eAAe,0CAAsBF,MAAtB,CAAnB;AACA,QAAIG,YAAY,2BAAc,QAAd,CAAhB;;AAEAA,gBAAYA,UAAUC,KAAV,CAAgB,UAACC,UAAD,EAAgB;AACxC,eAAOA,WAAWC,QAAX,CAAoB,QAApB,EAA8BC,SAA9B,CAAwC,aAAxC,CAAP;AACH,KAFW,CAAZ;;AAIA,QAAIC,QAAQL,UAAUM,QAAV,EAAZ;AACA,QAAIC,MAAMR,aAAaS,eAAb,CAA6BH,KAA7B,CAAV;;AAEA,qBAAOI,KAAP,CAAaF,GAAb;AACH,CAbD;;AAeAT,QAAQ,6BAAR,IAAyC,YAAM;;AAE3C,QAAIC,eAAe,0CAAsBF,MAAtB,CAAnB;AACA,QAAIG,YAAY,2BAAc,QAAd,CAAhB;;AAEAA,gBAAYA,UAAUU,MAAV,CAAiB,CAAC,QAAD,CAAjB,EAA6BT,KAA7B,CAAmC,UAACC,UAAD,EAAgB;AAC3D,eAAOA,WAAWC,QAAX,CAAoB,QAApB,EAA8BC,SAA9B,CAAwC,aAAxC,CAAP;AACH,KAFW,CAAZ;;AAIA,QAAIC,QAAQL,UAAUM,QAAV,EAAZ;AACA,QAAIC,MAAMR,aAAaS,eAAb,CAA6BH,KAA7B,CAAV;;AAEA,qBAAOI,KAAP,CAAaF,GAAb;AACH,CAbD;;AAeAT,QAAQ,sCAAR,IAAkD,YAAM;;AAEpD,QAAIC,eAAe,0CAAsBF,MAAtB,CAAnB;AACA,QAAIG,YAAY,2BAAc,QAAd,CAAhB;;AAEAA,gBAAYA,UAAUC,KAAV,CAAgB,UAACC,UAAD,EAAgB;AACxC,eAAOA,WAAWC,QAAX,CAAoB,QAApB,EAA8BQ,IAA9B,CAAmC,CAAC,MAAD,EAAS,KAAT,CAAnC,CAAP;AACH,KAFW,CAAZ;;AAIA,QAAIN,QAAQL,UAAUM,QAAV,EAAZ;AACA,QAAIC,MAAMR,aAAaS,eAAb,CAA6BH,KAA7B,CAAV;;AAEA,qBAAOI,KAAP,CAAaF,GAAb;AACH,CAbD;;AAeAT,QAAQ,0CAAR,IAAsD,YAAM;;AAExD,QAAIC,eAAe,0CAAsBF,MAAtB,CAAnB;AACA,QAAIG,YAAY,2BAAc,QAAd,CAAhB;;AAEA,QAAIY,iBAAiB,2BAAc,cAAd,EAA8BF,MAA9B,CAAqC,CAAC,QAAD,CAArC,EAAiDT,KAAjD,CAAuD,UAACC,UAAD,EAAgB;AACxF,eAAOA,WAAWC,QAAX,CAAoB,QAApB,EAA8BU,UAA9B,CAAyC,GAAzC,CAAP;AACH,KAFoB,CAArB;;AAIAb,gBAAYA,UAAUC,KAAV,CAAgB,UAACC,UAAD,EAAgB;AACxC,eAAOA,WAAWC,QAAX,CAAoB,QAApB,EAA8BQ,IAA9B,CAAmCC,cAAnC,CAAP;AACH,KAFW,CAAZ;;AAIA,QAAIP,QAAQL,UAAUM,QAAV,EAAZ;AACA,QAAIC,MAAMR,aAAaS,eAAb,CAA6BH,KAA7B,CAAV;;AAEA,qBAAOI,KAAP,CAAaF,GAAb;AACH,CAjBD","file":"mssql.QueryBuilder.js","sourcesContent":["import assert from \"assert\";\nimport QueryBuilder from \"./../mssql/QueryBuilder\";\nimport { Queryable } from \"queryablejs\";\nimport edm from \"./../mock/edm\";\n\nlet schema = \"dbo\";\n\nexports[\"mssql.QueryBuilder: Constructor.\"] = () => {\n\n    let queryBuilder = new QueryBuilder(edm, schema);\n\n}\n\nexports[\"mssql.QueryBuilder: IsEqualTo.\"] = () => {\n\n    let queryBuilder = new QueryBuilder(edm, schema);\n    let queryable = new Queryable(\"Source\");\n\n    queryable = queryable.where((expBuilder) => {\n        return expBuilder.property(\"string\").isEqualTo(\"Hello World\");\n    });\n\n    let query = queryable.getQuery();\n    let sql = queryBuilder.createStatement(query);\n\n    assert.equal(sql, `SELECT * FROM [dbo].[Source__0_0_1] WHERE [dbo].[Source__0_0_1].[string] = 'Hello World' ORDER BY (SELECT NULL) OFFSET 0 ROWS`);\n}\n\nexports[\"mssql.QueryBuilder: Select.\"] = () => {\n\n    let queryBuilder = new QueryBuilder(edm, schema);\n    let queryable = new Queryable(\"Source\");\n\n    queryable = queryable.select([\"string\"]).where((expBuilder) => {\n        return expBuilder.property(\"string\").isEqualTo(\"Hello World\");\n    });\n\n    let query = queryable.getQuery();\n    let sql = queryBuilder.createStatement(query);\n\n    assert.equal(sql, `SELECT [string] AS [string] FROM [dbo].[Source__0_0_1] WHERE [dbo].[Source__0_0_1].[string] = 'Hello World' ORDER BY (SELECT NULL) OFFSET 0 ROWS`);\n}\n\nexports[\"mssql.QueryBuilder: isIn with array.\"] = () => {\n\n    let queryBuilder = new QueryBuilder(edm, schema);\n    let queryable = new Queryable(\"Source\");\n\n    queryable = queryable.where((expBuilder) => {\n        return expBuilder.property(\"string\").isIn([\"John\", \"Doe\"]);\n    });\n\n    let query = queryable.getQuery();\n    let sql = queryBuilder.createStatement(query);\n\n    assert.equal(sql, `SELECT * FROM [dbo].[Source__0_0_1] WHERE [dbo].[Source__0_0_1].[string] IN ('John', 'Doe') ORDER BY (SELECT NULL) OFFSET 0 ROWS`);\n}\n\nexports[\"mssql.QueryBuilder: isIn with queryable.\"] = () => {\n\n    let queryBuilder = new QueryBuilder(edm, schema);\n    let queryable = new Queryable(\"Source\");\n\n    let otherQueryable = new Queryable(\"OtherForeign\").select([\"string\"]).where((expBuilder) => {\n        return expBuilder.property(\"string\").startsWith(\"J\");\n    });\n\n    queryable = queryable.where((expBuilder) => {\n        return expBuilder.property(\"string\").isIn(otherQueryable);\n    });\n\n    let query = queryable.getQuery();\n    let sql = queryBuilder.createStatement(query);\n\n    assert.equal(sql, `SELECT * FROM [dbo].[Source__0_0_1] WHERE [dbo].[Source__0_0_1].[string] IN (SELECT [string] AS [string] FROM [dbo].[OtherForeign__0_0_1] WHERE [dbo].[OtherForeign__0_0_1].[string] LIKE 'J%' ORDER BY (SELECT NULL) OFFSET 0 ROWS) ORDER BY (SELECT NULL) OFFSET 0 ROWS`);\n}"]}