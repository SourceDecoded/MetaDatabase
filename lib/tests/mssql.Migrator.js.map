{"version":3,"sources":["../../src/tests/mssql.Migrator.js"],"names":["exports","pool","iDb","connectionPool","edm","schema","migrator","builder","column","command","createAddColumnCommand","addColumnAsync","execute","then","query","equal","table","createAddTableCommand","addTableAsync","passingResult"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEAA,QAAQ,sCAAR,IAAkD,YAAM;AACpD,QAAIC,OAAO,yBAAX;AACA,QAAIC,MAAM,uBAAa;AACnBC,wBAAgBF,IADG;AAEnBG,0BAFmB;AAGnBC,gBAAQ;AAHW,KAAb,CAAV;;AAMA,QAAIC,WAAW,uBAAaJ,GAAb,CAAf;AACA,QAAIK,UAAU,8BAAd;AACA,QAAIC,SAAS;AACT,gBAAQ,QADC;AAET,gBAAQ,WAFC;AAGT,iBAAS;AAHA,KAAb;AAKA,QAAIC,UAAUF,QAAQG,sBAAR,CAA+B,QAA/B,EAAyCF,MAAzC,CAAd;AACAF,aAASK,cAAT,gBAA6BF,QAAQG,OAArC,EAA8CC,IAA9C,CAAmD,YAAM;AACrD,YAAIC,QAAQb,KAAKa,KAAjB;AACA,yBAAOC,KAAP,CAAaD,KAAb,EAAoB,yDAApB;AACH,KAHD;AAIH,CApBD;;AAsBAd,QAAQ,8BAAR,IAA0C,YAAM;AAC5C,QAAIC,OAAO,yBAAX;AACA,QAAIC,MAAM,uBAAa;AACnBC,wBAAgBF,IADG;AAEnBG,0BAFmB;AAGnBC,gBAAQ;AAHW,KAAb,CAAV;;AAMA,QAAIC,WAAW,uBAAaJ,GAAb,CAAf;AACA,QAAIK,UAAU,8BAAd;AACA,QAAIS,QAAQ;AACR,gBAAQ,WADA;AAER,iBAAS,MAFD;AAGR,uBAAe,OAHP;AAIR,mBAAW,CACP;AACI,oBAAQ,SADZ;AAEI,oBAAQ,IAFZ;AAGI,qBAAS,YAHb;AAII,4BAAgB,IAJpB;AAKI,+BAAmB,IALvB;AAMI,0BAAc;AANlB,SADO,EASP;AACI,oBAAQ,QADZ;AAEI,oBAAQ,QAFZ;AAGI,qBAAS,QAHb;AAII,kCAAsB;AAJ1B,SATO;AAJH,KAAZ;;AAsBA,QAAIP,UAAUF,QAAQU,qBAAR,CAA8BD,KAA9B,CAAd;AACAV,aAASY,aAAT,gBAA4BT,QAAQG,OAApC,EAA6CC,IAA7C,CAAkD,YAAM;AACpD,YAAIC,QAAQb,KAAKa,KAAjB;AACA,YAAIK,oSAAJ;AAKA,yBAAOJ,KAAP,CAAaD,KAAb,EAAoBK,aAApB;AACH,KARD;AASH,CA1CD","file":"mssql.Migrator.js","sourcesContent":["import assert from \"assert\";\nimport Migrator from \"../mssql/Migrator\";\nimport edm from \"../mock/edm\";\nimport Pool from \"../mock/MsSqlPool\";\nimport CommandBuilder from \"../migration/CommandBuilder\";\nimport Database from \"../mssql/Database\";\n\nexports[\"mssql.Migrator.addColumnAsync string\"] = () => {\n    let pool = new Pool();\n    let iDb = new Database({\n        connectionPool: pool,\n        edm: edm,\n        schema: \"dbo\"\n    });\n\n    let migrator = new Migrator(iDb);\n    let builder = new CommandBuilder();\n    let column = {\n        \"type\": \"String\",\n        \"name\": \"newColumn\",\n        \"label\": \"New Column\"\n    };\n    let command = builder.createAddColumnCommand(\"Source\", column);\n    migrator.addColumnAsync(edm, command.execute).then(() => {\n        let query = pool.query;\n        assert.equal(query, \"ALTER TABLE [dbo].[Source__0_0_1] ADD [newColumn] ntext\");\n    });\n};\n\nexports[\"mssql.Migrator.addTableAsync\"] = () => {\n    let pool = new Pool();\n    let iDb = new Database({\n        connectionPool: pool,\n        edm: edm,\n        schema: \"dbo\"\n    });\n\n    let migrator = new Migrator(iDb);\n    let builder = new CommandBuilder();\n    let table = {\n        \"name\": \"testTable\",\n        \"label\": \"Test\",\n        \"pluralLabel\": \"Tests\",\n        \"columns\": [\n            {\n                \"type\": \"Integer\",\n                \"name\": \"id\",\n                \"label\": \"Identifier\",\n                \"isPrimaryKey\": true,\n                \"isAutoIncrement\": true,\n                \"isNullable\": false\n            },\n            {\n                \"type\": \"String\",\n                \"name\": \"string\",\n                \"label\": \"String\",\n                \"defaultStringValue\": \"\"\n            }\n        ]\n    };\n\n    let command = builder.createAddTableCommand(table);\n    migrator.addTableAsync(edm, command.execute).then(() => {\n        let query = pool.query;\n        let passingResult = `IF NOT (EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES \n            WHERE TABLE_SCHEMA = 'dbo' AND TABLE_NAME = 'testTable__0_0_1'))\n            BEGIN\n            CREATE TABLE [dbo].[testTable__0_0_1] ([id] int PRIMARY KEY IDENTITY(1,1), [string] ntext)\n            END`;\n        assert.equal(query, passingResult);\n    });\n};\n"]}