{"version":3,"sources":["../../src/tests/meta.Database.js"],"names":["path","user","admin","exports","prepareEntityToBeAddedAsyncCount","entityAddedAsyncCount","validateEntityToBeAddedAsyncCount","fileSystem","decorator","name","prepareEntityToBeAddedAsync","entity","options","equal","option1","Promise","resolve","entityAddedAsync","validateEntityToBeAddedAsync","open","then","sqliteDatabase","database","edm","metaDatabase","decorators","table","getTable","addEntityAsync","string","integer","prepareEntityToBeUpdatedAsyncCount","entityUpdatedAsyncCount","validateEntityToBeUpdatedAsyncCount","prepareEntityToBeUpdatedAsync","delta","entityUpdatedAsync","validateEntityToBeUpdatedAsync","sqlite","databasePath","initializeAsync","getTableAsync","t","updateEntityAsync","type","approveEntityToBeRemovedAsyncCount","entityRemovedAsyncCount","approveEntityToBeRemovedAsync","entityRemovedAsync","removeEntityAsync","activatedAsyncCount","activatedAsync","fileUpdatedAsyncCount","fileRemovedAsyncCount","fileContent","id","fileUpdatedAsync","filePath","fileRemovedAsync","getFileWriteStreamByIdAsync","stream","write","end","getFileReadStreamByIdAsync","reject","data","on","d","removeFileByIdAsync","refineQueryableAsync","queryable","isAdmin","where","expBuilder","property","isEqualTo","asQueryable","toArrayAsync","results","length"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAIA,OAAO,UAAX;AACA,IAAIC,OAAO,qBAAX;AACA,IAAIC,QAAQ,qBAAZ;;AAEAC,QAAQ,4FAAR,IAAwG,YAAM;AAC1G,QAAIC,mCAAmC,CAAvC;AACA,QAAIC,wBAAwB,CAA5B;AACA,QAAIC,oCAAoC,CAAxC;AACA,QAAIC,aAAa,0BAAjB;;AAEA,QAAIC,YAAY;AACZC,cAAM,MADM;AAEZC,mCAFY,uCAEgBT,IAFhB,EAEsBU,MAFtB,EAE8BC,OAF9B,EAEuC;AAC/C,6BAAOC,KAAP,CAAaD,QAAQE,OAArB,EAA8B,IAA9B;AACAV;AACA,mBAAOW,QAAQC,OAAR,EAAP;AACH,SANW;AAOZC,wBAPY,4BAOKhB,IAPL,EAOWU,MAPX,EAOmBC,OAPnB,EAO4B;AACpC,6BAAOC,KAAP,CAAaD,QAAQE,OAArB,EAA8B,IAA9B;AACAT;AACH,SAVW;AAWZa,oCAXY,wCAWiBjB,IAXjB,EAWuBU,MAXvB,EAW+BC,OAX/B,EAWwC;AAChD,6BAAOC,KAAP,CAAaD,QAAQE,OAArB,EAA8B,IAA9B;AACAR;AACH;AAdW,KAAhB;;AAiBA,WAAO,iBAAOa,IAAP,CAAYnB,IAAZ,EAAkBoB,IAAlB,CAAuB,UAACC,cAAD,EAAoB;AAC9C,YAAIC,WAAW,uBAAa;AACxBC,8BADwB;AAExBF,4BAAgBA;AAFQ,SAAb,CAAf;;AAKA,YAAIG,eAAe,uBAAiB;AAChCjB,wBAAYA,UADoB;AAEhCe,sBAAUA,QAFsB;AAGhCG,wBAAY,CAACjB,SAAD;AAHoB,SAAjB,CAAnB;;AAOA,YAAIkB,QAAQF,aAAaG,QAAb,CAAsB,QAAtB,CAAZ;;AAEA,eAAOD,MAAME,cAAN,CAAqB3B,IAArB,EAA2B;AAC9B4B,oBAAQ,cADsB;AAE9BC,qBAAS;AAFqB,SAA3B,EAGJV,IAHI,CAGC,YAAM;AACV,gBAAIM,QAAQF,aAAaG,QAAb,CAAsB,SAAtB,CAAZ;AACA,mBAAOD,MAAME,cAAN,CAAqB3B,IAArB,EAA2B;AAC9B6B,yBAAS;AADqB,aAA3B,CAAP;AAGH,SARM,EAQJV,IARI,CAQC,YAAM;AACV,6BAAOP,KAAP,CAAaT,gCAAb,EAA+C,CAA/C;AACA,6BAAOS,KAAP,CAAaR,qBAAb,EAAoC,CAApC;AACA,6BAAOQ,KAAP,CAAaP,iCAAb,EAAgD,CAAhD;AACH,SAZM,CAAP;AAaH,KA5BM,CAAP;AA8BH,CArDD;;AAuDAH,QAAQ,kGAAR,IAA8G,YAAM;AAChH,QAAI4B,qCAAqC,CAAzC;AACA,QAAIC,0BAA0B,CAA9B;AACA,QAAIC,sCAAsC,CAA1C;AACA,QAAI1B,aAAa,0BAAjB;;AAEA,QAAIC,YAAY;AACZC,cAAM,MADM;AAEZyB,qCAFY,yCAEkBjC,IAFlB,EAEwBU,MAFxB,EAEgCwB,KAFhC,EAEuCvB,OAFvC,EAEgD;AACxD,6BAAOC,KAAP,CAAaD,QAAQE,OAArB,EAA8B,IAA9B;AACAiB;AACA,mBAAOhB,QAAQC,OAAR,EAAP;AACH,SANW;AAOZoB,0BAPY,8BAOOnC,IAPP,EAOaU,MAPb,EAOqBwB,KAPrB,EAO4BvB,OAP5B,EAOqC;AAC7C,6BAAOC,KAAP,CAAaD,QAAQE,OAArB,EAA8B,IAA9B;AACAkB;AACH,SAVW;AAWZK,sCAXY,0CAWmBpC,IAXnB,EAWyBU,MAXzB,EAWiCwB,KAXjC,EAWwCvB,OAXxC,EAWiD;AACzD,6BAAOC,KAAP,CAAaD,QAAQE,OAArB,EAA8B,IAA9B;AACAmB;AACH;AAdW,KAAhB;;AAiBA,QAAIT,eAAe,uBAAiB;AAChCjB,oBAAYA,UADoB;AAEhC+B,gCAFgC;AAGhCf,0BAHgC;AAIhCgB,sBAAcvC,IAJkB;AAKhCyB,oBAAY,CAACjB,SAAD;AALoB,KAAjB,CAAnB;;AAQA,QAAIkB,QAAQ,IAAZ;;AAEA,WAAOF,aAAagB,eAAb,GAA+BpB,IAA/B,CAAoC,YAAM;AAC7C,eAAOI,aAAaiB,aAAb,CAA2B,QAA3B,CAAP;AACH,KAFM,EAEJrB,IAFI,CAEC,UAACsB,CAAD,EAAO;AACXhB,gBAAQgB,CAAR;AACA,eAAOhB,MAAME,cAAN,CAAqB3B,IAArB,EAA2B;AAC9B4B,oBAAQ,cADsB;AAE9BC,qBAAS;AAFqB,SAA3B,CAAP;AAIH,KARM,EAQJV,IARI,CAQC,UAACT,MAAD,EAAY;AAChB,eAAOe,MAAMiB,iBAAN,CAAwBhC,MAAxB,EAAgC,EAAEkB,QAAQ,eAAV,EAAhC,CAAP;AACH,KAVM,EAUJT,IAVI,CAUC,YAAM;AACV,yBAAOP,KAAP,CAAakB,kCAAb,EAAiD,CAAjD;AACA,yBAAOlB,KAAP,CAAamB,uBAAb,EAAsC,CAAtC;AACA,yBAAOnB,KAAP,CAAaoB,mCAAb,EAAkD,CAAlD;AACH,KAdM,CAAP;AAgBH,CAjDD;;AAmDA9B,QAAQ,kGAAR,IAA8G,YAAM;AAChH,QAAI4B,qCAAqC,CAAzC;AACA,QAAIC,0BAA0B,CAA9B;AACA,QAAIC,sCAAsC,CAA1C;AACA,QAAI1B,aAAa,0BAAjB;;AAEA,QAAIC,YAAY;AACZC,cAAM,MADM;AAEZyB,qCAFY,yCAEkBU,IAFlB,EAEwBjC,MAFxB,EAEgCwB,KAFhC,EAEuCvB,OAFvC,EAEgD;AACxD,6BAAOC,KAAP,CAAaD,QAAQE,OAArB,EAA8B,IAA9B;AACAiB;AACA,mBAAOhB,QAAQC,OAAR,EAAP;AACH,SANW;AAOZoB,0BAPY,8BAOOQ,IAPP,EAOajC,MAPb,EAOqBwB,KAPrB,EAO4BvB,OAP5B,EAOqC;AAC7C,6BAAOC,KAAP,CAAaD,QAAQE,OAArB,EAA8B,IAA9B;AACAkB;AACH,SAVW;AAWZK,sCAXY,0CAWmBO,IAXnB,EAWyBjC,MAXzB,EAWiCwB,KAXjC,EAWwCvB,OAXxC,EAWiD;AACzD,6BAAOC,KAAP,CAAaD,QAAQE,OAArB,EAA8B,IAA9B;AACAmB;AACH;AAdW,KAAhB;;AAiBA,QAAIT,eAAe,uBAAiB;AAChCjB,oBAAYA,UADoB;AAEhC+B,gCAFgC;AAGhCf,0BAHgC;AAIhCgB,sBAAcvC,IAJkB;AAKhCyB,oBAAY,CAACjB,SAAD;AALoB,KAAjB,CAAnB;;AAQA,QAAIkB,QAAQ,IAAZ;;AAEA,WAAOF,aAAagB,eAAb,GAA+BpB,IAA/B,CAAoC,YAAM;AAC7C,eAAOI,aAAaiB,aAAb,CAA2B,QAA3B,CAAP;AACH,KAFM,EAEJrB,IAFI,CAEC,UAACsB,CAAD,EAAO;AACXhB,gBAAQgB,CAAR;AACA,eAAOhB,MAAME,cAAN,CAAqB3B,IAArB,EAA2B;AAC9B4B,oBAAQ,cADsB;AAE9BC,qBAAS;AAFqB,SAA3B,CAAP;AAIH,KARM,EAQJV,IARI,CAQC,UAACT,MAAD,EAAY;AAChB,eAAOe,MAAMiB,iBAAN,CAAwB1C,IAAxB,EAA8BU,MAA9B,EAAsC,EAAEkB,QAAQ,eAAV,EAAtC,CAAP;AACH,KAVM,EAUJT,IAVI,CAUC,YAAM;AACV,yBAAOP,KAAP,CAAakB,kCAAb,EAAiD,CAAjD;AACA,yBAAOlB,KAAP,CAAamB,uBAAb,EAAsC,CAAtC;AACA,yBAAOnB,KAAP,CAAaoB,mCAAb,EAAkD,CAAlD;AACH,KAdM,CAAP;AAgBH,CAjDD;;AAmDA9B,QAAQ,kEAAR,IAA8E,YAAM;AAChF,QAAI0C,qCAAqC,CAAzC;AACA,QAAIC,0BAA0B,CAA9B;AACA,QAAIvC,aAAa,0BAAjB;;AAEA,QAAIC,YAAY;AACZC,cAAM,MADM;AAEZsC,qCAFY,yCAEkB9C,IAFlB,EAEwBU,MAFxB,EAEgCC,OAFhC,EAEyC;AACjD,6BAAOC,KAAP,CAAaD,QAAQE,OAArB,EAA8B,IAA9B;AACA+B;AACA,mBAAO9B,QAAQC,OAAR,EAAP;AACH,SANW;AAOZgC,0BAPY,8BAOO/C,IAPP,EAOaU,MAPb,EAOqBC,OAPrB,EAO8B;AACtC,6BAAOC,KAAP,CAAaD,QAAQE,OAArB,EAA8B,IAA9B;AACAgC;AACH;AAVW,KAAhB;;AAaA,QAAItB,eAAe,uBAAiB;AAChCjB,oBAAYA,UADoB;AAEhC+B,gCAFgC;AAGhCf,0BAHgC;AAIhCgB,sBAAcvC,IAJkB;AAKhCyB,oBAAY,CAACjB,SAAD;AALoB,KAAjB,CAAnB;;AAQA,QAAIkB,QAAQ,IAAZ;;AAEA,WAAOF,aAAagB,eAAb,GAA+BpB,IAA/B,CAAoC,YAAM;AAC7C,eAAOI,aAAaiB,aAAb,CAA2B,QAA3B,CAAP;AACH,KAFM,EAEJrB,IAFI,CAEC,UAACsB,CAAD,EAAO;AACXhB,gBAAQgB,CAAR;AACA,eAAOhB,MAAME,cAAN,CAAqB3B,IAArB,EAA2B;AAC9B4B,oBAAQ,cADsB;AAE9BC,qBAAS;AAFqB,SAA3B,CAAP;AAIH,KARM,EAQJV,IARI,CAQC,UAACT,MAAD,EAAY;AAChB,eAAOe,MAAMuB,iBAAN,CAAwBhD,IAAxB,EAA8BU,MAA9B,CAAP;AACH,KAVM,EAUJS,IAVI,CAUC,YAAM;AACV,yBAAOP,KAAP,CAAagC,kCAAb,EAAiD,CAAjD;AACA,yBAAOhC,KAAP,CAAaiC,uBAAb,EAAsC,CAAtC;AACH,KAbM,CAAP;AAeH,CA3CD;;AA6CA3C,QAAQ,+BAAR,IAA2C,YAAM;AAC7C,QAAI+C,sBAAsB,CAA1B;AACA,QAAI3C,aAAa,0BAAjB;;AAEA,QAAIC,YAAY;AACZC,cAAM,MADM;AAEZ0C,sBAFY,0BAEG3B,YAFH,EAEiB;AACzB,6BAAOX,KAAP,CAAaW,gBAAgB,IAA7B,EAAmC,IAAnC;AACA0B;AACH;AALW,KAAhB;;AAQA,QAAI1B,eAAe,uBAAiB;AAChCjB,oBAAYA,UADoB;AAEhC+B,gCAFgC;AAGhCf,0BAHgC;AAIhCgB,sBAAcvC,IAJkB;AAKhCyB,oBAAY,CAACjB,SAAD;AALoB,KAAjB,CAAnB;;AAQA,QAAIkB,QAAQ,IAAZ;;AAEA,WAAOF,aAAagB,eAAb,GAA+BpB,IAA/B,CAAoC,YAAM;AAC7C,eAAOI,aAAaiB,aAAb,CAA2B,QAA3B,CAAP;AACH,KAFM,EAEJrB,IAFI,CAEC,YAAM;AACV,yBAAOP,KAAP,CAAaqC,mBAAb,EAAkC,CAAlC;AACH,KAJM,CAAP;AAMH,CA5BD;;AA8BA/C,QAAQ,gCAAR,IAA4C,YAAM;AAC9C,QAAII,aAAa,0BAAjB;AACA,QAAI6C,wBAAwB,CAA5B;AACA,QAAIC,wBAAwB,CAA5B;AACA,QAAIC,cAAc,iBAAlB;AACA,QAAI5B,cAAJ;AACA,QAAI6B,WAAJ;;AAEA,QAAI/C,YAAY;AACZC,cAAM,MADM;AAEZ+C,wBAFY,4BAEKD,EAFL,EAESE,QAFT,EAEmB;AAC3BL;AACH,SAJW;AAKZM,wBALY,4BAKKH,EALL,EAKSE,QALT,EAKmB;AAC3BJ;AACH;AAPW,KAAhB;;AAUA,QAAI7B,eAAe,uBAAiB;AAChCjB,oBAAYA,UADoB;AAEhC+B,gCAFgC;AAGhCf,0BAHgC;AAIhCgB,sBAAcvC,IAJkB;AAKhCyB,oBAAY,CAACjB,SAAD;AALoB,KAAjB,CAAnB;;AAQA,WAAOgB,aAAagB,eAAb,GAA+BpB,IAA/B,CAAoC,YAAM;AAC7C,eAAOI,aAAaiB,aAAb,CAA2B,QAA3B,CAAP;AACH,KAFM,EAEJrB,IAFI,CAEC,UAACsB,CAAD,EAAO;AACXhB,gBAAQgB,CAAR;AACA,eAAOhB,MAAME,cAAN,CAAqB3B,IAArB,EAA2B;AAC9B4B,oBAAQ;AADsB,SAA3B,CAAP;AAGH,KAPM,EAOJT,IAPI,CAOC,UAACT,MAAD,EAAY;AAChB4C,aAAK5C,OAAO4C,EAAZ;AACA,eAAO7B,MAAMiC,2BAAN,CAAkC1D,IAAlC,EAAwCsD,EAAxC,CAAP;AACH,KAVM,EAUJnC,IAVI,CAUC,UAACwC,MAAD,EAAY;AAChBA,eAAOC,KAAP,CAAaP,WAAb;AACAM,eAAOE,GAAP;AACH,KAbM,EAaJ1C,IAbI,CAaC,YAAM;AACV,eAAOM,MAAMqC,0BAAN,CAAiC9D,IAAjC,EAAuCsD,EAAvC,CAAP;AACH,KAfM,EAeJnC,IAfI,CAeC,UAACwC,MAAD,EAAY;AAChB,eAAO,IAAI7C,OAAJ,CAAY,UAACC,OAAD,EAAUgD,MAAV,EAAqB;AACpC,gBAAIC,OAAO,EAAX;;AAEAL,mBAAOM,EAAP,CAAU,MAAV,EAAkB,UAACC,CAAD,EAAO;AACrBF,wBAAQE,CAAR;AACH,aAFD;AAGAP,mBAAOM,EAAP,CAAU,KAAV,EAAiB,YAAM;AACnBlD,wBAAQiD,IAAR;AACH,aAFD;AAGH,SATM,CAAP;AAUH,KA1BM,EA0BJ7C,IA1BI,CA0BC,UAAC6C,IAAD,EAAU;AACd,yBAAOpD,KAAP,CAAauC,qBAAb,EAAoC,CAApC;AACA,yBAAOvC,KAAP,CAAaoD,IAAb,EAAmBX,WAAnB;AACH,KA7BM,EA6BJlC,IA7BI,CA6BC,YAAM;AACV,eAAOM,MAAM0C,mBAAN,CAA0BnE,IAA1B,EAAgCsD,EAAhC,CAAP;AACH,KA/BM,EA+BJnC,IA/BI,CA+BC,YAAM;AACV,yBAAOP,KAAP,CAAawC,qBAAb,EAAoC,CAApC;AACH,KAjCM,CAAP;AAkCH,CA5DD;;AA8DAlD,QAAQ,qCAAR,IAAiD,YAAM;AACnD,QAAII,aAAa,0BAAjB;AACA,QAAIC,YAAY;AACZC,cAAM,MADM;AAEZ4D,4BAFY,gCAESpE,IAFT,EAEeqE,SAFf,EAE0B1D,OAF1B,EAEmC;AAC3C,gBAAIX,KAAKsE,OAAT,EAAkB;AACd,uBAAOD,SAAP;AACH,aAFD,MAEO;AACH,uBAAOA,UAAUE,KAAV,CAAgB,UAACC,UAAD,EAAgB;AACnC,2BAAOA,WAAWC,QAAX,CAAoB,QAApB,EAA8BC,SAA9B,CAAwC,CAAxC,CAAP;AACH,iBAFM,CAAP;AAGH;AACJ;AAVW,KAAhB;;AAaA,QAAInD,eAAe,uBAAiB;AAChCjB,oBAAYA,UADoB;AAEhC+B,gCAFgC;AAGhCf,0BAHgC;AAIhCgB,sBAAcvC,IAJkB;AAKhCyB,oBAAY,CAACjB,SAAD;AALoB,KAAjB,CAAnB;;AAQA,QAAIkB,QAAQ,IAAZ;;AAEA,WAAOF,aAAagB,eAAb,GAA+BpB,IAA/B,CAAoC,YAAM;AAC7C,eAAOI,aAAaiB,aAAb,CAA2B,QAA3B,CAAP;AACH,KAFM,EAEJrB,IAFI,CAEC,UAACsB,CAAD,EAAO;AACXhB,gBAAQgB,CAAR;;AAEA,eAAOhB,MAAME,cAAN,CAAqB3B,IAArB,EAA2B;AAC9B4B,oBAAQ,cADsB;AAE9BC,qBAAS;AAFqB,SAA3B,CAAP;AAIH,KATM,EASJV,IATI,CASC,YAAM;AACV,eAAOM,MAAMkD,WAAN,CAAkB3E,IAAlB,EAAwBuE,KAAxB,CAA8B,UAACC,UAAD,EAAgB;AACjD,mBAAOA,WAAWC,QAAX,CAAoB,QAApB,EAA8BC,SAA9B,CAAwC,cAAxC,CAAP;AACH,SAFM,EAEJE,YAFI,EAAP;AAGH,KAbM,EAaJzD,IAbI,CAaC,UAAC0D,OAAD,EAAa;AACjB,yBAAOjE,KAAP,CAAaiE,QAAQC,MAArB,EAA6B,CAA7B;AACH,KAfM,EAeJ3D,IAfI,CAeC,YAAM;AACV,eAAOM,MAAMkD,WAAN,CAAkB1E,KAAlB,EAAyBsE,KAAzB,CAA+B,UAACC,UAAD,EAAgB;AAClD,mBAAOA,WAAWC,QAAX,CAAoB,QAApB,EAA8BC,SAA9B,CAAwC,cAAxC,CAAP;AACH,SAFM,EAEJE,YAFI,EAAP;AAGH,KAnBM,EAmBJzD,IAnBI,CAmBC,UAAC0D,OAAD,EAAa;AACjB,yBAAOjE,KAAP,CAAaiE,QAAQC,MAArB,EAA6B,CAA7B;AACH,KArBM,CAAP;AAuBH,CAhDD","file":"meta.Database.js","sourcesContent":["import assert from \"assert\";\nimport MetaDatabase from \"./../meta/Database\";\nimport Database from \"./../sqlite/Database\";\nimport edm from \"./../mock/edm\";\nimport sqlite from \"sqlite\";\nimport GuestUser from \"./../user/Guest\";\nimport AdminUser from \"./../user/Admin\";\nimport FileSystem from \"./../mock/FileSystem\";\n\nlet path = \":memory:\";\nlet user = new GuestUser();\nlet admin = new AdminUser();\n\nexports[\"MetaDatabase: prepareEntityToBeAddedAsync, entityAddedAsync, validateEntityToBeAddedAsync.\"] = () => {\n    let prepareEntityToBeAddedAsyncCount = 0;\n    let entityAddedAsyncCount = 0;\n    let validateEntityToBeAddedAsyncCount = 0;\n    let fileSystem = new FileSystem();\n\n    let decorator = {\n        name: \"Test\",\n        prepareEntityToBeAddedAsync(user, entity, options) {\n            assert.equal(options.option1, true);\n            prepareEntityToBeAddedAsyncCount++;\n            return Promise.resolve();\n        },\n        entityAddedAsync(user, entity, options) {\n            assert.equal(options.option1, true);\n            entityAddedAsyncCount++;\n        },\n        validateEntityToBeAddedAsync(user, entity, options) {\n            assert.equal(options.option1, true);\n            validateEntityToBeAddedAsyncCount++;\n        }\n    };\n\n    return sqlite.open(path).then((sqliteDatabase) => {\n        let database = new Database({\n            edm: edm,\n            sqliteDatabase: sqliteDatabase\n        });\n\n        let metaDatabase = new MetaDatabase({\n            fileSystem: fileSystem,\n            database: database,\n            decorators: [decorator]\n        });\n\n\n        let table = metaDatabase.getTable(\"Source\");\n\n        return table.addEntityAsync(user, {\n            string: \"Hello World!\",\n            integer: 10\n        }).then(() => {\n            let table = metaDatabase.getTable(\"Foreign\");\n            return table.addEntityAsync(user, {\n                integer: 10\n            });\n        }).then(() => {\n            assert.equal(prepareEntityToBeAddedAsyncCount, 1);\n            assert.equal(entityAddedAsyncCount, 1);\n            assert.equal(validateEntityToBeAddedAsyncCount, 1);\n        });\n    });\n\n}\n\nexports[\"MetaDatabase: prepareEntityToBeUpdatedAsync, entityUpdatedAsync, validateEntityToBeUpdatedAsync.\"] = () => {\n    let prepareEntityToBeUpdatedAsyncCount = 0;\n    let entityUpdatedAsyncCount = 0;\n    let validateEntityToBeUpdatedAsyncCount = 0;\n    let fileSystem = new FileSystem();\n\n    let decorator = {\n        name: \"Test\",\n        prepareEntityToBeUpdatedAsync(user, entity, delta, options) {\n            assert.equal(options.option1, true);\n            prepareEntityToBeUpdatedAsyncCount++;\n            return Promise.resolve();\n        },\n        entityUpdatedAsync(user, entity, delta, options) {\n            assert.equal(options.option1, true);\n            entityUpdatedAsyncCount++;\n        },\n        validateEntityToBeUpdatedAsync(user, entity, delta, options) {\n            assert.equal(options.option1, true);\n            validateEntityToBeUpdatedAsyncCount++;\n        }\n    };\n\n    let metaDatabase = new MetaDatabase({\n        fileSystem: fileSystem,\n        sqlite: sqlite,\n        edm: edm,\n        databasePath: path,\n        decorators: [decorator]\n    });\n\n    let table = null;\n\n    return metaDatabase.initializeAsync().then(() => {\n        return metaDatabase.getTableAsync(\"Source\");\n    }).then((t) => {\n        table = t;\n        return table.addEntityAsync(user, {\n            string: \"Hello World!\",\n            integer: 10\n        });\n    }).then((entity) => {\n        return table.updateEntityAsync(entity, { string: \"Hello World 2\" });\n    }).then(() => {\n        assert.equal(prepareEntityToBeUpdatedAsyncCount, 1);\n        assert.equal(entityUpdatedAsyncCount, 1);\n        assert.equal(validateEntityToBeUpdatedAsyncCount, 1);\n    });\n\n}\n\nexports[\"MetaDatabase: prepareEntityToBeUpdatedAsync, entityUpdatedAsync, validateEntityToBeUpdatedAsync.\"] = () => {\n    let prepareEntityToBeUpdatedAsyncCount = 0;\n    let entityUpdatedAsyncCount = 0;\n    let validateEntityToBeUpdatedAsyncCount = 0;\n    let fileSystem = new FileSystem();\n\n    let decorator = {\n        name: \"Test\",\n        prepareEntityToBeUpdatedAsync(type, entity, delta, options) {\n            assert.equal(options.option1, true);\n            prepareEntityToBeUpdatedAsyncCount++;\n            return Promise.resolve();\n        },\n        entityUpdatedAsync(type, entity, delta, options) {\n            assert.equal(options.option1, true);\n            entityUpdatedAsyncCount++;\n        },\n        validateEntityToBeUpdatedAsync(type, entity, delta, options) {\n            assert.equal(options.option1, true);\n            validateEntityToBeUpdatedAsyncCount++;\n        }\n    };\n\n    let metaDatabase = new MetaDatabase({\n        fileSystem: fileSystem,\n        sqlite: sqlite,\n        edm: edm,\n        databasePath: path,\n        decorators: [decorator]\n    });\n\n    let table = null;\n\n    return metaDatabase.initializeAsync().then(() => {\n        return metaDatabase.getTableAsync(\"Source\");\n    }).then((t) => {\n        table = t;\n        return table.addEntityAsync(user, {\n            string: \"Hello World!\",\n            integer: 10\n        });\n    }).then((entity) => {\n        return table.updateEntityAsync(user, entity, { string: \"Hello World 2\" });\n    }).then(() => {\n        assert.equal(prepareEntityToBeUpdatedAsyncCount, 1);\n        assert.equal(entityUpdatedAsyncCount, 1);\n        assert.equal(validateEntityToBeUpdatedAsyncCount, 1);\n    });\n\n}\n\nexports[\"MetaDatabase: approveEntityToBeRemovedAsync, entityRemovedAsync.\"] = () => {\n    let approveEntityToBeRemovedAsyncCount = 0;\n    let entityRemovedAsyncCount = 0;\n    let fileSystem = new FileSystem();\n\n    let decorator = {\n        name: \"Test\",\n        approveEntityToBeRemovedAsync(user, entity, options) {\n            assert.equal(options.option1, true);\n            approveEntityToBeRemovedAsyncCount++;\n            return Promise.resolve();\n        },\n        entityRemovedAsync(user, entity, options) {\n            assert.equal(options.option1, true);\n            entityRemovedAsyncCount++;\n        }\n    };\n\n    let metaDatabase = new MetaDatabase({\n        fileSystem: fileSystem,\n        sqlite: sqlite,\n        edm: edm,\n        databasePath: path,\n        decorators: [decorator]\n    });\n\n    let table = null;\n\n    return metaDatabase.initializeAsync().then(() => {\n        return metaDatabase.getTableAsync(\"Source\");\n    }).then((t) => {\n        table = t;\n        return table.addEntityAsync(user, {\n            string: \"Hello World!\",\n            integer: 10\n        });\n    }).then((entity) => {\n        return table.removeEntityAsync(user, entity);\n    }).then(() => {\n        assert.equal(approveEntityToBeRemovedAsyncCount, 1);\n        assert.equal(entityRemovedAsyncCount, 1);\n    });\n\n}\n\nexports[\"MetaDatabase: activatedAsync.\"] = () => {\n    let activatedAsyncCount = 0;\n    let fileSystem = new FileSystem();\n\n    let decorator = {\n        name: \"Test\",\n        activatedAsync(metaDatabase) {\n            assert.equal(metaDatabase != null, true);\n            activatedAsyncCount++;\n        }\n    };\n\n    let metaDatabase = new MetaDatabase({\n        fileSystem: fileSystem,\n        sqlite: sqlite,\n        edm: edm,\n        databasePath: path,\n        decorators: [decorator]\n    });\n\n    let table = null;\n\n    return metaDatabase.initializeAsync().then(() => {\n        return metaDatabase.getTableAsync(\"Source\");\n    }).then(() => {\n        assert.equal(activatedAsyncCount, 1);\n    });\n\n};\n\nexports[\"MetaDatabase: file life cycle.\"] = () => {\n    let fileSystem = new FileSystem();\n    let fileUpdatedAsyncCount = 0;\n    let fileRemovedAsyncCount = 0;\n    let fileContent = \"This is a file.\";\n    let table;\n    let id;\n\n    let decorator = {\n        name: \"Test\",\n        fileUpdatedAsync(id, filePath) {\n            fileUpdatedAsyncCount++;\n        },\n        fileRemovedAsync(id, filePath) {\n            fileRemovedAsyncCount++;\n        }\n    };\n\n    let metaDatabase = new MetaDatabase({\n        fileSystem: fileSystem,\n        sqlite: sqlite,\n        edm: edm,\n        databasePath: path,\n        decorators: [decorator]\n    });\n\n    return metaDatabase.initializeAsync().then(() => {\n        return metaDatabase.getTableAsync(\"Source\");\n    }).then((t) => {\n        table = t;\n        return table.addEntityAsync(user, {\n            string: \"Hello World!\"\n        });\n    }).then((entity) => {\n        id = entity.id;\n        return table.getFileWriteStreamByIdAsync(user, id);\n    }).then((stream) => {\n        stream.write(fileContent);\n        stream.end();\n    }).then(() => {\n        return table.getFileReadStreamByIdAsync(user, id);\n    }).then((stream) => {\n        return new Promise((resolve, reject) => {\n            let data = \"\";\n\n            stream.on(\"data\", (d) => {\n                data += d;\n            });\n            stream.on(\"end\", () => {\n                resolve(data);\n            });\n        });\n    }).then((data) => {\n        assert.equal(fileUpdatedAsyncCount, 1);\n        assert.equal(data, fileContent);\n    }).then(() => {\n        return table.removeFileByIdAsync(user, id);\n    }).then(() => {\n        assert.equal(fileRemovedAsyncCount, 1);\n    });\n};\n\nexports[\"MetaDatabase: refineQueryableAsync.\"] = () => {\n    let fileSystem = new FileSystem();\n    let decorator = {\n        name: \"Test\",\n        refineQueryableAsync(user, queryable, options) {\n            if (user.isAdmin) {\n                return queryable;\n            } else {\n                return queryable.where((expBuilder) => {\n                    return expBuilder.property(\"number\").isEqualTo(2);\n                });\n            }\n        }\n    };\n\n    let metaDatabase = new MetaDatabase({\n        fileSystem: fileSystem,\n        sqlite: sqlite,\n        edm: edm,\n        databasePath: path,\n        decorators: [decorator]\n    });\n\n    let table = null;\n\n    return metaDatabase.initializeAsync().then(() => {\n        return metaDatabase.getTableAsync(\"Source\");\n    }).then((t) => {\n        table = t;\n\n        return table.addEntityAsync(user, {\n            string: \"Hello World!\",\n            integer: 10\n        });\n    }).then(() => {\n        return table.asQueryable(user).where((expBuilder) => {\n            return expBuilder.property(\"string\").isEqualTo(\"Hello World!\");\n        }).toArrayAsync();\n    }).then((results) => {\n        assert.equal(results.length, 0);\n    }).then(() => {\n        return table.asQueryable(admin).where((expBuilder) => {\n            return expBuilder.property(\"string\").isEqualTo(\"Hello World!\");\n        }).toArrayAsync();\n    }).then((results) => {\n        assert.equal(results.length, 1);\n    });\n\n}"]}