{"version":3,"sources":["../../src/tests/Queryable.js"],"names":["assert","exports","queryable","ok","where","expBuilder","property","isEqualTo","query","getQuery","equal","children","nodeName","value","expressionBuilder","expression","throws","orderBy","length","include","take","skip","or","and","orderByDesc","testParameters","test1","test2","setParameters","deepEqual","parameters","withParameters","queryable1","queryable2","merge","provider","execute","Promise","resolve","toArrayAsync","then","guidExpression","toGuid","forEach","count","toArrayWithCount","all","any","firstOrDefault","lastOrDefault","first","last","select","contains"],"mappings":"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","file":"Queryable.js","sourcesContent":["import * as assert from \"assert\";\r\nimport Queryable from \"./../query/Queryable\";\r\nimport { ExpressionBuilder } from \"../query/ExpressionBuilder\";\r\n\r\nexports[\"Queryable: Constructor.\"] = function() {\r\n    const queryable = new Queryable();\r\n    assert.ok(true);\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (where: single)\"] = function() {\r\n    let queryable = new Queryable();\r\n    queryable = queryable.where(expBuilder => {\r\n        return expBuilder.property(\"firstName\").isEqualTo(\"Jared\");\r\n    });\r\n\r\n    const query = queryable.getQuery();\r\n\r\n    assert.equal(\"equalTo\", query.where.children[0].nodeName);\r\n    assert.equal(\"firstName\", query.where.children[0].children[0].children[1].value);\r\n    assert.equal(\"Jared\", query.where.children[0].children[1].value);\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (where: chain)\"] = function() {\r\n    let queryable = new Queryable();\r\n    queryable = queryable\r\n        .where(expBuilder => {\r\n            return expBuilder.property(\"firstName\").isEqualTo(\"Jared\");\r\n        })\r\n        .where(expBuilder => {\r\n            return expBuilder.property(\"lastName\").isEqualTo(\"Barnes\");\r\n        });\r\n\r\n    const query = queryable.getQuery();\r\n\r\n    assert.equal(\"and\", query.where.children[0].nodeName);\r\n    assert.equal(\"equalTo\", query.where.children[0].children[0].nodeName);\r\n    assert.equal(\"firstName\", query.where.children[0].children[0].children[0].children[1].value);\r\n    assert.equal(\"Jared\", query.where.children[0].children[0].children[1].value);\r\n    assert.equal(\"equalTo\", query.where.children[0].children[1].nodeName);\r\n    assert.equal(\"lastName\", query.where.children[0].children[1].children[0].children[1].value);\r\n    assert.equal(\"Barnes\", query.where.children[0].children[1].children[1].value);\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (where: with ExpressionBuilder instance.)\"] = function() {\r\n    const expressionBuilder = new ExpressionBuilder();\r\n    const expression = expressionBuilder.property(\"firstName\").isEqualTo(\"Jared\");\r\n    let queryable = new Queryable();\r\n    queryable = queryable.where(expression);\r\n\r\n    const query = queryable.getQuery();\r\n\r\n    assert.equal(\"equalTo\", query.where.children[0].nodeName);\r\n    assert.equal(\"firstName\", query.where.children[0].children[0].children[1].value);\r\n    assert.equal(\"Jared\", query.where.children[0].children[1].value);\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (where: w/o lambda or ExpressionBuilder instance)\"] = function() {\r\n    let queryable = new Queryable();\r\n\r\n    assert.throws(() => {\r\n        queryable = queryable.where();\r\n    });\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (orderBy: single)\"] = function() {\r\n    let queryable = new Queryable();\r\n    queryable = queryable.orderBy(expBuilder => {\r\n        return expBuilder.property(\"firstName\");\r\n    });\r\n\r\n    const query = queryable.getQuery();\r\n\r\n    assert.equal(\"ascending\", query.orderBy.children[0].nodeName);\r\n    assert.equal(\"firstName\", query.orderBy.children[0].children[0].children[1].value);\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (orderBy: chain)\"] = function() {\r\n    let queryable = new Queryable();\r\n    queryable = queryable\r\n        .orderBy(expBuilder => {\r\n            return expBuilder.property(\"firstName\");\r\n        })\r\n        .orderBy(expBuilder => {\r\n            return expBuilder.property(\"lastName\");\r\n        });\r\n\r\n    const query = queryable.getQuery();\r\n\r\n    assert.equal(\"ascending\", query.orderBy.children[0].nodeName);\r\n    assert.equal(\"firstName\", query.orderBy.children[0].children[0].children[1].value);\r\n    assert.equal(\"ascending\", query.orderBy.children[1].nodeName);\r\n    assert.equal(\"lastName\", query.orderBy.children[1].children[0].children[1].value);\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (orderBy: with ExpressionBuilder instance.)\"] = function() {\r\n    const expressionBuilder = new ExpressionBuilder();\r\n    const expression = expressionBuilder.property(\"firstName\");\r\n    let queryable = new Queryable();\r\n    queryable = queryable.orderBy(expression);\r\n\r\n    const query = queryable.getQuery();\r\n\r\n    assert.equal(\"ascending\", query.orderBy.children[0].nodeName);\r\n    assert.equal(\"firstName\", query.orderBy.children[0].children[0].children[1].value);\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (orderBy: with the same expression called twice.)\"] = function() {\r\n    let queryable = new Queryable();\r\n    queryable = queryable\r\n        .orderBy(expBuilder => {\r\n            return expBuilder.property(\"firstName\");\r\n        })\r\n        .orderBy(expBuilder => {\r\n            return expBuilder.property(\"firstName\");\r\n        });\r\n\r\n    const query = queryable.getQuery();\r\n\r\n    assert.equal(1, query.orderBy.children.length);\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (orderBy: w/o lambda or ExpressionBuilder instance)\"] = function() {\r\n    let queryable = new Queryable();\r\n\r\n    assert.throws(() => {\r\n        queryable = queryable.orderBy();\r\n    });\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (include: single)\"] = function() {\r\n    let queryable = new Queryable();\r\n    queryable = queryable.include(expBuilder => {\r\n        return expBuilder.property(\"firstName\");\r\n    });\r\n\r\n    const query = queryable.getQuery();\r\n\r\n    assert.equal(\"queryable\", query.include.children[0].nodeName);\r\n    assert.equal(\"firstName\", query.include.children[0].children[0].children[1].value);\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (include: chain)\"] = function() {\r\n    let queryable = new Queryable();\r\n    queryable = queryable\r\n        .include(expBuilder => {\r\n            return expBuilder.property(\"firstName\");\r\n        })\r\n        .include(expBuilder => {\r\n            return expBuilder.property(\"lastName\");\r\n        });\r\n\r\n    const query = queryable.getQuery();\r\n\r\n    assert.equal(\"queryable\", query.include.children[0].nodeName);\r\n    assert.equal(\"firstName\", query.include.children[0].children[0].children[1].value);\r\n    assert.equal(\"queryable\", query.include.children[1].nodeName);\r\n    assert.equal(\"lastName\", query.include.children[1].children[0].children[1].value);\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (include: with ExpressionBuilder instance.)\"] = function() {\r\n    const expressionBuilder = new ExpressionBuilder();\r\n    const expression = expressionBuilder.property(\"firstName\");\r\n    let queryable = new Queryable();\r\n    queryable = queryable.include(expression);\r\n\r\n    const query = queryable.getQuery();\r\n\r\n    assert.equal(\"queryable\", query.include.children[0].nodeName);\r\n    assert.equal(\"firstName\", query.include.children[0].children[0].children[1].value);\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (include: w/o lambda or ExpressionBuilder instance)\"] = function() {\r\n    let queryable = new Queryable();\r\n\r\n    assert.throws(() => {\r\n        queryable = queryable.include();\r\n    });\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (take: value === number)\"] = function() {\r\n    let queryable = new Queryable();\r\n    queryable = queryable.take(10);\r\n\r\n    const query = queryable.getQuery();\r\n\r\n    assert.equal(10, query.take.children[0].value);\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (take: value !== number)\"] = function() {\r\n    let queryable = new Queryable();\r\n    assert.throws(() => {\r\n        queryable = queryable.take();\r\n    });\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (skip: value === number)\"] = function() {\r\n    let queryable = new Queryable();\r\n    queryable = queryable.skip(10);\r\n\r\n    const query = queryable.getQuery();\r\n\r\n    assert.equal(10, query.skip.children[0].value);\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (skip: value !== number)\"] = function() {\r\n    let queryable = new Queryable();\r\n    assert.throws(() => {\r\n        queryable = queryable.skip();\r\n    });\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (or: single)\"] = function() {\r\n    let queryable = new Queryable();\r\n    queryable = queryable.or(expBuilder => {\r\n        return expBuilder.property(\"firstName\").isEqualTo(\"Jared\");\r\n    });\r\n\r\n    const query = queryable.getQuery();\r\n\r\n    assert.equal(\"equalTo\", query.where.children[0].nodeName);\r\n    assert.equal(\"firstName\", query.where.children[0].children[0].children[1].value);\r\n    assert.equal(\"Jared\", query.where.children[0].children[1].value);\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (or: chain)\"] = function() {\r\n    let queryable = new Queryable();\r\n    queryable = queryable\r\n        .or(expBuilder => {\r\n            return expBuilder.property(\"firstName\").isEqualTo(\"Jared\");\r\n        })\r\n        .or(expBuilder => {\r\n            return expBuilder.property(\"lastName\").isEqualTo(\"Barnes\");\r\n        });\r\n\r\n    const query = queryable.getQuery();\r\n\r\n    assert.equal(\"or\", query.where.children[0].nodeName);\r\n    assert.equal(\"equalTo\", query.where.children[0].children[0].nodeName);\r\n    assert.equal(\"firstName\", query.where.children[0].children[0].children[0].children[1].value);\r\n    assert.equal(\"Jared\", query.where.children[0].children[0].children[1].value);\r\n    assert.equal(\"equalTo\", query.where.children[0].children[1].nodeName);\r\n    assert.equal(\"lastName\", query.where.children[0].children[1].children[0].children[1].value);\r\n    assert.equal(\"Barnes\", query.where.children[0].children[1].children[1].value);\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (or: with ExpressionBuilder instance.)\"] = function() {\r\n    const expressionBuilder = new ExpressionBuilder();\r\n    const expression = expressionBuilder.property(\"firstName\").isEqualTo(\"Jared\");\r\n    let queryable = new Queryable();\r\n    queryable = queryable.or(expression);\r\n\r\n    const query = queryable.getQuery();\r\n\r\n    assert.equal(\"equalTo\", query.where.children[0].nodeName);\r\n    assert.equal(\"firstName\", query.where.children[0].children[0].children[1].value);\r\n    assert.equal(\"Jared\", query.where.children[0].children[1].value);\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (or: w/o lambda or ExpressionBuilder instance)\"] = function() {\r\n    let queryable = new Queryable();\r\n\r\n    assert.throws(() => {\r\n        queryable = queryable.or();\r\n    });\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (and: single)\"] = function() {\r\n    let queryable = new Queryable();\r\n    queryable = queryable.and(expBuilder => {\r\n        return expBuilder.property(\"firstName\").isEqualTo(\"Jared\");\r\n    });\r\n\r\n    const query = queryable.getQuery();\r\n\r\n    assert.equal(\"equalTo\", query.where.children[0].nodeName);\r\n    assert.equal(\"firstName\", query.where.children[0].children[0].children[1].value);\r\n    assert.equal(\"Jared\", query.where.children[0].children[1].value);\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (orderByDesc: single)\"] = function() {\r\n    let queryable = new Queryable();\r\n    queryable = queryable.orderByDesc(expBuilder => {\r\n        return expBuilder.property(\"firstName\");\r\n    });\r\n\r\n    const query = queryable.getQuery();\r\n\r\n    assert.equal(\"descending\", query.orderBy.children[0].nodeName);\r\n    assert.equal(\"firstName\", query.orderBy.children[0].children[0].children[1].value);\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (orderByDesc: chain)\"] = function() {\r\n    let queryable = new Queryable();\r\n    queryable = queryable\r\n        .orderByDesc(expBuilder => {\r\n            return expBuilder.property(\"firstName\");\r\n        })\r\n        .orderByDesc(expBuilder => {\r\n            return expBuilder.property(\"lastName\");\r\n        });\r\n\r\n    const query = queryable.getQuery();\r\n\r\n    assert.equal(\"descending\", query.orderBy.children[0].nodeName);\r\n    assert.equal(\"firstName\", query.orderBy.children[0].children[0].children[1].value);\r\n    assert.equal(\"descending\", query.orderBy.children[1].nodeName);\r\n    assert.equal(\"lastName\", query.orderBy.children[1].children[0].children[1].value);\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (orderByDesc: with ExpressionBuilder instance.)\"] = function() {\r\n    const expressionBuilder = new ExpressionBuilder();\r\n    const expression = expressionBuilder.property(\"firstName\");\r\n    let queryable = new Queryable();\r\n    queryable = queryable.orderByDesc(expression);\r\n\r\n    const query = queryable.getQuery();\r\n\r\n    assert.equal(\"descending\", query.orderBy.children[0].nodeName);\r\n    assert.equal(\"firstName\", query.orderBy.children[0].children[0].children[1].value);\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (orderByDesc: with the same expression called twice.)\"] = function() {\r\n    let queryable = new Queryable();\r\n    queryable = queryable\r\n        .orderByDesc(expBuilder => {\r\n            return expBuilder.property(\"firstName\");\r\n        })\r\n        .orderByDesc(expBuilder => {\r\n            return expBuilder.property(\"firstName\");\r\n        });\r\n\r\n    const query = queryable.getQuery();\r\n\r\n    assert.equal(1, query.orderBy.children.length);\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (orderByDesc: w/o lambda or ExpressionBuilder instance)\"] = function() {\r\n    let queryable = new Queryable();\r\n\r\n    assert.throws(() => {\r\n        queryable = queryable.orderByDesc();\r\n    });\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (setParameters: obj passed in)\"] = function() {\r\n    let queryable = new Queryable();\r\n    const testParameters = { test1: 1, test2: 2 };\r\n    queryable = queryable.setParameters(testParameters);\r\n\r\n    const query = queryable.getQuery();\r\n\r\n    assert.deepEqual(testParameters, query.parameters);\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (setParameters: w/o parameters passed in)\"] = function() {\r\n    let queryable = new Queryable();\r\n\r\n    assert.throws(() => {\r\n        queryable = queryable.setParameters();\r\n    });\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (withParameters: obj passed in)\"] = function() {\r\n    let queryable = new Queryable();\r\n    const testParameters = { test1: 1, test2: 2 };\r\n    queryable = queryable.withParameters(testParameters);\r\n\r\n    const query = queryable.getQuery();\r\n\r\n    assert.deepEqual(testParameters, query.parameters);\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (withParameters: w/o parameters passed in)\"] = function() {\r\n    let queryable = new Queryable();\r\n\r\n    assert.throws(() => {\r\n        queryable = queryable.withParameters();\r\n    });\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (merge: merging queryable is empty)\"] = function() {\r\n    let queryable1 = new Queryable();\r\n    let queryable2 = new Queryable();\r\n    queryable2 = queryable2.merge(queryable1);\r\n\r\n    const query = queryable2.getQuery();\r\n\r\n    assert.equal(0, query.where.children.length);\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (merge: queryable merging doesn't have anything to copy)\"] = function() {\r\n    let queryable1 = new Queryable();\r\n    let queryable2 = new Queryable();\r\n\r\n    queryable1 = queryable1.where(expBuilder => {\r\n        return expBuilder.property(\"firstName\").isEqualTo(\"Jared\");\r\n    });\r\n    queryable2 = queryable2.merge(queryable1);\r\n\r\n    const query = queryable2.getQuery();\r\n\r\n    assert.equal(\"equalTo\", query.where.children[0].nodeName);\r\n    assert.equal(\"firstName\", query.where.children[0].children[0].children[1].value);\r\n    assert.equal(\"Jared\", query.where.children[0].children[1].value);\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (merge: queryable merging has a single where expression)\"] = function() {\r\n    let queryable1 = new Queryable();\r\n    let queryable2 = new Queryable();\r\n\r\n    queryable1 = queryable1.where(expBuilder => {\r\n        return expBuilder.property(\"firstName\").isEqualTo(\"Jared\");\r\n    });\r\n    queryable2 = queryable2\r\n        .where(expBuilder => {\r\n            return expBuilder.property(\"lastName\").isEqualTo(\"Barnes\");\r\n        })\r\n        .merge(queryable1);\r\n\r\n    const query = queryable2.getQuery();\r\n\r\n    assert.equal(\"and\", query.where.children[0].nodeName);\r\n    assert.equal(\"Barnes\", query.where.children[0].children[0].children[1].value);\r\n    assert.equal(\"Jared\", query.where.children[0].children[1].children[1].value);\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (merge: queryable merging has a chained where expression)\"] = function() {\r\n    let queryable1 = new Queryable();\r\n    let queryable2 = new Queryable();\r\n\r\n    queryable1 = queryable1.where(expBuilder => {\r\n        return expBuilder.property(\"firstName\").isEqualTo(\"Jared\");\r\n    });\r\n    queryable2 = queryable2\r\n        .where(expBuilder => {\r\n            return expBuilder.property(\"lastName\").isEqualTo(\"Barnes\");\r\n        })\r\n        .where(expBuilder => {\r\n            return expBuilder.property(\"age\").isEqualTo(35);\r\n        })\r\n        .merge(queryable1);\r\n\r\n    const query = queryable2.getQuery();\r\n\r\n    assert.equal(\"and\", query.where.children[0].nodeName);\r\n    assert.equal(\"Barnes\", query.where.children[0].children[0].children[1].value);\r\n    assert.equal(35, query.where.children[0].children[1].children[1].value);\r\n    assert.equal(\"Jared\", query.where.children[0].children[2].children[1].value);\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (merge: merging queryable has an include expression)\"] = function() {\r\n    let queryable1 = new Queryable();\r\n    let queryable2 = new Queryable();\r\n\r\n    queryable1 = queryable1.include(expBuilder => {\r\n        return expBuilder.property(\"firstName\");\r\n    });\r\n    queryable2 = queryable2.merge(queryable1);\r\n\r\n    const query = queryable2.getQuery();\r\n\r\n    assert.equal(\"firstName\", query.include.children[0].children[0].children[1].value);\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (merge: merging queryable has an orderBy expression)\"] = function() {\r\n    let queryable1 = new Queryable();\r\n    let queryable2 = new Queryable();\r\n\r\n    queryable1 = queryable1.orderBy(expBuilder => {\r\n        return expBuilder.property(\"firstName\");\r\n    });\r\n    queryable2 = queryable2.merge(queryable1);\r\n\r\n    const query = queryable2.getQuery();\r\n\r\n    assert.equal(\"firstName\", query.orderBy.children[0].children[0].children[1].value);\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (merge: merging queryable has the same orderBy expression as queryable merging)\"] = function() {\r\n    let queryable1 = new Queryable();\r\n    let queryable2 = new Queryable();\r\n\r\n    queryable1 = queryable1.orderBy(expBuilder => {\r\n        return expBuilder.property(\"firstName\");\r\n    });\r\n    queryable2 = queryable2\r\n        .orderBy(expBuilder => {\r\n            return expBuilder.property(\"firstName\");\r\n        })\r\n        .merge(queryable1);\r\n\r\n    const query = queryable2.getQuery();\r\n\r\n    assert.equal(1, query.orderBy.children.length);\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (merge: w/o a queryable passed in)\"] = function() {\r\n    let queryable = new Queryable();\r\n\r\n    assert.throws(() => {\r\n        queryable = queryable.merge();\r\n    });\r\n};\r\n\r\nexports[\"Queryable: Constructor with toArrayAsync called.\"] = function() {\r\n    let queryable = new Queryable();\r\n    queryable.provider = { execute: () => Promise.resolve() };\r\n\r\n    queryable.toArrayAsync().then(() => {\r\n        assert.ok(true);\r\n    });\r\n};\r\n\r\nexports[\"Queryable: Constructor method called w/o provider.\"] = function() {\r\n    let queryable = new Queryable();\r\n\r\n    assert.throws(() => {\r\n        queryable.toArrayAsync();\r\n    });\r\n};\r\n\r\nexports[\"Queryable: Constructor with toGuid called.\"] = function() {\r\n    let queryable = new Queryable();\r\n    queryable.provider = { execute: () => Promise.resolve() };\r\n\r\n    const guidExpression = queryable.toGuid(12345);\r\n\r\n    assert.equal(12345, guidExpression.children[0].value);\r\n};\r\n\r\nexports[\"Queryable: Constructor with forEach called.\"] = function() {\r\n    let queryable = new Queryable();\r\n    queryable.provider = { execute: () => Promise.resolve([]) };\r\n\r\n    queryable.forEach(() => {}).then(() => {\r\n        assert.ok(true);\r\n    });\r\n};\r\n\r\nexports[\"Queryable: Constructor with count called.\"] = function() {\r\n    let queryable = new Queryable();\r\n    queryable.provider = { count: queryable => 1 };\r\n\r\n    const count = queryable.count();\r\n    assert.equal(1, count);\r\n};\r\n\r\nexports[\"Queryable: Constructor with toArrayWithCount called.\"] = function() {\r\n    let queryable = new Queryable();\r\n    queryable.provider = { toArrayWithCount: queryable => 1 };\r\n\r\n    const count = queryable.toArrayWithCount();\r\n    assert.equal(1, count);\r\n};\r\n\r\nexports[\"Queryable: Constructor with all called.\"] = function() {\r\n    let queryable = new Queryable();\r\n    queryable.provider = { all: lambda => true };\r\n\r\n    const all = queryable.all();\r\n    assert.ok(all);\r\n};\r\n\r\nexports[\"Queryable: Constructor with any called.\"] = function() {\r\n    let queryable = new Queryable();\r\n    queryable.provider = { any: lambda => true };\r\n\r\n    const any = queryable.any();\r\n    assert.ok(any);\r\n};\r\n\r\nexports[\"Queryable: Constructor with firstOrDefault called.\"] = function() {\r\n    let queryable = new Queryable();\r\n    queryable.provider = { firstOrDefault: lambda => true };\r\n\r\n    const firstOrDefault = queryable.firstOrDefault();\r\n    assert.ok(firstOrDefault);\r\n};\r\n\r\nexports[\"Queryable: Constructor with lastOrDefault called.\"] = function() {\r\n    let queryable = new Queryable();\r\n    queryable.provider = { lastOrDefault: lambda => true };\r\n\r\n    const lastOrDefault = queryable.lastOrDefault();\r\n    assert.ok(lastOrDefault);\r\n};\r\n\r\nexports[\"Queryable: Constructor with first called.\"] = function() {\r\n    let queryable = new Queryable();\r\n    queryable.provider = { first: lambda => true };\r\n\r\n    const first = queryable.first();\r\n    assert.ok(first);\r\n};\r\n\r\nexports[\"Queryable: Constructor with last called.\"] = function() {\r\n    let queryable = new Queryable();\r\n    queryable.provider = { last: lambda => true };\r\n\r\n    const last = queryable.last();\r\n    assert.ok(last);\r\n};\r\n\r\nexports[\"Queryable: Constructor with select called.\"] = function() {\r\n    let queryable = new Queryable();\r\n    queryable.provider = { select: lambda => true };\r\n\r\n    const select = queryable.select();\r\n    assert.ok(select);\r\n};\r\n\r\nexports[\"Queryable: Constructor with contains called.\"] = function() {\r\n    let queryable = new Queryable();\r\n    queryable.provider = { contains: lambda => true };\r\n\r\n    const contains = queryable.contains();\r\n    assert.ok(contains);\r\n};\r\n"]}