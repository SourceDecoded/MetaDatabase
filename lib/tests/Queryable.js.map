{"version":3,"sources":["../../src/tests/Queryable.js"],"names":["assert","exports","queryable","ok","where","expBuilder","property","isEqualTo","query","getQuery","equal","children","nodeName","value","expressionBuilder","expression","throws","orderBy","length","include","take","skip"],"mappings":"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","file":"Queryable.js","sourcesContent":["import * as assert from \"assert\";\r\nimport Queryable from \"./../query/Queryable\";\r\nimport { ExpressionBuilder } from \"../query/ExpressionBuilder\";\r\n\r\nexports[\"Queryable: Constructor.\"] = function() {\r\n    const queryable = new Queryable();\r\n    assert.ok(true);\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (where: single)\"] = function() {\r\n    let queryable = new Queryable();\r\n    queryable = queryable.where(expBuilder => {\r\n        return expBuilder.property(\"firstName\").isEqualTo(\"Jared\");\r\n    });\r\n\r\n    const query = queryable.getQuery();\r\n\r\n    assert.equal(\"equalTo\", query.where.children[0].nodeName);\r\n    assert.equal(\"firstName\", query.where.children[0].children[0].children[1].value);\r\n    assert.equal(\"Jared\", query.where.children[0].children[1].value);\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (where: chain)\"] = function() {\r\n    let queryable = new Queryable();\r\n    queryable = queryable\r\n        .where(expBuilder => {\r\n            return expBuilder.property(\"firstName\").isEqualTo(\"Jared\");\r\n        })\r\n        .where(expBuilder => {\r\n            return expBuilder.property(\"lastName\").isEqualTo(\"Barnes\");\r\n        });\r\n\r\n    const query = queryable.getQuery();\r\n\r\n    assert.equal(\"and\", query.where.children[0].nodeName);\r\n    assert.equal(\"equalTo\", query.where.children[0].children[0].nodeName);\r\n    assert.equal(\"firstName\", query.where.children[0].children[0].children[0].children[1].value);\r\n    assert.equal(\"Jared\", query.where.children[0].children[0].children[1].value);\r\n    assert.equal(\"equalTo\", query.where.children[0].children[1].nodeName);\r\n    assert.equal(\"lastName\", query.where.children[0].children[1].children[0].children[1].value);\r\n    assert.equal(\"Barnes\", query.where.children[0].children[1].children[1].value);\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (where: with ExpressionBuilder instance.)\"] = function() {\r\n    const expressionBuilder = new ExpressionBuilder();\r\n    const expression = expressionBuilder.property(\"firstName\").isEqualTo(\"Jared\");\r\n    let queryable = new Queryable();\r\n    queryable = queryable.where(expression);\r\n\r\n    const query = queryable.getQuery();\r\n\r\n    assert.equal(\"equalTo\", query.where.children[0].nodeName);\r\n    assert.equal(\"firstName\", query.where.children[0].children[0].children[1].value);\r\n    assert.equal(\"Jared\", query.where.children[0].children[1].value);\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (where: w/o lambda or ExpressionBuilder instance)\"] = function() {\r\n    let queryable = new Queryable();\r\n\r\n    assert.throws(() => {\r\n        queryable = queryable.where();\r\n    });\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (orderBy: single)\"] = function() {\r\n    let queryable = new Queryable();\r\n    queryable = queryable.orderBy(expBuilder => {\r\n        return expBuilder.property(\"firstName\");\r\n    });\r\n\r\n    const query = queryable.getQuery();\r\n\r\n    assert.equal(\"ascending\", query.orderBy.children[0].nodeName);\r\n    assert.equal(\"firstName\", query.orderBy.children[0].children[0].children[1].value);\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (orderBy: chain)\"] = function() {\r\n    let queryable = new Queryable();\r\n    queryable = queryable\r\n        .orderBy(expBuilder => {\r\n            return expBuilder.property(\"firstName\");\r\n        })\r\n        .orderBy(expBuilder => {\r\n            return expBuilder.property(\"lastName\");\r\n        });\r\n\r\n    const query = queryable.getQuery();\r\n\r\n    assert.equal(\"ascending\", query.orderBy.children[0].nodeName);\r\n    assert.equal(\"firstName\", query.orderBy.children[0].children[0].children[1].value);\r\n    assert.equal(\"ascending\", query.orderBy.children[1].nodeName);\r\n    assert.equal(\"lastName\", query.orderBy.children[1].children[0].children[1].value);\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (orderBy: with ExpressionBuilder instance.)\"] = function() {\r\n    const expressionBuilder = new ExpressionBuilder();\r\n    const expression = expressionBuilder.property(\"firstName\");\r\n    let queryable = new Queryable();\r\n    queryable = queryable.orderBy(expression);\r\n\r\n    const query = queryable.getQuery();\r\n\r\n    assert.equal(\"ascending\", query.orderBy.children[0].nodeName);\r\n    assert.equal(\"firstName\", query.orderBy.children[0].children[0].children[1].value);\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (orderBy: with the same expression called twice.)\"] = function() {\r\n    let queryable = new Queryable();\r\n    queryable = queryable\r\n        .orderBy(expBuilder => {\r\n            return expBuilder.property(\"firstName\");\r\n        })\r\n        .orderBy(expBuilder => {\r\n            return expBuilder.property(\"firstName\");\r\n        });\r\n\r\n    const query = queryable.getQuery();\r\n\r\n    assert.equal(1, query.orderBy.children.length);\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (orderBy: w/o lambda or ExpressionBuilder instance)\"] = function() {\r\n    let queryable = new Queryable();\r\n\r\n    assert.throws(() => {\r\n        queryable = queryable.orderBy();\r\n    });\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (include: single)\"] = function() {\r\n    let queryable = new Queryable();\r\n    queryable = queryable.include(expBuilder => {\r\n        return expBuilder.property(\"firstName\");\r\n    });\r\n\r\n    const query = queryable.getQuery();\r\n\r\n    assert.equal(\"queryable\", query.include.children[0].nodeName);\r\n    assert.equal(\"firstName\", query.include.children[0].children[0].children[1].value);\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (include: chain)\"] = function() {\r\n    let queryable = new Queryable();\r\n    queryable = queryable\r\n        .include(expBuilder => {\r\n            return expBuilder.property(\"firstName\");\r\n        })\r\n        .include(expBuilder => {\r\n            return expBuilder.property(\"lastName\");\r\n        });\r\n\r\n    const query = queryable.getQuery();\r\n\r\n    assert.equal(\"queryable\", query.include.children[0].nodeName);\r\n    assert.equal(\"firstName\", query.include.children[0].children[0].children[1].value);\r\n    assert.equal(\"queryable\", query.include.children[1].nodeName);\r\n    assert.equal(\"lastName\", query.include.children[1].children[0].children[1].value);\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (include: with ExpressionBuilder instance.)\"] = function() {\r\n    const expressionBuilder = new ExpressionBuilder();\r\n    const expression = expressionBuilder.property(\"firstName\");\r\n    let queryable = new Queryable();\r\n    queryable = queryable.include(expression);\r\n\r\n    const query = queryable.getQuery();\r\n\r\n    assert.equal(\"queryable\", query.include.children[0].nodeName);\r\n    assert.equal(\"firstName\", query.include.children[0].children[0].children[1].value);\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (include: w/o lambda or ExpressionBuilder instance)\"] = function() {\r\n    let queryable = new Queryable();\r\n\r\n    assert.throws(() => {\r\n        queryable = queryable.include();\r\n    });\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (take: value === number)\"] = function() {\r\n    let queryable = new Queryable();\r\n    queryable = queryable.take(10);\r\n\r\n    const query = queryable.getQuery();\r\n\r\n    assert.equal(10, query.take.children[0].value);\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (take: value !== number)\"] = function() {\r\n    let queryable = new Queryable();\r\n    assert.throws(() => {\r\n        queryable = queryable.take();\r\n    });\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (skip: value === number)\"] = function() {\r\n    let queryable = new Queryable();\r\n    queryable = queryable.skip(10);\r\n\r\n    const query = queryable.getQuery();\r\n\r\n    assert.equal(10, query.skip.children[0].value);\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (skip: value !== number)\"] = function() {\r\n    let queryable = new Queryable();\r\n    assert.throws(() => {\r\n        queryable = queryable.skip();\r\n    });\r\n};\r\n"]}