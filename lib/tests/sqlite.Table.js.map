{"version":3,"sources":["../../src/tests/sqlite.Table.js"],"names":["databaseFile","exports","table","edm","sqliteDatabase","run","statement","values","equal","Promise","resolve","stmt","lastID","addEntityAsync","string","exec","createAsync","open","then","db","asQueryable","where","expBuilder","property","isEqualTo","toArrayAsync"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,eAAe,UAArB;;AAEAC,QAAQ,uBAAR,IAAmC,YAAM;AACrC,QAAIC,QAAQ,oBAAU,QAAV,EAAoB;AAC5BC,0BAD4B;AAE5BC,wBAAgB;AACZC,iBAAK,aAACC,SAAD,EAAYC,MAAZ,EAAuB;AACxB,iCAAOC,KAAP,CAAaF,SAAb,EAAwB,4CAAxB;AACA,iCAAOE,KAAP,CAAaD,OAAO,CAAP,CAAb,EAAwB,aAAxB;;AAEA,uBAAOE,QAAQC,OAAR,CAAgB,EAAEC,MAAM,EAAEC,QAAQ,CAAV,EAAR,EAAhB,CAAP;AACH;AANW;AAFY,KAApB,CAAZ;;AAYAV,UAAMW,cAAN,CAAqB,EAAEC,QAAQ,aAAV,EAArB;AACH,CAdD;;AAgBAb,QAAQ,2CAAR,IAAuD,YAAM;AACzD,QAAIC,QAAQ,oBAAU,QAAV,EAAoB;AAC5BC,0BAD4B;AAE5BC,wBAAgB;AACZW,kBAAM,cAACT,SAAD,EAAYC,MAAZ,EAAuB;AACzB,iCAAOC,KAAP,CAAaF,SAAb,EAAwB,mNAAxB;AACA,uBAAOG,QAAQC,OAAR,CAAgB,IAAhB,CAAP;AACH;AAJW;AAFY,KAApB,CAAZ;;AAUAR,UAAMc,WAAN;AACH,CAZD;;AAcAf,QAAQ,2CAAR,IAAuD,YAAM;AACzD,QAAIC,QAAQ,oBAAU,SAAV,EAAqB;AAC7BC,0BAD6B;AAE7BC,wBAAgB;AACZW,kBAAM,cAACT,SAAD,EAAYC,MAAZ,EAAuB;AACzB,iCAAOC,KAAP,CACIF,SADJ,EAEI,oRAFJ;AAIA,uBAAOG,QAAQC,OAAR,CAAgB,IAAhB,CAAP;AACH;AAPW;AAFa,KAArB,CAAZ;;AAaAR,UAAMc,WAAN;AACH,CAfD;;AAiBAf,QAAQ,iDAAR,IAA6D,YAAM;;AAE/D,WAAO,iBAAOgB,IAAP,CAAY,UAAZ,EAAwBC,IAAxB,CAA6B,UAACC,EAAD,EAAQ;;AAExC,YAAIjB,QAAQ,oBAAU,QAAV,EAAoB;AAC5BC,8BAD4B;AAE5BC,4BAAgBe;AAFY,SAApB,CAAZ;;AAKA,eAAOjB,MAAMc,WAAN,GAAoBE,IAApB,CAAyB,YAAM;AAClC,mBAAOhB,MAAMkB,WAAN,GAAoBC,KAApB,CAA0B,UAACC,UAAD,EAAgB;AAC7C,uBAAOA,WAAWC,QAAX,CAAoB,WAApB,EAAiCA,QAAjC,CAA0C,QAA1C,EAAoDC,SAApD,CAA8D,aAA9D,CAAP;AACH,aAFM,EAEJC,YAFI,EAAP;AAGH,SAJM,CAAP;AAMH,KAbM,CAAP;AAiBH,CAnBD","file":"sqlite.Table.js","sourcesContent":["import assert from \"assert\";\nimport Table from \"./../sqlite/Table\";\nimport edm from \"./../mock/edm\";\nimport sqlite from \"sqlite\";\n\nconst databaseFile = \":memory:\";\n\nexports[\"Table: addEntityAsync\"] = () => {\n    var table = new Table(\"Source\", {\n        edm: edm,\n        sqliteDatabase: {\n            run: (statement, values) => {\n                assert.equal(statement, 'INSERT INTO \"Source\" (\"string\") VALUES (?)');\n                assert.equal(values[0], \"Hello World\");\n\n                return Promise.resolve({ stmt: { lastID: 1 } });\n            }\n        }\n    });\n\n    table.addEntityAsync({ string: \"Hello World\" });\n};\n\nexports[\"Table.createAsync: Create a Source Table.\"] = () => {\n    var table = new Table(\"Source\", {\n        edm: edm,\n        sqliteDatabase: {\n            exec: (statement, values) => {\n                assert.equal(statement, 'CREATE TABLE IF NOT EXISTS \"Source\" (\"id\" INTEGER PRIMARY KEY AUTOINCREMENT, \"string\" TEXT, \"number\" NUMERIC, \"date\" NUMERIC, \"boolean\" NUMERIC, \"float\" REAL);CREATE INDEX IF NOT EXISTS \"id\" ON \"Source\" (\"id\")');\n                return Promise.resolve(null);\n            }\n        }\n    });\n\n    table.createAsync();\n};\n\nexports[\"Table.createAsync: Create a Target Table.\"] = () => {\n    var table = new Table(\"Foreign\", {\n        edm: edm,\n        sqliteDatabase: {\n            exec: (statement, values) => {\n                assert.equal(\n                    statement,\n                    'CREATE TABLE IF NOT EXISTS \"Foreign\" (\"id\" INTEGER PRIMARY KEY AUTOINCREMENT, \"foreignKey\" INTEGER, FOREIGN KEY (\"foreignKey\") REFERENCES \"Source\" (\"id\"));CREATE INDEX IF NOT EXISTS \"foreignKey\" ON \"Foreign\" (\"foreignKey\");CREATE INDEX IF NOT EXISTS \"id\" ON \"Foreign\" (\"id\")'\n                );\n                return Promise.resolve(null);\n            }\n        }\n    });\n\n    table.createAsync();\n};\n\nexports[\"Table.asQueryable: Query off nested one to one.\"] = () => {\n\n    return sqlite.open(\":memory:\").then((db) => {\n\n        var table = new Table(\"Source\", {\n            edm: edm,\n            sqliteDatabase: db\n        });\n\n        return table.createAsync().then(() => {\n            return table.asQueryable().where((expBuilder) => {\n                return expBuilder.property(\"foreigner\").property(\"string\").isEqualTo(\"Hello World\");\n            }).toArrayAsync();\n        });\n\n    });\n\n\n\n};"]}