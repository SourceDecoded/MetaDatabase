{"version":3,"sources":["../../src/tests/mock.FileSystem.js"],"names":["exports","fileSystem","fileName","fileContent","files","getReadStreamAsync","then","stream","Promise","resolve","reject","data","on","d","equal","getWriteStreamAsync","write","end","removeFileAsync"],"mappings":";;AAAA;;;;AACA;;;;;;AAEAA,QAAQ,qCAAR,IAAiD,YAAM;AACnD,QAAIC,aAAa,0BAAjB;AACA,QAAIC,WAAW,eAAf;AACA,QAAIC,cAAc,cAAlB;;AAEAF,eAAWG,KAAX,CAAiBF,QAAjB,IAA6BC,WAA7B;;AAEAF,eAAWI,kBAAX,CAA8BH,QAA9B,EAAwCI,IAAxC,CAA6C,UAACC,MAAD,EAAY;AACrD,eAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,gBAAIC,OAAO,EAAX;;AAEAJ,mBAAOK,EAAP,CAAU,MAAV,EAAkB,UAACC,CAAD,EAAO;AACrBF,wBAAQE,CAAR;AACH,aAFD;;AAIAN,mBAAOK,EAAP,CAAU,KAAV,EAAiB,YAAM;AACnB,iCAAOE,KAAP,CAAaH,IAAb,EAAmBR,WAAnB;AACH,aAFD;AAGH,SAVM,CAAP;AAWH,KAZD;AAaH,CApBD;;AAsBAH,QAAQ,sCAAR,IAAkD,YAAM;AACpD,QAAIC,aAAa,0BAAjB;AACA,QAAIC,WAAW,eAAf;AACA,QAAIC,cAAc,cAAlB;;AAEAF,eAAWc,mBAAX,CAA+Bb,QAA/B,EAAyCI,IAAzC,CAA8C,UAACC,MAAD,EAAY;AACtD,eAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCH,mBAAOS,KAAP,CAAab,WAAb;AACAI,mBAAOU,GAAP;;AAEA,6BAAOH,KAAP,CAAab,WAAWG,KAAX,CAAiBF,QAAjB,CAAb,EAAyCC,WAAzC;AACH,SALM,CAAP;AAMH,KAPD;AAQH,CAbD;;AAeAH,QAAQ,kCAAR,IAA8C,YAAM;AAChD,QAAIC,aAAa,0BAAjB;AACA,QAAIC,WAAW,eAAf;;AAEAD,eAAWG,KAAX,CAAiBF,QAAjB,IAA6B,cAA7B;;AAEAD,eAAWiB,eAAX,CAA2BhB,QAA3B,EAAqCI,IAArC,CAA0C,YAAM;AAC5C,yBAAOQ,KAAP,CAAab,WAAWG,KAAX,CAAiBF,QAAjB,CAAb,EAAyC,IAAzC;AACH,KAFD;AAGH,CATD","file":"mock.FileSystem.js","sourcesContent":["import assert from \"assert\";\nimport FileSystem from \"./../mock/FileSystem\";\n\nexports[\"mock.FileSystem: getReadStreamAsync\"] = () => {\n    let fileSystem = new FileSystem();\n    let fileName = \"Mock File.txt\";\n    let fileContent = \"Hello World!\";\n\n    fileSystem.files[fileName] = fileContent;\n\n    fileSystem.getReadStreamAsync(fileName).then((stream) => {\n        return new Promise((resolve, reject) => {\n            let data = \"\";\n\n            stream.on(\"data\", (d) => {\n                data += d;\n            });\n\n            stream.on(\"end\", () => {\n                assert.equal(data, fileContent);\n            });\n        });\n    });\n}\n\nexports[\"mock.FileSystem: getWriteStreamAsync\"] = () => {\n    let fileSystem = new FileSystem();\n    let fileName = \"Mock File.txt\";\n    let fileContent = \"Hello World!\";\n\n    fileSystem.getWriteStreamAsync(fileName).then((stream) => {\n        return new Promise((resolve, reject) => {\n            stream.write(fileContent);\n            stream.end();\n\n            assert.equal(fileSystem.files[fileName], fileContent);\n        });\n    });\n}\n\nexports[\"mock.FileSystem: removeFileAsync\"] = () => {\n    let fileSystem = new FileSystem();\n    let fileName = \"Mock File.txt\";\n\n    fileSystem.files[fileName] = \"Hello World!\";\n\n    fileSystem.removeFileAsync(fileName).then(() => {\n        assert.equal(fileSystem.files[fileName], null);\n    });\n}"]}