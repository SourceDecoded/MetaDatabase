{"version":3,"sources":["../../src/tests/ExpressionBuilder.js"],"names":["assert","exports","expressionBuilder","ok","expression","and","equal","nodeName","or","any","expBuilder","property","isEqualTo","all","value","children","isNotEqualTo","contains","testArray","isIn","deepEqual","throws","isNotIn","isGreaterThan","isGreaterThanOrEqualTo","isLessThan","isLessThanOrEqualTo","endsWith","startsWith","operationExpressionBuilder","getExpression","where","query","getLeftExpression"],"mappings":"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","file":"ExpressionBuilder.js","sourcesContent":["import * as assert from \"assert\";\r\nimport { ExpressionBuilder, OperationExpressionBuilder } from \"../query/ExpressionBuilder\";\r\n\r\nexports[\"ExpressionBuilder: Constructor.\"] = function() {\r\n    const expressionBuilder = new ExpressionBuilder();\r\n    assert.ok(true);\r\n};\r\n\r\nexports[\"ExpressionBuilder: Constructor with and.\"] = function() {\r\n    const expressionBuilder = new ExpressionBuilder();\r\n    const expression = expressionBuilder.and();\r\n\r\n    assert.equal(\"and\", expression.nodeName);\r\n};\r\n\r\nexports[\"ExpressionBuilder: Constructor with or.\"] = function() {\r\n    const expressionBuilder = new ExpressionBuilder();\r\n    const expression = expressionBuilder.or();\r\n\r\n    assert.equal(\"or\", expression.nodeName);\r\n};\r\n\r\nexports[\"ExpressionBuilder: Constructor with any.\"] = function() {\r\n    const expressionBuilder = new ExpressionBuilder();\r\n    const expression = expressionBuilder.any(expBuilder => {\r\n        expBuilder.property(\"firstName\").isEqualTo(\"Jared\");\r\n    });\r\n\r\n    assert.equal(\"any\", expression.nodeName);\r\n};\r\n\r\nexports[\"ExpressionBuilder: Constructor with all.\"] = function() {\r\n    const expressionBuilder = new ExpressionBuilder();\r\n    const expression = expressionBuilder.all(expBuilder => {\r\n        expBuilder.property(\"firstName\").isEqualTo(\"Jared\");\r\n    });\r\n\r\n    assert.equal(\"all\", expression.nodeName);\r\n};\r\n\r\nexports[\"ExpressionBuilder: Constructor with value.\"] = function() {\r\n    const expressionBuilder = new ExpressionBuilder();\r\n    const value = expressionBuilder.value();\r\n    assert.ok(true);\r\n};\r\n\r\nexports[\"ExpressionBuilder: Constructor with expression (isEqualTo).\"] = function() {\r\n    const expressionBuilder = new ExpressionBuilder();\r\n    const expression = expressionBuilder.property(\"firstName\").isEqualTo(\"Jared\");\r\n\r\n    assert.equal(\"equalTo\", expression.nodeName);\r\n    assert.equal(\"firstName\", expression.children[0].children[1].value);\r\n    assert.equal(\"Jared\", expression.children[1].value);\r\n};\r\n\r\nexports[\"ExpressionBuilder: Constructor with expression (isNotEqualTo).\"] = function() {\r\n    const expressionBuilder = new ExpressionBuilder();\r\n    const expression = expressionBuilder.property(\"firstName\").isNotEqualTo(\"Jared\");\r\n\r\n    assert.equal(\"notEqualTo\", expression.nodeName);\r\n    assert.equal(\"firstName\", expression.children[0].children[1].value);\r\n    assert.equal(\"Jared\", expression.children[1].value);\r\n};\r\n\r\nexports[\"ExpressionBuilder: Constructor with expression (contains).\"] = function() {\r\n    const expressionBuilder = new ExpressionBuilder();\r\n    const expression = expressionBuilder.property(\"firstName\").contains(\"Jared\");\r\n\r\n    assert.equal(\"substringOf\", expression.nodeName);\r\n    assert.equal(\"firstName\", expression.children[0].children[1].value);\r\n    assert.equal(\"Jared\", expression.children[1].value);\r\n};\r\n\r\nexports[\"ExpressionBuilder: Constructor with expression (isIn).\"] = function() {\r\n    const expressionBuilder = new ExpressionBuilder();\r\n    const testArray = [\"test\"];\r\n    const expression = expressionBuilder.property(\"firstName\").isIn(testArray);\r\n\r\n    assert.equal(\"isIn\", expression.nodeName);\r\n    assert.equal(\"firstName\", expression.children[0].children[1].value);\r\n    assert.deepEqual(testArray, expression.children[1].value);\r\n};\r\n\r\nexports[\"ExpressionBuilder: Constructor with expression (isIn: w/o passing in Array).\"] = function() {\r\n    const expressionBuilder = new ExpressionBuilder();\r\n\r\n    assert.throws(() => {\r\n        expressionBuilder.property(\"firstName\").isIn(\"test\");\r\n    });\r\n};\r\n\r\nexports[\"ExpressionBuilder: Constructor with expression (isNotIn).\"] = function() {\r\n    const expressionBuilder = new ExpressionBuilder();\r\n    const testArray = [\"test\"];\r\n    const expression = expressionBuilder.property(\"firstName\").isNotIn(testArray);\r\n\r\n    assert.equal(\"isNotIn\", expression.nodeName);\r\n    assert.equal(\"firstName\", expression.children[0].children[1].value);\r\n    assert.deepEqual(testArray, expression.children[1].value);\r\n};\r\n\r\nexports[\"ExpressionBuilder: Constructor with expression (isNotIn: w/o passing in Array).\"] = function() {\r\n    const expressionBuilder = new ExpressionBuilder();\r\n\r\n    assert.throws(() => {\r\n        expressionBuilder.property(\"firstName\").isNotIn(\"test\");\r\n    });\r\n};\r\n\r\nexports[\"ExpressionBuilder: Constructor with expression (isGreaterThan).\"] = function() {\r\n    const expressionBuilder = new ExpressionBuilder();\r\n    const expression = expressionBuilder.property(\"firstName\").isGreaterThan(\"Jared\");\r\n\r\n    assert.equal(\"greaterThan\", expression.nodeName);\r\n    assert.equal(\"firstName\", expression.children[0].children[1].value);\r\n    assert.equal(\"Jared\", expression.children[1].value);\r\n};\r\n\r\nexports[\"ExpressionBuilder: Constructor with expression (isGreaterThanOrEqualTo).\"] = function() {\r\n    const expressionBuilder = new ExpressionBuilder();\r\n    const expression = expressionBuilder.property(\"firstName\").isGreaterThanOrEqualTo(\"Jared\");\r\n\r\n    assert.equal(\"greaterThanOrEqualTo\", expression.nodeName);\r\n    assert.equal(\"firstName\", expression.children[0].children[1].value);\r\n    assert.equal(\"Jared\", expression.children[1].value);\r\n};\r\n\r\nexports[\"ExpressionBuilder: Constructor with expression (isLessThan).\"] = function() {\r\n    const expressionBuilder = new ExpressionBuilder();\r\n    const expression = expressionBuilder.property(\"firstName\").isLessThan(\"Jared\");\r\n\r\n    assert.equal(\"lessThan\", expression.nodeName);\r\n    assert.equal(\"firstName\", expression.children[0].children[1].value);\r\n    assert.equal(\"Jared\", expression.children[1].value);\r\n};\r\n\r\nexports[\"ExpressionBuilder: Constructor with expression (isLessThanOrEqualTo).\"] = function() {\r\n    const expressionBuilder = new ExpressionBuilder();\r\n    const expression = expressionBuilder.property(\"firstName\").isLessThanOrEqualTo(\"Jared\");\r\n\r\n    assert.equal(\"lessThanOrEqualTo\", expression.nodeName);\r\n    assert.equal(\"firstName\", expression.children[0].children[1].value);\r\n    assert.equal(\"Jared\", expression.children[1].value);\r\n};\r\n\r\nexports[\"ExpressionBuilder: Constructor with expression (endsWith).\"] = function() {\r\n    const expressionBuilder = new ExpressionBuilder();\r\n    const expression = expressionBuilder.property(\"firstName\").endsWith(\"Jared\");\r\n\r\n    assert.equal(\"endsWith\", expression.nodeName);\r\n    assert.equal(\"firstName\", expression.children[0].children[1].value);\r\n    assert.equal(\"Jared\", expression.children[1].value);\r\n};\r\n\r\nexports[\"ExpressionBuilder: Constructor with expression (startsWith).\"] = function() {\r\n    const expressionBuilder = new ExpressionBuilder();\r\n    const expression = expressionBuilder.property(\"firstName\").startsWith(\"Jared\");\r\n\r\n    assert.equal(\"startsWith\", expression.nodeName);\r\n    assert.equal(\"firstName\", expression.children[0].children[1].value);\r\n    assert.equal(\"Jared\", expression.children[1].value);\r\n};\r\n\r\nexports[\"OperationExpressionBuilder: Constructor with getExpression.\"] = function() {\r\n    const operationExpressionBuilder = new OperationExpressionBuilder();\r\n    const expression = operationExpressionBuilder.getExpression();\r\n    assert.ok(true);\r\n};\r\n\r\nexports[\"OperationExpressionBuilder: Constructor with any.\"] = function() {\r\n    const operationExpressionBuilder = new OperationExpressionBuilder();\r\n    const expression = operationExpressionBuilder.any(expBuilder => {\r\n        return expBuilder.property(\"firstName\").isEqualTo(\"Jared\");\r\n    });\r\n\r\n    assert.equal(\"any\", expression.nodeName);\r\n    assert.equal(\"firstName\", expression.children[1].value.children[0].children[1].value);\r\n    assert.equal(\"Jared\", expression.children[1].value.children[1].value);\r\n};\r\n\r\nexports[\"OperationExpressionBuilder: Constructor with where.\"] = function() {\r\n    const operationExpressionBuilder = new OperationExpressionBuilder();\r\n    const expression = operationExpressionBuilder.where(expBuilder => {\r\n        return expBuilder.property(\"firstName\").isEqualTo(\"Jared\");\r\n    });\r\n\r\n    const query = expression.getLeftExpression();\r\n\r\n    assert.equal(\"where\", query.children[1].value.nodeName);\r\n    assert.equal(\"firstName\", query.children[1].value.children[0].children[0].children[1].value);\r\n    assert.equal(\"Jared\", query.children[1].value.children[0].children[1].value);\r\n};\r\n\r\nexports[\"OperationExpressionBuilder: Constructor with all.\"] = function() {\r\n    const operationExpressionBuilder = new OperationExpressionBuilder();\r\n    const expression = operationExpressionBuilder.all(expBuilder => {\r\n        return expBuilder.property(\"firstName\").isEqualTo(\"Jared\");\r\n    });\r\n\r\n    assert.equal(\"all\", expression.nodeName);\r\n    assert.equal(\"firstName\", expression.children[1].value.children[0].children[1].value);\r\n    assert.equal(\"Jared\", expression.children[1].value.children[1].value);\r\n};\r\n"]}