{"version":3,"sources":["../../src/tests/dbDriver.MsSqlDriver.js"],"names":["dbConfig","user","process","env","META_DB_TEST_USER","password","META_DB_TEST_PW","server","META_DB_TEST_SERVER","database","META_DB_TEST_DB","dataDb","META_DB_TEST_DB_DATA","edmDb","META_DB_TEST_DB_EDM","edmSchema","dataSchema","edmTable","cleanEdmDbAsync","dbDriver","getEdmDbAsync","then","pool","request","query","exports","connect","catch","e","connected","close","dispose","db","fail","message","getDataDbAsync","_verifyEdmTableAsync","getEdmListAsync","edmList","length","getDatabaseForEdmAsync","idb","addEdmAsync","getEdmAsync","edm","deleteEdmAsync","equal"],"mappings":"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","file":"dbDriver.MsSqlDriver.js","sourcesContent":["import assert from \"assert\";\nimport edm from \"../mock/edm\";\nimport mssql from \"mssql\";\nimport MsSqlDriver from \"../dbDriver/MsSqlDriver\";\n\nlet dbConfig = {\n    user: process.env.META_DB_TEST_USER,\n    password: process.env.META_DB_TEST_PW,\n    server: process.env.META_DB_TEST_SERVER,\n    database: process.env.META_DB_TEST_DB,\n    dataDb: process.env.META_DB_TEST_DB_DATA,\n    edmDb: process.env.META_DB_TEST_DB_EDM,\n    edmSchema: \"dbo\",\n    dataSchema: \"dbo\",\n    edmTable: \"edm\"\n};\n\nlet cleanEdmDbAsync = function(dbDriver){\n    return dbDriver.getEdmDbAsync().then((pool) => {\n        return pool.request().query(`DELETE FROM [${dbConfig.edmSchema}].[${dbConfig.edmTable}]`);\n    });\n};\n\nexports[\"dbDriver.MsSqlDriver can connect\"] = () => {\n    \n    mssql.connect(dbConfig).then((pool) => {\n        return true;\n    }).catch((e) => {\n        return false;\n    }).then((connected) => {\n        mssql.close();\n        assert(connected);\n    });\n\n};\n\nexports[\"dbDriver.MsSqlDriver()\"] = () => {\n    var dbDriver = new MsSqlDriver(dbConfig);\n    assert(dbDriver);\n    dbDriver.dispose();\n};\n\nexports[\"dbDriver.MsSqlDriver.getEdmDbAsync\"] = () => {\n    var dbDriver = new MsSqlDriver(dbConfig);\n    dbDriver.getEdmDbAsync().then((db) => {\n        assert(db);\n        dbDriver.dispose();\n    }).catch((e) => {\n        assert.fail(e.message);\n    });\n};\n\nexports[\"dbDriver.MsSqlDriver.getDataDbAsync\"] = () => {\n    var dbDriver = new MsSqlDriver(dbConfig);\n    dbDriver.getDataDbAsync().then((db) => {\n        assert(db);\n        dbDriver.dispose();\n    }).catch((e) => {\n        assert.fail(e.message);\n    });\n};\n\nexports[\"dbDriver.MsSqlDriver._verifyEdmTableAsync\"] = () => {\n    var dbDriver = new MsSqlDriver(dbConfig);\n    dbDriver._verifyEdmTableAsync().then((pool) => {\n        assert(pool);\n        dbDriver.dispose();\n    }).catch((e) => {\n        assert.fail(e.message);\n    });\n};\n\nexports[\"dbDriver.MsSqlDriver.getEdmListAsync\"] = () => {\n    var dbDriver = new MsSqlDriver(dbConfig);\n    dbDriver.getEdmListAsync().then((edmList) => {\n        assert(typeof edmList.length !== \"undefined\");\n        dbDriver.dispose();\n    }).catch((e) => {\n        assert.fail(e.message);\n    });\n};\n\nexports[\"dbDriver.MsSqlDriver.getDatabaseForEdmAsync\"] = () => {\n    var dbDriver = new MsSqlDriver(dbConfig);\n    dbDriver.getDatabaseForEdmAsync(edm).then((idb) => {\n        assert(idb);\n        dbDriver.dispose();\n    }).catch((e) => {\n        assert.fail(e.message);\n    });\n};\n\nexports[\"dbDriver.MsSqlDriver add and get EDM\"] = () => {\n    var dbDriver = new MsSqlDriver(dbConfig);\n    cleanEdmDbAsync(dbDriver).then(() => {\n        dbDriver.addEdmAsync(\"testEDM\", \"0.0.1\", \"a label\").then(() => {\n            return dbDriver.getEdmAsync(\"testEDM\", \"0.0.1\").then((edm) => {\n                assert(edm);\n            });\n        }).catch((e) => {\n            assert.fail(e.message);\n        }).then(() => {\n            dbDriver.deleteEdmAsync(\"testEDM\", \"0.0.1\").then(() => {\n                dbDriver.dispose();\n            });\n        });\n    });\n};\n\nexports[\"dbDriver.MsSqlDriver add duplicate EDM\"] = () => {\n    var dbDriver = new MsSqlDriver(dbConfig);\n    dbDriver.addEdmAsync(\"dupetest\", \"0.0.1\", \"label\").then(() => {\n        return dbDriver.addEdmAsync(\"dupetest\", \"0.0.1\").then(() => {});\n    }).then(() => {\n        assert.fail(\"Duplicate EDM allowed to be added\");\n    }).catch((e) => {\n        assert.equal(e.message, \"An EDM with that name and version already exists\");\n    }).then(() => {\n        return dbDriver.deleteEdmAsync(\"dupetest\", \"0.0.1\");\n    }).then(() => {\n        dbDriver.dispose();\n    });\n}\n"]}