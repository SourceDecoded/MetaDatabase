{"version":3,"sources":["../../src/tests/TableStatementBuilder.js"],"names":["assert","sourceTable","Date","foreignTable","relationships","oneToOne","oneToMany","exports","builder","tableStatement","createTableStatement","equal","insertStatement","createInsertStatement","string","statement","values","length","updateStatement","createUpdateStatement","id","deleteStatement","createDeleteStatement","indexStatements","createTableIndexesStatements"],"mappings":"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","file":"TableStatementBuilder.js","sourcesContent":["import * as assert from \"assert\";\nimport TableStatementBuilder from \"./../sqlite/TableStatementBuilder\";\n\nvar sourceTable = {\n    \"id\": 1,\n    \"name\": \"Source\",\n    \"label\": \"Source\",\n    \"pluralLabel\": \"Sources\",\n    \"columns\": [\n        {\n            \"id\": 1,\n            \"type\": \"Integer\", // Possible types: String, Number, Date, Boolean\n            \"name\": \"id\",\n            \"isPrimaryKey\": true, // Defaults to false\n            \"isAutoIncrement\": true, // Default to false\n            \"isNullable\": false // Default to true\n        },\n        {\n            \"id\": 2,\n            \"type\": \"String\",\n            \"name\": \"string\",\n            \"defaultStringValue\": \"\"\n        },\n        {\n            \"id\": 3,\n            \"type\": \"Number\",\n            \"name\": \"number\",\n            \"defaultNumberValue\": 1\n        },\n        {\n            \"id\": 4,\n            \"type\": \"Date\",\n            \"name\": \"date\",\n            \"defaultDateValue\": new Date(1900, 0, 1)\n        },\n        {\n            \"id\": 5,\n            \"type\": \"Boolean\",\n            \"name\": \"boolean\",\n            \"defaultBooleanValue\": false\n        },\n        {\n            \"id\": 6,\n            \"type\": \"Float\",\n            \"name\": \"float\",\n            \"defaultFloatValue\": false\n        },\n    ]\n};\n\nconst foreignTable = {\n    \"id\": 1,\n    \"name\": \"Foreign\",\n    \"label\": \"Foreign\",\n    \"pluralLabel\": \"Foreigners\",\n    \"columns\": [\n        {\n            \"id\": 100,\n            \"type\": \"Integer\", // Possible types: String, Number, Date, Boolean\n            \"name\": \"id\",\n            \"isPrimaryKey\": true, // Defaults to false\n            \"isAutoIncrement\": true, // Default to false\n            \"isNullable\": false // Default to true\n        },\n        {\n            \"id\": 101,\n            \"type\": \"Integer\",\n            \"name\": \"foreignKey\",\n        }\n    ]\n};\n\nconst relationships = {\n    oneToOne: [],\n    oneToMany: [{\n        \"id\": 1,\n        \"type\": \"Source\",\n        \"hasKey\": \"id\",\n        \"hasMany\": \"foreigners\",\n        \"ofType\": \"Foreign\",\n        \"withKey\": \"id\",\n        \"withForeignKey\": \"foreignKey\",\n        \"withOne\": \"source\"\n    }]\n};\n\nexports[\"TableStatementBuilder: Constructor\"] = () => {\n    var builder = new TableStatementBuilder();\n}\n\nexports[\"TableStatementBuilder.createTableStatement: Without Relationships.\"] = () => {\n    var builder = new TableStatementBuilder();\n\n    var tableStatement = builder.createTableStatement(sourceTable, relationships);\n\n    assert.equal(\n        tableStatement,\n        \"CREATE TABLE IF NOT EXISTS 'Source' ('id' INTEGER PRIMARY KEY AUTOINCREMENT, 'string' TEXT, 'number' NUMERIC, 'date' NUMERIC, 'boolean' NUMERIC, 'float' REAL)\"\n    )\n}\n\nexports[\"TableStatementBuilder.createTableStatement: With Relationships.\"] = () => {\n    var builder = new TableStatementBuilder();\n\n    var tableStatement = builder.createTableStatement(foreignTable, relationships);\n\n    assert.equal(\n        tableStatement,\n        \"CREATE TABLE IF NOT EXISTS 'Foreign' ('id' INTEGER PRIMARY KEY AUTOINCREMENT, 'foreignKey' INTEGER, FOREIGN KEY ('foreignKey') REFERENCES 'Source' ('id'))\"\n    )\n}\n\nexports[\"TableStatementBuilder.createInsertStatement\"] = () => {\n    var builder = new TableStatementBuilder();\n\n    var insertStatement = builder.createInsertStatement(sourceTable, {\n        string: \"This is a test.\"\n    });\n\n    assert.equal(\n        insertStatement.statement,\n        \"INSERT INTO 'Source' ('string') VALUES (?)\"\n    );\n\n    assert.equal(\n        insertStatement.values[0],\n        \"This is a test.\"\n    );\n}\n\nexports[\"TableStatementBuilder.createInsertStatement: Defualt Values.\"] = () => {\n    var builder = new TableStatementBuilder();\n\n    var insertStatement = builder.createInsertStatement(sourceTable, {});\n\n    assert.equal(\n        insertStatement.statement,\n        \"INSERT INTO 'Source' DEFAULT VALUES\"\n    );\n\n    assert.equal(\n        insertStatement.values.length,\n        0\n    );\n}\n\nexports[\"TableStatementBuilder.createUpdateStatement\"] = () => {\n    var builder = new TableStatementBuilder();\n\n    var updateStatement = builder.createUpdateStatement(sourceTable, { id: 1 }, { string: \"This is a update test.\" });\n\n    assert.equal(\n        updateStatement.statement,\n        \"UPDATE 'Source' SET 'string' = ? WHERE 'id' = ?\"\n    );\n\n    assert.equal(\n        updateStatement.values[0],\n        \"This is a update test.\"\n    );\n\n    assert.equal(\n        updateStatement.values[1],\n        1\n    );\n\n    assert.equal(\n        updateStatement.values.length,\n        2\n    );\n}\n\n\nexports[\"TableStatementBuilder.createDeleteStatement\"] = () => {\n    var builder = new TableStatementBuilder();\n\n    var deleteStatement = builder.createDeleteStatement(sourceTable, { id: 1 });\n\n    assert.equal(\n        deleteStatement.statement,\n        \"DELETE FROM 'Source' WHERE 'id' = ?\"\n    );\n\n    assert.equal(\n        deleteStatement.values[0],\n        1\n    );\n\n    assert.equal(\n        deleteStatement.values.length,\n        1\n    );\n}\n\nexports[\"TableStatementBuilder.createTableIndexesStatements\"] = () => {\n    var builder = new TableStatementBuilder();\n\n    var indexStatements = builder.createTableIndexesStatements(foreignTable, relationships);\n\n    assert.equal(indexStatements[0], \"CREATE INDEX IF NOT EXISTS 'id' ON 'Foreign' ('id')\");\n    assert.equal(indexStatements[1], \"CREATE INDEX IF NOT EXISTS 'foreignKey' ON 'Foreign' ('foreignKey')\");\n}"]}