{"version":3,"sources":["../../src/tests/MetaDatabase.js"],"names":["path","user","admin","exports","hasCalledPrepareEdmAsync","fileSystem","metaDatabase","sqlite","edm","databasePath","decorators","prepareEdmAsync","initializeAsync","then","equal","prepareEntityToBeAddedAsyncCount","entityAddedAsyncCount","validateEntityToBeAddedAsyncCount","decorator","name","prepareEntityToBeAddedAsync","entity","options","option1","Promise","resolve","entityAddedAsync","validateEntityToBeAddedAsync","getTableAsync","table","addEntityAsync","string","integer","prepareEntityToBeUpdatedAsyncCount","entityUpdatedAsyncCount","validateEntityToBeUpdatedAsyncCount","prepareEntityToBeUpdatedAsync","delta","entityUpdatedAsync","validateEntityToBeUpdatedAsync","t","updateEntityAsync","type","approveEntityToBeRemovedAsyncCount","entityRemovedAsyncCount","approveEntityToBeRemovedAsync","entityRemovedAsync","removeEntityAsync","activatedAsyncCount","activatedAsync","fileUpdatedAsyncCount","fileRemovedAsyncCount","fileContent","id","fileUpdatedAsync","filePath","fileRemovedAsync","getFileWriteStreamByIdAsync","stream","write","end","getFileReadStreamByIdAsync","reject","data","on","d","removeFileByIdAsync","refineQueryableAsync","queryable","isAdmin","where","expBuilder","property","isEqualTo","asQueryable","toArrayAsync","results","length"],"mappings":"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","file":"MetaDatabase.js","sourcesContent":["import assert from \"assert\";\nimport MetaDatabase from \"./../MetaDatabase\";\nimport Database from \"./../sqlite/Database\";\nimport edm from \"./../mock/edm\";\nimport sqlite from \"sqlite\";\nimport GuestUser from \"./../GuestUser\";\nimport AdminUser from \"./../AdminUser\";\nimport FileSystem from \"./../mock/FileSystem\";\n\nlet path = \":memory:\";\nlet user = new GuestUser();\nlet admin = new AdminUser();\n\nexports[\"MetaDatabase: prepareEdmAsync\"] = () => {\n    let hasCalledPrepareEdmAsync = false;\n    let fileSystem = new FileSystem();\n\n    let metaDatabase = new MetaDatabase({\n        fileSystem: fileSystem,\n        sqlite: sqlite,\n        edm: edm,\n        databasePath: path,\n        decorators: [{\n            prepareEdmAsync: () => {\n                hasCalledPrepareEdmAsync = true;\n            }\n        }]\n    });\n\n    return metaDatabase.initializeAsync().then(() => {\n        assert.equal(hasCalledPrepareEdmAsync, true);\n    });\n\n}\n\nexports[\"MetaDatabase: prepareEntityToBeAddedAsync, entityAddedAsync, validateEntityToBeAddedAsync.\"] = () => {\n    let prepareEntityToBeAddedAsyncCount = 0;\n    let entityAddedAsyncCount = 0;\n    let validateEntityToBeAddedAsyncCount = 0;\n    let fileSystem = new FileSystem();\n\n    let decorator = {\n        name: \"Test\",\n        prepareEntityToBeAddedAsync(user, entity, options) {\n            assert.equal(options.option1, true);\n            prepareEntityToBeAddedAsyncCount++;\n            return Promise.resolve();\n        },\n        entityAddedAsync(user, entity, options) {\n            assert.equal(options.option1, true);\n            entityAddedAsyncCount++;\n        },\n        validateEntityToBeAddedAsync(user, entity, options) {\n            assert.equal(options.option1, true);\n            validateEntityToBeAddedAsyncCount++;\n        }\n    };\n\n    let metaDatabase = new MetaDatabase({\n        fileSystem: fileSystem,\n        sqlite: sqlite,\n        edm: edm,\n        databasePath: path,\n        decorators: [decorator]\n    });\n\n    return metaDatabase.initializeAsync().then(() => {\n        return metaDatabase.getTableAsync(\"Source\");\n    }).then((table) => {\n        return table.addEntityAsync(user, {\n            string: \"Hello World!\",\n            integer: 10\n        });\n    }).then(() => {\n        return metaDatabase.getTableAsync(\"Foreign\");\n    }).then((table) => {\n        return table.addEntityAsync(user, {\n            integer: 10\n        });\n    }).then(() => {\n        assert.equal(prepareEntityToBeAddedAsyncCount, 1);\n        assert.equal(entityAddedAsyncCount, 1);\n        assert.equal(validateEntityToBeAddedAsyncCount, 1);\n    });\n\n}\n\nexports[\"MetaDatabase: prepareEntityToBeUpdatedAsync, entityUpdatedAsync, validateEntityToBeUpdatedAsync.\"] = () => {\n    let prepareEntityToBeUpdatedAsyncCount = 0;\n    let entityUpdatedAsyncCount = 0;\n    let validateEntityToBeUpdatedAsyncCount = 0;\n    let fileSystem = new FileSystem();\n\n    let decorator = {\n        name: \"Test\",\n        prepareEntityToBeUpdatedAsync(user, entity, delta, options) {\n            assert.equal(options.option1, true);\n            prepareEntityToBeUpdatedAsyncCount++;\n            return Promise.resolve();\n        },\n        entityUpdatedAsync(user, entity, delta, options) {\n            assert.equal(options.option1, true);\n            entityUpdatedAsyncCount++;\n        },\n        validateEntityToBeUpdatedAsync(user, entity, delta, options) {\n            assert.equal(options.option1, true);\n            validateEntityToBeUpdatedAsyncCount++;\n        }\n    };\n\n    let metaDatabase = new MetaDatabase({\n        fileSystem: fileSystem,\n        sqlite: sqlite,\n        edm: edm,\n        databasePath: path,\n        decorators: [decorator]\n    });\n\n    let table = null;\n\n    return metaDatabase.initializeAsync().then(() => {\n        return metaDatabase.getTableAsync(\"Source\");\n    }).then((t) => {\n        table = t;\n        return table.addEntityAsync(user, {\n            string: \"Hello World!\",\n            integer: 10\n        });\n    }).then((entity) => {\n        return table.updateEntityAsync(entity, { string: \"Hello World 2\" });\n    }).then(() => {\n        assert.equal(prepareEntityToBeUpdatedAsyncCount, 1);\n        assert.equal(entityUpdatedAsyncCount, 1);\n        assert.equal(validateEntityToBeUpdatedAsyncCount, 1);\n    });\n\n}\n\nexports[\"MetaDatabase: prepareEntityToBeUpdatedAsync, entityUpdatedAsync, validateEntityToBeUpdatedAsync.\"] = () => {\n    let prepareEntityToBeUpdatedAsyncCount = 0;\n    let entityUpdatedAsyncCount = 0;\n    let validateEntityToBeUpdatedAsyncCount = 0;\n    let fileSystem = new FileSystem();\n\n    let decorator = {\n        name: \"Test\",\n        prepareEntityToBeUpdatedAsync(type, entity, delta, options) {\n            assert.equal(options.option1, true);\n            prepareEntityToBeUpdatedAsyncCount++;\n            return Promise.resolve();\n        },\n        entityUpdatedAsync(type, entity, delta, options) {\n            assert.equal(options.option1, true);\n            entityUpdatedAsyncCount++;\n        },\n        validateEntityToBeUpdatedAsync(type, entity, delta, options) {\n            assert.equal(options.option1, true);\n            validateEntityToBeUpdatedAsyncCount++;\n        }\n    };\n\n    let metaDatabase = new MetaDatabase({\n        fileSystem: fileSystem,\n        sqlite: sqlite,\n        edm: edm,\n        databasePath: path,\n        decorators: [decorator]\n    });\n\n    let table = null;\n\n    return metaDatabase.initializeAsync().then(() => {\n        return metaDatabase.getTableAsync(\"Source\");\n    }).then((t) => {\n        table = t;\n        return table.addEntityAsync(user, {\n            string: \"Hello World!\",\n            integer: 10\n        });\n    }).then((entity) => {\n        return table.updateEntityAsync(user, entity, { string: \"Hello World 2\" });\n    }).then(() => {\n        assert.equal(prepareEntityToBeUpdatedAsyncCount, 1);\n        assert.equal(entityUpdatedAsyncCount, 1);\n        assert.equal(validateEntityToBeUpdatedAsyncCount, 1);\n    });\n\n}\n\nexports[\"MetaDatabase: approveEntityToBeRemovedAsync, entityRemovedAsync.\"] = () => {\n    let approveEntityToBeRemovedAsyncCount = 0;\n    let entityRemovedAsyncCount = 0;\n    let fileSystem = new FileSystem();\n\n    let decorator = {\n        name: \"Test\",\n        approveEntityToBeRemovedAsync(user, entity, options) {\n            assert.equal(options.option1, true);\n            approveEntityToBeRemovedAsyncCount++;\n            return Promise.resolve();\n        },\n        entityRemovedAsync(user, entity, options) {\n            assert.equal(options.option1, true);\n            entityRemovedAsyncCount++;\n        }\n    };\n\n    let metaDatabase = new MetaDatabase({\n        fileSystem: fileSystem,\n        sqlite: sqlite,\n        edm: edm,\n        databasePath: path,\n        decorators: [decorator]\n    });\n\n    let table = null;\n\n    return metaDatabase.initializeAsync().then(() => {\n        return metaDatabase.getTableAsync(\"Source\");\n    }).then((t) => {\n        table = t;\n        return table.addEntityAsync(user, {\n            string: \"Hello World!\",\n            integer: 10\n        });\n    }).then((entity) => {\n        return table.removeEntityAsync(user, entity);\n    }).then(() => {\n        assert.equal(approveEntityToBeRemovedAsyncCount, 1);\n        assert.equal(entityRemovedAsyncCount, 1);\n    });\n\n}\n\nexports[\"MetaDatabase: activatedAsync.\"] = () => {\n    let activatedAsyncCount = 0;\n    let fileSystem = new FileSystem();\n\n    let decorator = {\n        name: \"Test\",\n        activatedAsync(metaDatabase) {\n            assert.equal(metaDatabase != null, true);\n            activatedAsyncCount++;\n        }\n    };\n\n    let metaDatabase = new MetaDatabase({\n        fileSystem: fileSystem,\n        sqlite: sqlite,\n        edm: edm,\n        databasePath: path,\n        decorators: [decorator]\n    });\n\n    let table = null;\n\n    return metaDatabase.initializeAsync().then(() => {\n        return metaDatabase.getTableAsync(\"Source\");\n    }).then(() => {\n        assert.equal(activatedAsyncCount, 1);\n    });\n\n};\n\nexports[\"MetaDatabase: file life cycle.\"] = () => {\n    let fileSystem = new FileSystem();\n    let fileUpdatedAsyncCount = 0;\n    let fileRemovedAsyncCount = 0;\n    let fileContent = \"This is a file.\";\n    let table;\n    let id;\n\n    let decorator = {\n        name: \"Test\",\n        fileUpdatedAsync(id, filePath) {\n            fileUpdatedAsyncCount++;\n        },\n        fileRemovedAsync(id, filePath) {\n            fileRemovedAsyncCount++;\n        }\n    };\n\n    let metaDatabase = new MetaDatabase({\n        fileSystem: fileSystem,\n        sqlite: sqlite,\n        edm: edm,\n        databasePath: path,\n        decorators: [decorator]\n    });\n\n    return metaDatabase.initializeAsync().then(() => {\n        return metaDatabase.getTableAsync(\"Source\");\n    }).then((t) => {\n        table = t;\n        return table.addEntityAsync(user, {\n            string: \"Hello World!\"\n        });\n    }).then((entity) => {\n        id = entity.id;\n        return table.getFileWriteStreamByIdAsync(user, id);\n    }).then((stream) => {\n        stream.write(fileContent);\n        stream.end();\n    }).then(() => {\n        return table.getFileReadStreamByIdAsync(user, id);\n    }).then((stream) => {\n        return new Promise((resolve, reject) => {\n            let data = \"\";\n\n            stream.on(\"data\", (d) => {\n                data += d;\n            });\n            stream.on(\"end\", () => {\n                resolve(data);\n            });\n        });\n    }).then((data) => {\n        assert.equal(fileUpdatedAsyncCount, 1);\n        assert.equal(data, fileContent);\n    }).then(() => {\n        return table.removeFileByIdAsync(user, id);\n    }).then(() => {\n        assert.equal(fileRemovedAsyncCount, 1);\n    });\n};\n\nexports[\"MetaDatabase: refineQueryableAsync.\"] = () => {\n    let fileSystem = new FileSystem();\n    let decorator = {\n        name: \"Test\",\n        refineQueryableAsync(user, queryable, options) {\n            if (user.isAdmin) {\n                return queryable;\n            } else {\n                return queryable.where((expBuilder) => {\n                    return expBuilder.property(\"number\").isEqualTo(2);\n                });\n            }\n        }\n    };\n\n    let metaDatabase = new MetaDatabase({\n        fileSystem: fileSystem,\n        sqlite: sqlite,\n        edm: edm,\n        databasePath: path,\n        decorators: [decorator]\n    });\n\n    let table = null;\n\n    return metaDatabase.initializeAsync().then(() => {\n        return metaDatabase.getTableAsync(\"Source\");\n    }).then((t) => {\n        table = t;\n\n        return table.addEntityAsync(user, {\n            string: \"Hello World!\",\n            integer: 10\n        });\n    }).then(() => {\n        return table.asQueryable(user).where((expBuilder) => {\n            return expBuilder.property(\"string\").isEqualTo(\"Hello World!\");\n        }).toArrayAsync();\n    }).then((results) => {\n        assert.equal(results.length, 0);\n    }).then(() => {\n        return table.asQueryable(admin).where((expBuilder) => {\n            return expBuilder.property(\"string\").isEqualTo(\"Hello World!\");\n        }).toArrayAsync();\n    }).then((results) => {\n        assert.equal(results.length, 1);\n    });\n\n}"]}