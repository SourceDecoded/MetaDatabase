{"version":3,"sources":["../../src/tests/MetaDatabase.js"],"names":["path","user","admin","exports","hasCalledPrepareEdmAsync","metaDatabase","sqlite","edm","databasePath","decorators","prepareEdmAsync","initializeAsync","then","equal","prepareEntityToBeAddedAsyncCount","entityAddedAsyncCount","validateEntityToBeAddedAsyncCount","decorator","name","prepareEntityToBeAddedAsync","entity","options","option1","Promise","resolve","entityAddedAsync","validateEntityToBeAddedAsync","getTableAsync","table","addEntityAsync","string","integer","refineQueryableAsync","queryable","isAdmin","where","expBuilder","property","isEqualTo","t","asQueryable","toArrayAsync","results","length"],"mappings":"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","file":"MetaDatabase.js","sourcesContent":["import assert from \"assert\";\nimport MetaDatabase from \"./../MetaDatabase\";\nimport Database from \"./../sqlite/Database\";\nimport edm from \"./../mock/edm\";\nimport sqlite from \"sqlite\";\nimport GuestUser from \"./../GuestUser\";\nimport AdminUser from \"./../AdminUser\";\n\nlet path = \":memory:\";\nlet user = new GuestUser();\nlet admin = new AdminUser();\n\nexports[\"MetaDatabase: prepareEdmAsync\"] = () => {\n    let hasCalledPrepareEdmAsync = false;\n\n    let metaDatabase = new MetaDatabase({\n        sqlite: sqlite,\n        edm: edm,\n        databasePath: path,\n        decorators: [{\n            prepareEdmAsync: () => {\n                hasCalledPrepareEdmAsync = true;\n            }\n        }]\n    });\n\n    return metaDatabase.initializeAsync().then(() => {\n        assert.equal(hasCalledPrepareEdmAsync, true);\n    });\n\n}\n\nexports[\"MetaDatabase: prepareEntityToBeAddedAsync, entityAddedAsync, validateEntityToBeAddedAsync.\"] = () => {\n    let prepareEntityToBeAddedAsyncCount = 0;\n    let entityAddedAsyncCount = 0;\n    let validateEntityToBeAddedAsyncCount = 0;\n\n    let decorator = {\n        name: \"Test\",\n        prepareEntityToBeAddedAsync(user, entity, options) {\n            assert.equal(options.option1, true);\n            prepareEntityToBeAddedAsyncCount++;\n            return Promise.resolve();\n        },\n        entityAddedAsync(user, entity, options) {\n            assert.equal(options.option1, true);\n            entityAddedAsyncCount++;\n        },\n        validateEntityToBeAddedAsync(user, entity, options) {\n            assert.equal(options.option1, true);\n            validateEntityToBeAddedAsyncCount++;\n        }\n    };\n\n    let metaDatabase = new MetaDatabase({\n        sqlite: sqlite,\n        edm: edm,\n        databasePath: path,\n        decorators: [decorator]\n    });\n\n    return metaDatabase.getTableAsync(\"Source\").then((table) => {\n        return table.addEntityAsync(user, {\n            string: \"Hello World!\",\n            integer: 10\n        });\n    }).then(() => {\n        return metaDatabase.getTableAsync(\"Foreign\");\n    }).then((table) => {\n        return table.addEntityAsync(user, {\n            integer: 10\n        });\n    }).then(() => {\n        assert.equal(prepareEntityToBeAddedAsyncCount, 1);\n        assert.equal(entityAddedAsyncCount, 1);\n        assert.equal(validateEntityToBeAddedAsyncCount, 1);\n    });\n\n}\n\nexports[\"MetaDatabase: refineQueryable.\"] = () => {\n    let decorator = {\n        name: \"Test\",\n        refineQueryableAsync(user, queryable) {\n            if (user.isAdmin) {\n                return queryable;\n            } else {\n                return queryable.where((expBuilder) => {\n                    return expBuilder.property(\"number\").isEqualTo(2);\n                });\n            }\n        }\n    };\n\n    let metaDatabase = new MetaDatabase({\n        sqlite: sqlite,\n        edm: edm,\n        databasePath: path,\n        decorators: [decorator]\n    });\n\n    let table = null;\n\n    return metaDatabase.getTableAsync(\"Source\").then((t) => {\n        table = t;\n\n        return table.addEntityAsync(user, {\n            string: \"Hello World!\",\n            integer: 10\n        });\n    }).then(() => {\n        return table.asQueryable(user).where((expBuilder) => {\n            return expBuilder.property(\"string\").isEqualTo(\"Hello World!\");\n        }).toArrayAsync();\n    }).then((results) => {\n        assert.equal(results.length, 0);\n    }).then(() => {\n        return table.asQueryable(admin).where((expBuilder) => {\n            return expBuilder.property(\"string\").isEqualTo(\"Hello World!\");\n        }).toArrayAsync();\n    }).then((results) => {\n        assert.equal(results.length, 1);\n    });\n\n}"]}