{"version":3,"sources":["../../src/tests/sqlite.Migrator.js"],"names":["exports","queryBuilder","QueryBuilder","queryable","Queryable","where","expBuilder","property","isEqualTo","query","getQuery","sql","createStatement","equal","select","isIn","otherQueryable","startsWith"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;;;AAEAA,QAAQ,mCAAR,IAA+C,YAAM;;AAEjD,QAAIC,eAAe,IAAIC,YAAJ,eAAnB;AAEH,CAJD;;AAMAF,QAAQ,iCAAR,IAA6C,YAAM;;AAE/C,QAAIC,eAAe,IAAIC,YAAJ,eAAnB;AACA,QAAIC,YAAY,IAAIC,SAAJ,CAAc,QAAd,CAAhB;;AAEAD,gBAAYA,UAAUE,KAAV,CAAgB,UAACC,UAAD,EAAgB;AACxC,eAAOA,WAAWC,QAAX,CAAoB,QAApB,EAA8BC,SAA9B,CAAwC,aAAxC,CAAP;AACH,KAFW,CAAZ;;AAIA,QAAIC,QAAQN,UAAUO,QAAV,EAAZ;AACA,QAAIC,MAAMV,aAAaW,eAAb,CAA6BH,KAA7B,CAAV;;AAEA,qBAAOI,KAAP,CAAaF,GAAb;AACH,CAbD;;AAeAX,QAAQ,8BAAR,IAA0C,YAAM;;AAE5C,QAAIC,eAAe,IAAIC,YAAJ,eAAnB;AACA,QAAIC,YAAY,IAAIC,SAAJ,CAAc,QAAd,CAAhB;;AAEAD,gBAAYA,UAAUW,MAAV,CAAiB,CAAC,QAAD,CAAjB,EAA6BT,KAA7B,CAAmC,UAACC,UAAD,EAAgB;AAC3D,eAAOA,WAAWC,QAAX,CAAoB,QAApB,EAA8BC,SAA9B,CAAwC,aAAxC,CAAP;AACH,KAFW,CAAZ;;AAIA,QAAIC,QAAQN,UAAUO,QAAV,EAAZ;AACA,QAAIC,MAAMV,aAAaW,eAAb,CAA6BH,KAA7B,CAAV;;AAEA,qBAAOI,KAAP,CAAaF,GAAb;AACH,CAbD;;AAeAX,QAAQ,uCAAR,IAAmD,YAAM;;AAErD,QAAIC,eAAe,IAAIC,YAAJ,eAAnB;AACA,QAAIC,YAAY,IAAIC,SAAJ,CAAc,QAAd,CAAhB;;AAEAD,gBAAYA,UAAUE,KAAV,CAAgB,UAACC,UAAD,EAAgB;AACxC,eAAOA,WAAWC,QAAX,CAAoB,QAApB,EAA8BQ,IAA9B,CAAmC,CAAC,MAAD,EAAS,KAAT,CAAnC,CAAP;AACH,KAFW,CAAZ;;AAIA,QAAIN,QAAQN,UAAUO,QAAV,EAAZ;AACA,QAAIC,MAAMV,aAAaW,eAAb,CAA6BH,KAA7B,CAAV;;AAEA,qBAAOI,KAAP,CAAaF,GAAb;AACH,CAbD;;AAeAX,QAAQ,2CAAR,IAAuD,YAAM;;AAEzD,QAAIC,eAAe,IAAIC,YAAJ,eAAnB;AACA,QAAIC,YAAY,IAAIC,SAAJ,CAAc,QAAd,CAAhB;;AAEA,QAAIY,iBAAiB,IAAIZ,SAAJ,CAAc,cAAd,EAA8BU,MAA9B,CAAqC,CAAC,QAAD,CAArC,EAAiDT,KAAjD,CAAuD,UAACC,UAAD,EAAgB;AACxF,eAAOA,WAAWC,QAAX,CAAoB,QAApB,EAA8BU,UAA9B,CAAyC,GAAzC,CAAP;AACH,KAFoB,CAArB;;AAIAd,gBAAYA,UAAUE,KAAV,CAAgB,UAACC,UAAD,EAAgB;AACxC,eAAOA,WAAWC,QAAX,CAAoB,QAApB,EAA8BQ,IAA9B,CAAmCC,cAAnC,CAAP;AACH,KAFW,CAAZ;;AAIA,QAAIP,QAAQN,UAAUO,QAAV,EAAZ;AACA,QAAIC,MAAMV,aAAaW,eAAb,CAA6BH,KAA7B,CAAV;;AAEA,qBAAOI,KAAP,CAAaF,GAAb;AACH,CAjBD","file":"sqlite.Migrator.js","sourcesContent":["import assert from \"assert\";\nimport Migrator from \"./../sqlite/Migrator\";\nimport edm from \"./../mock/edm\";\n\nexports[\"sqlite.QueryBuilder: Constructor.\"] = () => {\n\n    let queryBuilder = new QueryBuilder(edm);\n\n}\n\nexports[\"sqlite.QueryBuilder: IsEqualTo.\"] = () => {\n\n    let queryBuilder = new QueryBuilder(edm);\n    let queryable = new Queryable(\"Source\");\n\n    queryable = queryable.where((expBuilder) => {\n        return expBuilder.property(\"string\").isEqualTo(\"Hello World\");\n    });\n\n    let query = queryable.getQuery();\n    let sql = queryBuilder.createStatement(query);\n\n    assert.equal(sql, `SELECT * FROM \"Source\" WHERE \"Source\".\"string\" = 'Hello World' LIMIT -1 OFFSET 0`);\n}\n\nexports[\"sqlite.QueryBuilder: Select.\"] = () => {\n\n    let queryBuilder = new QueryBuilder(edm);\n    let queryable = new Queryable(\"Source\");\n\n    queryable = queryable.select([\"string\"]).where((expBuilder) => {\n        return expBuilder.property(\"string\").isEqualTo(\"Hello World\");\n    });\n\n    let query = queryable.getQuery();\n    let sql = queryBuilder.createStatement(query);\n\n    assert.equal(sql, `SELECT \"string\" AS \"string\" FROM \"Source\" WHERE \"Source\".\"string\" = 'Hello World' LIMIT -1 OFFSET 0`);\n}\n\nexports[\"sqlite.QueryBuilder: isIn with array.\"] = () => {\n\n    let queryBuilder = new QueryBuilder(edm);\n    let queryable = new Queryable(\"Source\");\n\n    queryable = queryable.where((expBuilder) => {\n        return expBuilder.property(\"string\").isIn([\"John\", \"Doe\"]);\n    });\n\n    let query = queryable.getQuery();\n    let sql = queryBuilder.createStatement(query);\n\n    assert.equal(sql, `SELECT * FROM \"Source\" WHERE \"Source\".\"string\" IN ('John', 'Doe') LIMIT -1 OFFSET 0`);\n}\n\nexports[\"sqlite.QueryBuilder: isIn with queryable.\"] = () => {\n\n    let queryBuilder = new QueryBuilder(edm);\n    let queryable = new Queryable(\"Source\");\n\n    let otherQueryable = new Queryable(\"OtherForeign\").select([\"string\"]).where((expBuilder) => {\n        return expBuilder.property(\"string\").startsWith(\"J\");\n    });\n\n    queryable = queryable.where((expBuilder) => {\n        return expBuilder.property(\"string\").isIn(otherQueryable);\n    });\n\n    let query = queryable.getQuery();\n    let sql = queryBuilder.createStatement(query);\n\n    assert.equal(sql, `SELECT * FROM \"Source\" WHERE \"Source\".\"string\" IN (SELECT \"string\" AS \"string\" FROM \"OtherForeign\" WHERE \"OtherForeign\".\"string\" LIKE 'J%' LIMIT -1 OFFSET 0) LIMIT -1 OFFSET 0`);\n}"]}