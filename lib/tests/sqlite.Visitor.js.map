{"version":3,"sources":["../../src/tests/sqlite.Visitor.js"],"names":["exports","visitor","queryable","where","expBuilder","property","isEqualTo","query","getQuery","statement","createSelectStatement","equal","include"],"mappings":";;AAAA;;;;AACA;;;;AACA;;AACA;;;;;;AAEAA,QAAQ,8BAAR,IAA0C,YAAM;;AAE5C,QAAIC,UAAU,sBAAY,QAAZ,gBAAd;AAEH,CAJD;;AAMAD,QAAQ,4BAAR,IAAwC,YAAM;;AAE1C,QAAIC,UAAU,sBAAY,QAAZ,gBAAd;AACA,QAAIC,YAAY,2BAAc,QAAd,CAAhB;;AAEAA,gBAAYA,UAAUC,KAAV,CAAgB,UAACC,UAAD,EAAgB;AACxC,eAAOA,WAAWC,QAAX,CAAoB,QAApB,EAA8BC,SAA9B,CAAwC,aAAxC,CAAP;AACH,KAFW,CAAZ;;AAIA,QAAIC,QAAQL,UAAUM,QAAV,EAAZ;;AAEA,QAAIC,YAAYR,QAAQS,qBAAR,CAA8BH,KAA9B,CAAhB;;AAEA,qBAAOI,KAAP,CAAaF,SAAb,EAAwB,uTAAxB;AACH,CAdD;;AAgBAT,QAAQ,oEAAR,IAAgF,YAAM;;AAElF,QAAIC,UAAU,sBAAY,QAAZ,gBAAd;AACA,QAAIC,YAAY,2BAAc,QAAd,CAAhB;;AAEAA,gBAAYA,UAAUC,KAAV,CAAgB,UAACC,UAAD,EAAgB;AACxC,eAAOA,WAAWC,QAAX,CAAoB,WAApB,EAAiCA,QAAjC,CAA0C,QAA1C,EAAoDC,SAApD,CAA8D,aAA9D,CAAP;AACH,KAFW,CAAZ;;AAIA,QAAIC,QAAQL,UAAUM,QAAV,EAAZ;;AAEA,QAAIC,YAAYR,QAAQS,qBAAR,CAA8BH,KAA9B,CAAhB;;AAEA,qBAAOI,KAAP,CAAaF,SAAb,EAAwB,qYAAxB;AACH,CAdD;;AAgBAT,QAAQ,wCAAR,IAAoD,YAAM;;AAEtD,QAAIC,UAAU,sBAAY,QAAZ,gBAAd;AACA,QAAIC,YAAY,2BAAc,QAAd,CAAhB;;AAEAA,gBAAYA,UAAUC,KAAV,CAAgB,UAACC,UAAD,EAAgB;AACxC,eAAOA,WAAWC,QAAX,CAAoB,QAApB,EAA8BC,SAA9B,CAAwC,aAAxC,CAAP;AACH,KAFW,EAETM,OAFS,CAED,UAACR,UAAD,EAAgB;AACvB,eAAOA,WAAWC,QAAX,CAAoB,WAApB,CAAP;AACH,KAJW,CAAZ;;AAMA,QAAIE,QAAQL,UAAUM,QAAV,EAAZ;;AAEA,QAAIC,YAAYR,QAAQS,qBAAR,CAA8BH,KAA9B,CAAhB;;AAEA,qBAAOI,KAAP,CAAaF,SAAb,EAAwB,2hBAAxB;AACH,CAhBD","file":"sqlite.Visitor.js","sourcesContent":["import assert from \"assert\";\nimport Visitor from \"./../sqlite/Visitor\";\nimport { Queryable } from \"queryablejs\";\nimport edm from \"./../mock/edm\";\n\nexports[\"sqlite.Visitor: Constructor.\"] = () => {\n\n    let visitor = new Visitor(\"Source\", edm);\n\n}\n\nexports[\"sqlite.Visitor: IsEqualTo.\"] = () => {\n\n    let visitor = new Visitor(\"Source\", edm);\n    let queryable = new Queryable(\"Source\");\n\n    queryable = queryable.where((expBuilder) => {\n        return expBuilder.property(\"string\").isEqualTo(\"Hello World\");\n    });\n\n    let query = queryable.getQuery();\n\n    let statement = visitor.createSelectStatement(query);\n\n    assert.equal(statement, 'SELECT \"Source\".\"id\" AS \"Source___id\", \"Source\".\"string\" AS \"Source___string\", \"Source\".\"number\" AS \"Source___number\", \"Source\".\"date\" AS \"Source___date\", \"Source\".\"boolean\" AS \"Source___boolean\", \"Source\".\"float\" AS \"Source___float\" FROM \"Source\" WHERE (\"Source\".\"string\" = \\'Hello World\\') LIMIT -1 OFFSET 0');\n}\n\nexports[\"sqlite.Visitor: Query nested object but don't bring back the data.\"] = () => {\n\n    let visitor = new Visitor(\"Source\", edm);\n    let queryable = new Queryable(\"Source\");\n\n    queryable = queryable.where((expBuilder) => {\n        return expBuilder.property(\"foreigner\").property(\"string\").isEqualTo(\"Hello World\");\n    });\n\n    let query = queryable.getQuery();\n\n    let statement = visitor.createSelectStatement(query);\n\n    assert.equal(statement, 'SELECT \"Source\".\"id\" AS \"Source___id\", \"Source\".\"string\" AS \"Source___string\", \"Source\".\"number\" AS \"Source___number\", \"Source\".\"date\" AS \"Source___date\", \"Source\".\"boolean\" AS \"Source___boolean\", \"Source\".\"float\" AS \"Source___float\" FROM \"Source\" LEFT JOIN \"OtherForeign\" ON \"Source\".\"id\" = \"OtherForeign\".\"foreignKey\" WHERE (\"OtherForeign\".\"string\" = \\'Hello World\\') LIMIT -1 OFFSET 0');\n}\n\nexports[\"sqlite.Visitor: Include nested object.\"] = () => {\n\n    let visitor = new Visitor(\"Source\", edm);\n    let queryable = new Queryable(\"Source\");\n\n    queryable = queryable.where((expBuilder) => {\n        return expBuilder.property(\"string\").isEqualTo(\"Hello World\");\n    }).include((expBuilder) => {\n        return expBuilder.property(\"foreigner\");\n    });\n\n    let query = queryable.getQuery();\n\n    let statement = visitor.createSelectStatement(query);\n\n    assert.equal(statement, 'SELECT \"Source\".\"id\" AS \"Source___id\", \"Source\".\"string\" AS \"Source___string\", \"Source\".\"number\" AS \"Source___number\", \"Source\".\"date\" AS \"Source___date\", \"Source\".\"boolean\" AS \"Source___boolean\", \"Source\".\"float\" AS \"Source___float\", \"OtherForeign\".\"id\" AS \"OtherForeign___id\", \"OtherForeign\".\"foreignKey\" AS \"OtherForeign___foreignKey\", \"OtherForeign\".\"string\" AS \"OtherForeign___string\" FROM \"Source\" LEFT JOIN \"OtherForeign\" ON \"Source\".\"id\" = \"OtherForeign\".\"foreignKey\" WHERE (\"Source\".\"string\" = \\'Hello World\\') LIMIT -1 OFFSET 0');\n}"]}