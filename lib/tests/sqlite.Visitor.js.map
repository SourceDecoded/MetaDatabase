{"version":3,"sources":["../../src/tests/sqlite.Visitor.js"],"names":["exports","visitor","queryable","where","expBuilder","property","isEqualTo","query","getQuery","sql","createSql","equal","select","isIn","otherQueryable","startsWith"],"mappings":";;AAAA;;;;AACA;;;;AACA;;AACA;;;;;;AAEAA,QAAQ,8BAAR,IAA0C,YAAM;;AAE5C,QAAIC,UAAU,sBAAY,QAAZ,gBAAd;AAEH,CAJD;;AAMAD,QAAQ,4BAAR,IAAwC,YAAM;;AAE1C,QAAIC,UAAU,sBAAY,QAAZ,gBAAd;AACA,QAAIC,YAAY,2BAAc,QAAd,CAAhB;;AAEAA,gBAAYA,UAAUC,KAAV,CAAgB,UAACC,UAAD,EAAgB;AACxC,eAAOA,WAAWC,QAAX,CAAoB,QAApB,EAA8BC,SAA9B,CAAwC,aAAxC,CAAP;AACH,KAFW,CAAZ;;AAIA,QAAIC,QAAQL,UAAUM,QAAV,EAAZ;AACA,QAAIC,MAAMR,QAAQS,SAAR,CAAkBH,KAAlB,CAAV;;AAEA,qBAAOI,KAAP,CAAaF,GAAb;AACH,CAbD;;AAeAT,QAAQ,yBAAR,IAAqC,YAAM;;AAEvC,QAAIC,UAAU,sBAAY,QAAZ,gBAAd;AACA,QAAIC,YAAY,2BAAc,QAAd,CAAhB;;AAEAA,gBAAYA,UAAUU,MAAV,CAAiB,CAAC,QAAD,CAAjB,EAA6BT,KAA7B,CAAmC,UAACC,UAAD,EAAgB;AAC3D,eAAOA,WAAWC,QAAX,CAAoB,QAApB,EAA8BC,SAA9B,CAAwC,aAAxC,CAAP;AACH,KAFW,CAAZ;;AAIA,QAAIC,QAAQL,UAAUM,QAAV,EAAZ;AACA,QAAIC,MAAMR,QAAQS,SAAR,CAAkBH,KAAlB,CAAV;AAEH,CAZD;;AAcAP,QAAQ,kCAAR,IAA8C,YAAM;;AAEhD,QAAIC,UAAU,sBAAY,QAAZ,gBAAd;AACA,QAAIC,YAAY,2BAAc,QAAd,CAAhB;;AAEAA,gBAAYA,UAAUC,KAAV,CAAgB,UAACC,UAAD,EAAgB;AACxC,eAAOA,WAAWC,QAAX,CAAoB,QAApB,EAA8BQ,IAA9B,CAAmC,CAAC,MAAD,EAAS,KAAT,CAAnC,CAAP;AACH,KAFW,CAAZ;;AAIA,QAAIN,QAAQL,UAAUM,QAAV,EAAZ;AACA,QAAIC,MAAMR,QAAQS,SAAR,CAAkBH,KAAlB,CAAV;AAEH,CAZD;;AAcAP,QAAQ,sCAAR,IAAkD,YAAM;;AAEpD,QAAIC,UAAU,sBAAY,QAAZ,gBAAd;AACA,QAAIC,YAAY,2BAAc,QAAd,CAAhB;AACA,QAAIY,iBAAiB,2BAAc,cAAd,EAA8BF,MAA9B,CAAqC,CAAC,QAAD,CAArC,EAAiDT,KAAjD,CAAuD,UAACC,UAAD,EAAgB;AACxF,eAAOA,WAAWC,QAAX,CAAoB,QAApB,EAA8BU,UAA9B,CAAyC,GAAzC,CAAP;AACH,KAFoB,CAArB;;AAKAb,gBAAYA,UAAUC,KAAV,CAAgB,UAACC,UAAD,EAAgB;AACxC,eAAOA,WAAWC,QAAX,CAAoB,QAApB,EAA8BQ,IAA9B,CAAmCC,cAAnC,CAAP;AACH,KAFW,CAAZ;;AAIA,QAAIP,QAAQL,UAAUM,QAAV,EAAZ;AACA,QAAIC,MAAMR,QAAQS,SAAR,CAAkBH,KAAlB,CAAV;AAEH,CAhBD","file":"sqlite.Visitor.js","sourcesContent":["import assert from \"assert\";\nimport Visitor from \"./../sqlite/Visitor\";\nimport { Queryable } from \"queryablejs\";\nimport edm from \"./../mock/edm\";\n\nexports[\"sqlite.Visitor: Constructor.\"] = () => {\n\n    let visitor = new Visitor(\"Source\", edm);\n\n}\n\nexports[\"sqlite.Visitor: IsEqualTo.\"] = () => {\n\n    let visitor = new Visitor(\"Source\", edm);\n    let queryable = new Queryable(\"Source\");\n\n    queryable = queryable.where((expBuilder) => {\n        return expBuilder.property(\"string\").isEqualTo(\"Hello World\");\n    });\n\n    let query = queryable.getQuery();\n    let sql = visitor.createSql(query);\n\n    assert.equal(sql, `SELECT * FROM \"Source\" WHERE (\"Source\".\"string\" = 'Hello World') OFFSET 0 LIMIT -1`);\n}\n\nexports[\"sqlite.Visitor: Select.\"] = () => {\n\n    let visitor = new Visitor(\"Source\", edm);\n    let queryable = new Queryable(\"Source\");\n\n    queryable = queryable.select([\"string\"]).where((expBuilder) => {\n        return expBuilder.property(\"string\").isEqualTo(\"Hello World\");\n    });\n\n    let query = queryable.getQuery();\n    let sql = visitor.createSql(query);\n\n}\n\nexports[\"sqlite.Visitor: isIn with array.\"] = () => {\n\n    let visitor = new Visitor(\"Source\", edm);\n    let queryable = new Queryable(\"Source\");\n\n    queryable = queryable.where((expBuilder) => {\n        return expBuilder.property(\"string\").isIn([\"John\", \"Doe\"]);\n    });\n\n    let query = queryable.getQuery();\n    let sql = visitor.createSql(query);\n\n}\n\nexports[\"sqlite.Visitor: isIn with queryable.\"] = () => {\n\n    let visitor = new Visitor(\"Source\", edm);\n    let queryable = new Queryable(\"Source\");\n    let otherQueryable = new Queryable(\"OtherForeign\").select([\"string\"]).where((expBuilder) => {\n        return expBuilder.property(\"string\").startsWith(\"J\");\n    });\n\n\n    queryable = queryable.where((expBuilder) => {\n        return expBuilder.property(\"string\").isIn(otherQueryable);\n    });\n\n    let query = queryable.getQuery();\n    let sql = visitor.createSql(query);\n\n}"]}