{"version":3,"sources":["../../src/tests/edm.Validator.js"],"names":["exports","validator","throws","validate","name","label","version","table","tables","pluralLabel","columns","relationships","oneToOne","oneToMany","type","isPrimaryKey","hasKey"],"mappings":"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","file":"edm.Validator.js","sourcesContent":["import assert from \"assert\";\nimport EdmValidator from \"./../edm/Validator\";\n\nexports[\"EdmValidator.validate: Empty.\"] = () => {\n    let validator = new EdmValidator();\n\n    assert.throws(() => {\n        validator.validate();\n    }, /Invalid Argument: Edm cannot be null/);\n}\n\nexports[\"EdmValidator.validate: Bad edm name.\"] = () => {\n    let validator = new EdmValidator();\n\n    assert.throws(() => {\n        validator.validate({\n            name: {}\n        });\n    }, /Invalid Argument: Edm needs to have a name of type string/);\n}\n\nexports[\"EdmValidator.validate: Bad edm label.\"] = () => {\n    let validator = new EdmValidator();\n\n    assert.throws(() => {\n        validator.validate({\n            name: \"edm\",\n            label: {}\n        });\n    }, /Invalid Argument: Edm needs to have a label of type string/);\n}\n\nexports[\"EdmValidator.validate: Bad edm version.\"] = () => {\n    let validator = new EdmValidator();\n\n    assert.throws(() => {\n        validator.validate({\n            name: \"edm\",\n            label: \"Edm\",\n            version: {}\n        });\n    }, /Invalid Argument: Edm needs to have a version of type string/);\n}\n\nexports[\"EdmValidator.validate: Bad edm tables.\"] = () => {\n    let validator = new EdmValidator();\n\n    assert.throws(() => {\n        validator.validate({\n            name: \"edm\",\n            label: \"Edm\",\n            version: \"0.0.1\",\n            table: {}\n        });\n    }, /Invalid Argument: Edm needs an array of tables/);\n}\n\nexports[\"EdmValidator.validate: A null table.\"] = () => {\n    let validator = new EdmValidator();\n\n    assert.throws(() => {\n        validator.validate({\n            name: \"edm\",\n            label: \"Edm\",\n            version: \"0.0.1\",\n            tables: [null]\n        });\n    }, /Invalid Argument: Table cannot be null or undefined/);\n}\n\nexports[\"EdmValidator.validate: An invalid table as an array.\"] = () => {\n    let validator = new EdmValidator();\n\n    assert.throws(() => {\n        validator.validate({\n            name: \"edm\",\n            label: \"Edm\",\n            version: \"0.0.1\",\n            tables: [[]]\n        });\n    }, /Invalid Argument: Table needs to be an object/);\n}\n\nexports[\"EdmValidator.validate: An invalid table name.\"] = () => {\n    let validator = new EdmValidator();\n\n    assert.throws(() => {\n        validator.validate({\n            name: \"edm\",\n            label: \"Edm\",\n            version: \"0.0.1\",\n            tables: [{\n                name: {}\n            }]\n        });\n    }, /Invalid Argument: Table needs to have a name/);\n}\n\nexports[\"EdmValidator.validate: An invalid table label.\"] = () => {\n    let validator = new EdmValidator();\n\n    assert.throws(() => {\n        validator.validate({\n            name: \"edm\",\n            label: \"Edm\",\n            version: \"0.0.1\",\n            tables: [{\n                name: \"table\",\n                label: {}\n            }]\n        });\n    }, /Invalid Argument: Table needs to have a label/);\n}\n\nexports[\"EdmValidator.validate: An invalid table pluralLabel.\"] = () => {\n    let validator = new EdmValidator();\n\n    assert.throws(() => {\n        validator.validate({\n            name: \"edm\",\n            label: \"Edm\",\n            version: \"0.0.1\",\n            tables: [{\n                name: \"table\",\n                label: \"Table\",\n                pluralLabel: {}\n            }]\n        });\n    }, /Invalid Argument: Table needs to have a pluralLabel/);\n}\n\nexports[\"EdmValidator.validate: An invalid columns.\"] = () => {\n    let validator = new EdmValidator();\n\n    assert.throws(() => {\n        validator.validate({\n            name: \"edm\",\n            label: \"Edm\",\n            version: \"0.0.1\",\n            tables: [{\n                name: \"table\",\n                label: \"Table\",\n                pluralLabel: \"Tables\",\n                columns: null\n            }]\n        });\n    }, /Invalid Argument: Table needs to have an array of columns/);\n}\n\nexports[\"EdmValidator.validate: Valid empty column table.\"] = () => {\n    let validator = new EdmValidator();\n\n    validator.validate({\n        name: \"edm\",\n        label: \"Edm\",\n        version: \"0.0.1\",\n        tables: [{\n            name: \"table\",\n            label: \"Table\",\n            pluralLabel: \"Tables\",\n            columns: []\n        }],\n        relationships: {\n            oneToOne: [],\n            oneToMany: []\n        }\n    });\n}\n\nexports[\"EdmValidator.validate: Invalid column name.\"] = () => {\n    let validator = new EdmValidator();\n    assert.throws(() => {\n        validator.validate({\n            name: \"edm\",\n            label: \"Edm\",\n            version: \"0.0.1\",\n            tables: [{\n                name: \"table\",\n                label: \"Table\",\n                pluralLabel: \"Tables\",\n                columns: [{\n                    name: {}\n                }]\n            }],\n            relationships: {\n                oneToOne: [],\n                oneToMany: []\n            }\n        });\n    }, /Invalid Argument: Column needs to have a name/);\n\n}\n\nexports[\"EdmValidator.validate: Invalid column label.\"] = () => {\n    let validator = new EdmValidator();\n    assert.throws(() => {\n        validator.validate({\n            name: \"edm\",\n            label: \"Edm\",\n            version: \"0.0.1\",\n            tables: [{\n                name: \"table\",\n                label: \"Table\",\n                pluralLabel: \"Tables\",\n                columns: [{\n                    name: \"column\",\n                    label: {}\n                }]\n            }],\n            relationships: {\n                oneToOne: [],\n                oneToMany: []\n            }\n        });\n    }, /Invalid Argument: Column needs to hava a label/);\n\n}\n\nexports[\"EdmValidator.validate: Invalid table with no primary key.\"] = () => {\n    let validator = new EdmValidator();\n    assert.throws(() => {\n        validator.validate({\n            name: \"edm\",\n            label: \"Edm\",\n            version: \"0.0.1\",\n            tables: [{\n                name: \"table\",\n                label: \"Table\",\n                pluralLabel: \"Tables\",\n                columns: [{\n                    type: \"Integer\",\n                    name: \"column\"\n                }]\n            }],\n            relationships: {\n                oneToOne: [],\n                oneToMany: []\n            }\n        });\n    }, /Invalid Argument: Tables can only have one primary key/);\n\n}\n\nexports[\"EdmValidator.validate: Valid table with valid columns.\"] = () => {\n    let validator = new EdmValidator();\n    validator.validate({\n        name: \"edm\",\n        label: \"Edm\",\n        version: \"0.0.1\",\n        tables: [{\n            name: \"table\",\n            label: \"Table\",\n            pluralLabel: \"Tables\",\n            columns: [{\n                type: \"Integer\",\n                name: \"column\",\n                label: \"Column\",\n                isPrimaryKey: true\n            }, {\n                type: \"String\",\n                name: \"column1\",\n                label: \"Column1\"\n            }]\n        }],\n        relationships: {\n            oneToOne: [],\n            oneToMany: []\n        }\n    });\n\n}\n\nexports[\"EdmValidator.validate: Invalid table with no primary key.\"] = () => {\n    let validator = new EdmValidator();\n    assert.throws(() => {\n        validator.validate({\n            name: \"edm\",\n            label: \"Edm\",\n            version: \"0.0.1\",\n            tables: [{\n                name: \"table\",\n                label: \"Table\",\n                pluralLabel: \"Tables\",\n                columns: [{\n                    type: \"String\",\n                    name: \"column\",\n                    label: \"Identifier\",\n                    isPrimaryKey: true\n                }]\n            }],\n            relationships: {\n                oneToOne: [],\n                oneToMany: []\n            }\n        });\n    }, /Invalid Argument: If the column is the primary key, it needs to be of type Integer/);\n\n}\n\nexports[\"EdmValidator.validate: Invalid oneToOne type.\"] = () => {\n    let validator = new EdmValidator();\n    assert.throws(() => {\n        validator.validate({\n            name: \"edm\",\n            label: \"Edm\",\n            version: \"0.0.1\",\n            tables: [],\n            relationships: {\n                oneToOne: [{\n                    type: {},\n                }],\n                oneToMany: []\n            }\n        });\n    }, /Invalid Argument: One to one relationships needs to have a type property/);\n\n}\n\nexports[\"EdmValidator.validate: Invalid oneToOne hasKey.\"] = () => {\n    let validator = new EdmValidator();\n    assert.throws(() => {\n        validator.validate({\n            name: \"edm\",\n            label: \"Edm\",\n            version: \"0.0.1\",\n            tables: [],\n            relationships: {\n                oneToOne: [{\n                    type: \"String\",\n                    hasKey: {}\n                }],\n                oneToMany: []\n            }\n        });\n    }, /Invalid Argument: One to one relationships needs to have a hasKey property/);\n\n}"]}