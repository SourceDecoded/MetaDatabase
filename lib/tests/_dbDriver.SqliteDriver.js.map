{"version":3,"sources":["../../src/tests/_dbDriver.SqliteDriver.js"],"names":["fileConfig","memoryConfig","exports","driver","getEdmDbAsync","then","db","catch","e","fail","dispose","getDataDbAsync","getEdmListAsync","edms","length"],"mappings":";;AAAA;;;;AACA;;;;;;AAEA,IAAIA,aAAa;AACb,mBAAe,MADF;AAEb,YAAQ,EAFK;AAGb,aAAS,YAHI;AAIb,cAAU;AAJG,CAAjB;;AAOA,IAAIC,eAAe;AACf,mBAAe;AADA,CAAnB;;AAIAC,QAAQ,6BAAR,IAAyC,YAAM;AAC3C,QAAIC,SAAS,2BAAiBF,YAAjB,CAAb;AACA,0BAAOE,MAAP;AACH,CAHD;;AAKAD,QAAQ,4BAAR,IAAwC,YAAM;AAC1C,QAAIC,SAAS,2BAAiBF,YAAjB,CAAb;AACAE,WAAOC,aAAP,GAAuBC,IAAvB,CAA4B,UAACC,EAAD,EAAQ;AAChC,8BAAOA,EAAP;AACH,KAFD,EAEGC,KAFH,CAES,UAACC,CAAD,EAAO;AACZ,yBAAOC,IAAP,CAAYD,CAAZ;AACH,KAJD,EAIGH,IAJH,CAIQ,YAAM;AACVF,eAAOO,OAAP;AACH,KAND;AAOH,CATD;;AAWAR,QAAQ,6BAAR,IAAyC,YAAM;AAC3C,QAAIC,SAAS,2BAAiBF,YAAjB,CAAb;AACAE,WAAOQ,cAAP,GAAwBN,IAAxB,CAA6B,UAACC,EAAD,EAAQ;AACjC,8BAAOA,EAAP;AACH,KAFD,EAEGC,KAFH,CAES,UAACC,CAAD,EAAO;AACZ,yBAAOC,IAAP,CAAYD,CAAZ;AACH,KAJD,EAIGH,IAJH,CAIQ,YAAM;AACVF,eAAOO,OAAP;AACH,KAND;AAOH,CATD;;AAWAR,QAAQ,8BAAR,IAA0C,YAAM;AAC5C,QAAIC,SAAS,2BAAiBF,YAAjB,CAAb;AACAE,WAAOS,eAAP,GAAyBP,IAAzB,CAA8B,UAACQ,IAAD,EAAU;AACpC,8BAAO,OAAOA,KAAKC,MAAZ,KAAuB,WAA9B;AACH,KAFD,EAEGP,KAFH,CAES,UAACC,CAAD,EAAO;AACZ,yBAAOC,IAAP,CAAYD,CAAZ;AACH,KAJD,EAIGH,IAJH,CAIQ,YAAM;AACVF,eAAOO,OAAP;AACH,KAND;AAOH,CATD","file":"_dbDriver.SqliteDriver.js","sourcesContent":["import assert from \"assert\";\nimport SqliteDriver from \"../dbDriver/SqliteDriver\";\n\nlet fileConfig = {\n    \"storageMode\": \"file\",\n    \"path\": \"\",\n    \"edmDb\": \"edm.sqlite\",\n    \"dataDb\": \"data.sqlite\"\n};\n\nlet memoryConfig = {\n    \"storageMode\": \"memory\"\n};\n\nexports[\"SqliteDriver in memory mode\"] = () => {\n    let driver = new SqliteDriver(memoryConfig);\n    assert(driver);\n};\n\nexports[\"SqliteDriver.getEdmDbAsync\"] = () => {\n    let driver = new SqliteDriver(memoryConfig);\n    driver.getEdmDbAsync().then((db) => {\n        assert(db);\n    }).catch((e) => {\n        assert.fail(e);\n    }).then(() => {\n        driver.dispose();\n    });\n};\n\nexports[\"SqliteDriver.getDataDbAsync\"] = () => {\n    let driver = new SqliteDriver(memoryConfig);\n    driver.getDataDbAsync().then((db) => {\n        assert(db);\n    }).catch((e) => {\n        assert.fail(e);\n    }).then(() => {\n        driver.dispose();\n    });\n};\n\nexports[\"SqliteDriver.getEdmListAsync\"] = () => {\n    let driver = new SqliteDriver(memoryConfig);\n    driver.getEdmListAsync().then((edms) => {\n        assert(typeof edms.length !== \"undefined\");\n    }).catch((e) => {\n        assert.fail(e);\n    }).then(() => {\n        driver.dispose();\n    });\n};\n\n"]}