{"version":3,"sources":["../../src/tests/Table.js"],"names":["exports","table","edm","sqlite","run","statement","values","equal","Promise","resolve","lastID","addEntityAsync","string","exec","createAsync"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;;;AAEAA,QAAQ,uBAAR,IAAmC,YAAM;AACrC,QAAIC,QAAQ,oBAAU,QAAV,EAAoB;AAC5BC,0BAD4B;AAE5BC,gBAAQ;AACJC,iBAAK,aAACC,SAAD,EAAYC,MAAZ,EAAuB;AACxB,iCAAOC,KAAP,CAAaF,SAAb,EAAwB,4CAAxB;AACA,iCAAOE,KAAP,CAAaD,OAAO,CAAP,CAAb,EAAwB,aAAxB;;AAEA,uBAAOE,QAAQC,OAAR,CAAgB,EAAEC,QAAQ,CAAV,EAAhB,CAAP;AACH;AANG;AAFoB,KAApB,CAAZ;;AAYAT,UAAMU,cAAN,CAAqB,EAAEC,QAAQ,aAAV,EAArB;AACH,CAdD;;AAgBAZ,QAAQ,2CAAR,IAAuD,YAAM;AACzD,QAAIC,QAAQ,oBAAU,QAAV,EAAoB;AAC5BC,0BAD4B;AAE5BC,gBAAQ;AACJU,kBAAM,cAACR,SAAD,EAAYC,MAAZ,EAAuB;AACzB,iCAAOC,KAAP,CAAaF,SAAb,EAAwB,mNAAxB;AACA,uBAAOG,QAAQC,OAAR,CAAgB,IAAhB,CAAP;AACH;AAJG;AAFoB,KAApB,CAAZ;;AAUAR,UAAMa,WAAN;AACH,CAZD;;AAcAd,QAAQ,2CAAR,IAAuD,YAAM;AACzD,QAAIC,QAAQ,oBAAU,SAAV,EAAqB;AAC7BC,0BAD6B;AAE7BC,gBAAQ;AACJU,kBAAM,cAACR,SAAD,EAAYC,MAAZ,EAAuB;AACzB,iCAAOC,KAAP,CACIF,SADJ,EAEI,oRAFJ;AAIA,uBAAOG,QAAQC,OAAR,CAAgB,IAAhB,CAAP;AACH;AAPG;AAFqB,KAArB,CAAZ;;AAaAR,UAAMa,WAAN;AACH,CAfD","file":"Table.js","sourcesContent":["import assert from \"assert\";\nimport Table from \"./../sqlite/Table\";\nimport edm from \"./../mock/edm\";\n\nexports[\"Table: addEntityAsync\"] = () => {\n    var table = new Table(\"Source\", {\n        edm: edm,\n        sqlite: {\n            run: (statement, values) => {\n                assert.equal(statement, 'INSERT INTO \"Source\" (\"string\") VALUES (?)');\n                assert.equal(values[0], \"Hello World\");\n\n                return Promise.resolve({ lastID: 1 });\n            }\n        }\n    });\n\n    table.addEntityAsync({ string: \"Hello World\" });\n};\n\nexports[\"Table.createAsync: Create a Source Table.\"] = () => {\n    var table = new Table(\"Source\", {\n        edm: edm,\n        sqlite: {\n            exec: (statement, values) => {\n                assert.equal(statement, 'CREATE TABLE IF NOT EXISTS \"Source\" (\"id\" INTEGER PRIMARY KEY AUTOINCREMENT, \"string\" TEXT, \"number\" NUMERIC, \"date\" NUMERIC, \"boolean\" NUMERIC, \"float\" REAL);CREATE INDEX IF NOT EXISTS \"id\" ON \"Source\" (\"id\")');\n                return Promise.resolve(null);\n            }\n        }\n    });\n\n    table.createAsync();\n};\n\nexports[\"Table.createAsync: Create a Target Table.\"] = () => {\n    var table = new Table(\"Foreign\", {\n        edm: edm,\n        sqlite: {\n            exec: (statement, values) => {\n                assert.equal(\n                    statement,\n                    'CREATE TABLE IF NOT EXISTS \"Foreign\" (\"id\" INTEGER PRIMARY KEY AUTOINCREMENT, \"foreignKey\" INTEGER, FOREIGN KEY (\"foreignKey\") REFERENCES \"Source\" (\"id\"));CREATE INDEX IF NOT EXISTS \"id\" ON \"Foreign\" (\"id\");CREATE INDEX IF NOT EXISTS \"foreignKey\" ON \"Foreign\" (\"foreignKey\")'\n                );\n                return Promise.resolve(null);\n            }\n        }\n    });\n\n    table.createAsync();\n};"]}