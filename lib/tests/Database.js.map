{"version":3,"sources":["../../src/tests/Database.js"],"names":["exports","open","then","db","database","edm","sqlite","buildOrder","_getTableBuildOrder","createAsync","table","getTable","addEntityAsync","string","integer","entity","equal","id","asQueryable","where","expBuilder","property","isEqualTo","toArrayAsync","result","updateEntityAsync","results","length","removeEntityAsync"],"mappings":"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","file":"Database.js","sourcesContent":["import assert from \"assert\";\nimport Database from \"./../sqlite/Database\";\nimport edm from \"./../mock/edm\";\nimport sqlite from \"sqlite\";\n\nexports[\"Database._getTableBuildOrder\"] = () => {\n\n    sqlite.open(\":memory:\").then((db) => {\n        var database = new Database({\n            edm: edm,\n            sqlite: sqlite\n        });\n\n        let buildOrder = database._getTableBuildOrder();\n    });\n\n};\n\n\nexports[\"Database.createAsync\"] = () => {\n\n    return sqlite.open(\":memory:\").then((db) => {\n        var database = new Database({\n            edm: edm,\n            sqlite: sqlite\n        });\n\n        return database.createAsync();\n    });\n\n};\n\nexports[\"Database.addEntityAsync\"] = () => {\n\n    return sqlite.open(\":memory:\").then((db) => {\n        var database = new Database({\n            edm: edm,\n            sqlite: sqlite\n        });\n\n        let table = database.getTable(\"Source\");\n        return database.createAsync().then(() => {\n            return table.addEntityAsync({\n                string: \"Hello World\",\n                integer: 1\n            });\n        }).then((entity) => {\n            assert.equal(entity.id, 1);\n            return table.asQueryable().where((expBuilder)=>{\n                return expBuilder.property(\"string\").isEqualTo(\"Hello World\");\n            }).toArrayAsync();\n        }).then((result)=>{ \n            \n        });\n    });\n\n};\n\nexports[\"Database.updateEntityAsync\"] = () => {\n\n    return sqlite.open(\":memory:\").then((db) => {\n        var database = new Database({\n            edm: edm,\n            sqlite: sqlite\n        });\n\n        let table = database.getTable(\"Source\");\n\n        return database.createAsync().then(() => {\n            return table.addEntityAsync({\n                string: \"Hello World\",\n                integer: 1\n            });\n        }).then((entity) => {\n            return table.updateEntityAsync(entity, {\n                string: \"Hello World 2\"\n            });\n        }).then((entity) => {\n            assert.equal(entity.string, \"Hello World 2\");\n            return table.asQueryable().toArrayAsync();\n        }).then((results) => {\n            assert.equal(results.length, 1);\n        });\n    });\n\n};\n\nexports[\"Database.removeEntityAsync\"] = () => {\n\n    return sqlite.open(\":memory:\").then((db) => {\n        var database = new Database({\n            edm: edm,\n            sqlite: sqlite\n        });\n\n        let table = database.getTable(\"Source\");\n\n        return database.createAsync().then(() => {\n            return table.addEntityAsync({\n                string: \"Hello World\",\n                integer: 1\n            });\n        }).then((entity) => {\n            return table.removeEntityAsync(entity);\n        }).then((entity) => {\n            assert.equal(entity.id, 1);\n\n            return table.asQueryable().toArrayAsync();\n        }).then((result) => {\n            assert.equal(result, 0);\n        });\n    });\n\n};"]}