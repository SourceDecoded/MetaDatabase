{"version":3,"sources":["../../src/mssql/Table.js"],"names":["Table","name","options","connectionPool","edm","schema","Error","table","_getTable","tableStatementBuilder","provider","obj","JSON","parse","stringify","column","columns","find","isPrimaryKey","tables","entity","sql","createInsertStatement","request","values","forEach","value","index","input","query","statement","then","result","updatedEntity","_clone","_getPrimaryKeyName","recordset","id","queryable","tableStatement","createTableStatement","relationships","indexesStatements","createTableIndexesStatements","unshift","fullStatement","join","createDropTableStatement","createDeleteStatement","keys","key","user","delta","createUpdateStatement","Object","assign"],"mappings":"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","file":"Table.js","sourcesContent":["import TableStatementBuilder from \"./TableStatementBuilder\";\nimport { Queryable } from \"queryablejs\";\nimport Provider from \"./Provider\";\n\nexport default class Table {\n    constructor(name, options = {}) {\n        this.connectionPool = options.connectionPool;\n        this.edm = options.edm;\n        this.name = name;\n        this.schema = options.schema;\n\n        if (this.name == null) {\n            throw new Error(\"The table needs to have a name.\");\n        }\n\n        if (this.connectionPool == null) {\n            throw new Error(\"The table needs to have a connectionPool.\");\n        }\n\n        if (this.edm == null) {\n            throw new Error(\"The table needs to have a edm.\");\n        }\n\n        this.table = this._getTable(name);\n\n        if (this.table == null) {\n            throw new Error(`Cannot find table called '${name}' within ${this.edm.name}.`);\n        }\n\n        this.tableStatementBuilder = new TableStatementBuilder(this.table, options);\n        this.provider = new Provider(name, {\n            edm: this.edm,\n            connectionPool: this.connectionPool,\n            schema: this.schema\n        });\n    }\n\n    _clone(obj) {\n        return JSON.parse(JSON.stringify(obj));\n    }\n\n    _getPrimaryKeyName() {\n        var column = this.table.columns.find((column) => {\n            return column.isPrimaryKey;\n        });\n\n        return column && column.name || null;\n    }\n\n    _getTable(name) {\n        return this.edm.tables.find((table) => {\n            return table.name === name;\n        });\n    }\n\n    addEntityAsync(entity) {\n        var sql = this.tableStatementBuilder.createInsertStatement(entity);\n        var request = this.connectionPool.request();\n\n        sql.values.forEach((value, index) => {\n            request.input(\"v\"+index, value);\n        });\n\n        return request.query(sql.statement).then((result) => {\n            let updatedEntity = this._clone(entity);\n            // This uses the SQL Server specific way to get an inserted id.\n            updatedEntity[this._getPrimaryKeyName()] = result.recordset[0].id;\n            return updatedEntity;\n        });\n    }\n\n    asQueryable() {\n        let queryable = new Queryable(this.name);\n        queryable.provider = this.provider;\n\n        return queryable;\n    }\n\n    createAsync() {\n        var tableStatement = this.tableStatementBuilder.createTableStatement(this.edm.relationships);\n        var indexesStatements = this.tableStatementBuilder.createTableIndexesStatements(this.edm.relationships);\n\n        indexesStatements.unshift(tableStatement);\n        let fullStatement = indexesStatements.join(\";\");\n        return this.connectionPool.request().query(fullStatement);\n    }\n\n    dropAsync() {\n        var statement = this.tableStatementBuilder.createDropTableStatement();\n\n        return this.connectionPool.request().query(statement);\n    }\n\n    getQueryProvider() {\n        return this.provider;\n    }\n\n    removeEntityAsync(entity) {\n        var sql = this.tableStatementBuilder.createDeleteStatement(entity);\n\n        let request = this.connectionPool.request();\n\n        sql.keys.forEach((key, index) => {\n            request.input(\"k\"+index, key);\n        });\n\n        return this.connectionPool.request().query(sql.statement).then(() => {\n            return entity;\n        });\n    }\n\n    updateEntityAsync(user, entity, delta) {\n        var sql = this.tableStatementBuilder.createUpdateStatement(entity, delta);\n\n        let request = this.connectionPool.request();\n\n        sql.values.forEach((value, index) => {\n            request.input(\"v\" + index, value);\n        });\n\n        sql.keys.forEach((key, index) => {\n            request.input(\"k\"+index, key);\n        });\n\n        return request.query(sql.statement).then((statement) => {\n            return Object.assign({}, entity, delta);\n        });\n    }\n}"]}