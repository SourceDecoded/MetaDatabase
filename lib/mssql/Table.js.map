{"version":3,"sources":["../../src/mssql/Table.js"],"names":["Table","name","options","mssqlDatabase","edm","schema","Error","table","_getTable","tableStatementBuilder","provider","obj","JSON","parse","stringify","column","columns","find","isPrimaryKey","tables","entity","sql","createInsertStatement","query","statement","values","then","result","updatedEntity","_clone","_getPrimaryKeyName","recordset","id","queryable","tableStatement","createTableStatement","relationships","indexesStatements","createTableIndexesStatements","unshift","join","createDropTableStatement","createDeleteStatement","delta","createUpdateStatement","Object","assign"],"mappings":";;;;;;;;AAAA;;;;AACA;;AACA;;;;;;;;IAEqBA,K;AACjB,mBAAYC,IAAZ,EAAgC;AAAA,YAAdC,OAAc,uEAAJ,EAAI;;AAAA;;AAC5B,aAAKC,aAAL,GAAqBD,QAAQC,aAA7B;AACA,aAAKC,GAAL,GAAWF,QAAQE,GAAnB;AACA,aAAKH,IAAL,GAAYA,IAAZ;AACA,aAAKI,MAAL,GAAcH,QAAQG,MAAtB;;AAEA,YAAI,KAAKJ,IAAL,IAAa,IAAjB,EAAuB;AACnB,kBAAM,IAAIK,KAAJ,CAAU,iCAAV,CAAN;AACH;;AAED,YAAI,KAAKH,aAAL,IAAsB,IAA1B,EAAgC;AAC5B,kBAAM,IAAIG,KAAJ,CAAU,mDAAV,CAAN;AACH;;AAED,YAAI,KAAKF,GAAL,IAAY,IAAhB,EAAsB;AAClB,kBAAM,IAAIE,KAAJ,CAAU,gCAAV,CAAN;AACH;;AAED,aAAKC,KAAL,GAAa,KAAKC,SAAL,CAAeP,IAAf,CAAb;;AAEA,YAAI,KAAKM,KAAL,IAAc,IAAlB,EAAwB;AACpB,kBAAM,IAAID,KAAJ,gCAAuCL,IAAvC,iBAAuD,KAAKG,GAAL,CAASH,IAAhE,OAAN;AACH;;AAED,aAAKQ,qBAAL,GAA6B,oCAA0BR,IAA1B,EAAgCC,OAAhC,CAA7B;AACA,aAAKQ,QAAL,GAAgB,uBAAaT,IAAb,EAAmB;AAC/BG,iBAAK,KAAKA,GADqB;AAE/BD,2BAAe,KAAKA;AAFW,SAAnB,CAAhB;AAIH;;;;+BAEMQ,G,EAAK;AACR,mBAAOC,KAAKC,KAAL,CAAWD,KAAKE,SAAL,CAAeH,GAAf,CAAX,CAAP;AACH;;;6CAEoB;AACjB,gBAAII,SAAS,KAAKR,KAAL,CAAWS,OAAX,CAAmBC,IAAnB,CAAwB,UAACF,MAAD,EAAY;AAC7C,uBAAOA,OAAOG,YAAd;AACH,aAFY,CAAb;;AAIA,mBAAOH,UAAUA,OAAOd,IAAjB,IAAyB,IAAhC;AACH;;;kCAESA,I,EAAM;AACZ,mBAAO,KAAKG,GAAL,CAASe,MAAT,CAAgBF,IAAhB,CAAqB,UAACV,KAAD,EAAW;AACnC,uBAAOA,MAAMN,IAAN,KAAeA,IAAtB;AACH,aAFM,CAAP;AAGH;;;uCAEcmB,M,EAAQ;AAAA;;AACnB,gBAAIC,MAAM,KAAKZ,qBAAL,CAA2Ba,qBAA3B,CAAiD,KAAKjB,MAAtD,EAA8D,KAAKE,KAAnE,EAA0Ea,MAA1E,CAAV;;AAEA,mBAAO,KAAKjB,aAAL,CAAmBoB,KAAnB,CAAyBF,IAAIG,SAA7B,EAAwCH,IAAII,MAA5C,EAAoDC,IAApD,CAAyD,UAACC,MAAD,EAAY;AACxE,oBAAIC,gBAAgB,MAAKC,MAAL,CAAYT,MAAZ,CAApB;;AAEA;AACA;AACAQ,8BAAc,MAAKE,kBAAL,EAAd,IAA2CH,OAAOI,SAAP,CAAiB,CAAjB,EAAoBC,EAA/D;AACA,uBAAOJ,aAAP;AACH,aAPM,CAAP;AAQH;;;sCAEa;AACV,gBAAIK,YAAY,2BAAc,KAAKhC,IAAnB,CAAhB;AACAgC,sBAAUvB,QAAV,GAAqB,KAAKA,QAA1B;;AAEA,mBAAOuB,SAAP;AACH;;;sCAEa;AACV,gBAAIC,iBAAiB,KAAKzB,qBAAL,CAA2B0B,oBAA3B,CAAgD,KAAK9B,MAArD,EAA6D,KAAKE,KAAlE,EAAyE,KAAKH,GAAL,CAASgC,aAAlF,CAArB;AACA,gBAAIC,oBAAoB,KAAK5B,qBAAL,CAA2B6B,4BAA3B,CAAwD,KAAKjC,MAA7D,EAAqE,KAAKE,KAA1E,EAAiF,KAAKH,GAAL,CAASgC,aAA1F,CAAxB;;AAEAC,8BAAkBE,OAAlB,CAA0BL,cAA1B;;AAEA,mBAAO,KAAK/B,aAAL,CAAmBoB,KAAnB,CAAyBc,kBAAkBG,IAAlB,CAAuB,GAAvB,CAAzB,CAAP;AACH;;;oCAEW;AACR,gBAAIhB,YAAY,KAAKf,qBAAL,CAA2BgC,wBAA3B,CAAoD,KAAKpC,MAAzD,EAAiE,KAAKE,KAAL,CAAWN,IAA5E,CAAhB;;AAEA,mBAAO,KAAKE,aAAL,CAAmBoB,KAAnB,CAAyBC,SAAzB,CAAP;AACH;;;2CAEkB;AACf,mBAAO,KAAKd,QAAZ;AACH;;;0CAGiBU,M,EAAQ;AACtB,gBAAIC,MAAM,KAAKZ,qBAAL,CAA2BiC,qBAA3B,CAAiD,KAAKrC,MAAtD,EAA8D,KAAKE,KAAnE,EAA0Ea,MAA1E,CAAV;;AAEA,mBAAO,KAAKjB,aAAL,CAAmBoB,KAAnB,CAAyBF,IAAIG,SAA7B,EAAwCH,IAAII,MAA5C,EAAoDC,IAApD,CAAyD,YAAM;AAClE,uBAAON,MAAP;AACH,aAFM,CAAP;AAGH;;;0CAEiBA,M,EAAQuB,K,EAAO;AAC7B,gBAAItB,MAAM,KAAKZ,qBAAL,CAA2BmC,qBAA3B,CAAiD,KAAKvC,MAAtD,EAA8D,KAAKE,KAAnE,EAA0Ea,MAA1E,EAAkFuB,KAAlF,CAAV;;AAEA,mBAAO,KAAKxC,aAAL,CAAmBoB,KAAnB,CAAyBF,IAAIG,SAA7B,EAAwCH,IAAII,MAA5C,EAAoDC,IAApD,CAAyD,UAACF,SAAD,EAAe;AAC3E,uBAAOqB,OAAOC,MAAP,CAAc,EAAd,EAAkB1B,MAAlB,EAA0BuB,KAA1B,CAAP;AACH,aAFM,CAAP;AAGH;;;;;;kBAxGgB3C,K","file":"Table.js","sourcesContent":["import TableStatementBuilder from \"./TableStatementBuilder\";\nimport { Queryable } from \"queryablejs\";\nimport Provider from \"./Provider\";\n\nexport default class Table {\n    constructor(name, options = {}) {\n        this.mssqlDatabase = options.mssqlDatabase;\n        this.edm = options.edm;\n        this.name = name;\n        this.schema = options.schema;\n\n        if (this.name == null) {\n            throw new Error(\"The table needs to have a name.\");\n        }\n\n        if (this.mssqlDatabase == null) {\n            throw new Error(\"The table needs to have a mssqlDatabase database.\");\n        }\n\n        if (this.edm == null) {\n            throw new Error(\"The table needs to have a edm.\");\n        }\n\n        this.table = this._getTable(name);\n\n        if (this.table == null) {\n            throw new Error(`Cannot find table called '${name}' within ${this.edm.name}.`);\n        }\n\n        this.tableStatementBuilder = new TableStatementBuilder(name, options);\n        this.provider = new Provider(name, {\n            edm: this.edm,\n            mssqlDatabase: this.mssqlDatabase\n        });\n    }\n\n    _clone(obj) {\n        return JSON.parse(JSON.stringify(obj));\n    }\n\n    _getPrimaryKeyName() {\n        var column = this.table.columns.find((column) => {\n            return column.isPrimaryKey;\n        });\n\n        return column && column.name || null;\n    }\n\n    _getTable(name) {\n        return this.edm.tables.find((table) => {\n            return table.name === name;\n        });\n    }\n\n    addEntityAsync(entity) {\n        var sql = this.tableStatementBuilder.createInsertStatement(this.schema, this.table, entity);\n\n        return this.mssqlDatabase.query(sql.statement, sql.values).then((result) => {\n            let updatedEntity = this._clone(entity);\n\n            // TODO: might need to be recordsets[1][0].id;\n            // This uses the SQL Server specific way to get an inserted id.\n            updatedEntity[this._getPrimaryKeyName()] = result.recordset[0].id;\n            return updatedEntity;\n        });\n    }\n\n    asQueryable() {\n        let queryable = new Queryable(this.name);\n        queryable.provider = this.provider;\n\n        return queryable;\n    }\n\n    createAsync() {\n        var tableStatement = this.tableStatementBuilder.createTableStatement(this.schema, this.table, this.edm.relationships);\n        var indexesStatements = this.tableStatementBuilder.createTableIndexesStatements(this.schema, this.table, this.edm.relationships);\n\n        indexesStatements.unshift(tableStatement);\n\n        return this.mssqlDatabase.query(indexesStatements.join(\";\"));\n    }\n\n    dropAsync() {\n        var statement = this.tableStatementBuilder.createDropTableStatement(this.schema, this.table.name);\n\n        return this.mssqlDatabase.query(statement);\n    }\n\n    getQueryProvider() {\n        return this.provider;\n    }\n\n\n    removeEntityAsync(entity) {\n        var sql = this.tableStatementBuilder.createDeleteStatement(this.schema, this.table, entity);\n\n        return this.mssqlDatabase.query(sql.statement, sql.values).then(() => {\n            return entity;\n        });\n    }\n\n    updateEntityAsync(entity, delta) {\n        var sql = this.tableStatementBuilder.createUpdateStatement(this.schema, this.table, entity, delta);\n\n        return this.mssqlDatabase.query(sql.statement, sql.values).then((statement) => {\n            return Object.assign({}, entity, delta);\n        });\n    }\n}"]}