{"version":3,"sources":["../../src/mssql/TableStatementBuilder.js"],"names":["defaultRelationships","oneToOne","oneToMany","TableStatementBuilder","dataTypeMapping","name","schema","table","entity","Error","sqliteEntity","columns","values","filterRelevantColumns","forEach","column","columnName","defaultValue","getDefaultValue","push","_escapeName","toMssqlValue","columnsStatement","join","valuesStatement","Array","length","fill","statement","delta","primaryKeyExpr","primaryKeyValues","columnSet","Object","keys","type","toSqliteValue","getPrimaryKeys","key","concat","primaryKeysExpr","primaryKeys","primaryKey","sqliteDataType","primaryKeyStatment","isPrimaryKey","isAutoIncrement","columnsDefinition","map","createColumnDefinitionStatement","filter","value","replace","relationships","indexedColumns","foreignKeyIndexes","getTablesRelationshipsAsTargets","relationship","withForeignKey","getTablesRelationshipsAsSources","indexOf","hasKey","isIndexed","createIndexStatement","tableRelationships","createForeignKeyStatement","assign","columnDefinitionsStatement","createColumnsDefinitionStatement","foreignKeysStatement","createForeignKeysStatement","foreignKeyNames","foreignKey","ofType","keyNames","find","Date","getTime"],"mappings":"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","file":"TableStatementBuilder.js","sourcesContent":["import dataTypeMapping from \"./dataTypeMapping\";\n\nconst defaultRelationships = {\n    oneToOne: [],\n    oneToMany: []\n}\n\nexport default class TableStatementBuilder {\n    constructor() {\n        this.dataTypeMapping = dataTypeMapping;\n    }\n\n    _escapeName(name) {\n        return `[${name}]`;\n    }\n\n    createDropTableStatment(schema, table) {\n        return `IF OBJECT_ID('${schema}.${table.name}', 'U') IS NOT NULL DROP TABLE ${schema}.${table.name};`\n    }\n\n    createInsertStatement(schema, table, entity) {\n        if (table == null) {\n            throw new Error(\"null Argument Exception: schema cannot be null or undefined.\");\n        }\n\n        if (table == null) {\n            throw new Error(\"Null Argument Exception: table cannot be null or undefined.\");\n        }\n\n        if (entity == null) {\n            throw new Error(\"Null Argument Exception: entity cannot be null or undefined.\");\n        }\n\n        const sqliteEntity = {};\n        const columns = [];\n        const values = [];\n\n        this.filterRelevantColumns(table.columns).forEach((column) => {\n            var columnName = column.name;\n            var defaultValue = this.getDefaultValue(column);\n\n            if (typeof entity[columnName] !== \"undefined\" && entity[columnName] !== null) {\n                columns.push(this._escapeName(columnName));\n\n                if (entity[columnName] === null) {\n                    values.push(this.toMssqlValue(defaultValue));\n                } else {\n                    values.push(this.toMssqlValue(entity[columnName]));\n                }\n            }\n        });\n\n        const columnsStatement = columns.join(\", \");\n        const valuesStatement = new Array(values.length).fill(\"?\").join(\", \");\n\n        if (values.length === 0) {\n            return {\n                statement: `INSERT INTO ${this._escapeName(schema+\".\"+table.name)} () VALUES (); SELECT SCOPE_IDENTITY() AS id;`,\n                values: values\n            };\n        }\n\n        return {\n            statement: `INSERT INTO ${this._escapeName(schema+\".\"+table.name)} (${columnsStatement}) VALUES (${valuesStatement}); SELECT SCOPE_IDENTITY() AS id`,\n            values: values\n        };\n\n    }\n\n    createUpdateStatement(schema, table, entity, delta) {\n        let values = [];\n        const primaryKeyExpr = [];\n        const primaryKeyValues = [];\n        const columnSet = [];\n        const columns = table.columns;\n\n        if (schema == null) {\n            throw new Error(\"Null Argument Exception: schema cannot be null or undefined.\");\n        }\n\n        if (table == null) {\n            throw new Error(\"Null Argument Exception: table cannot be null or undefined.\");\n        }\n\n        if (entity == null) {\n            throw new Error(\"Null Argument Exception: entity cannot be null or undefined.\");\n        }\n\n        if (delta == null) {\n            throw new Error(\"Null Argument Exception: delta cannot be null or undefined.\");\n        }\n\n        if (Object.keys(delta).length === 0) {\n            throw new Error(\"Invalid Argument: delta cannot an empty object.\");\n        }\n\n        this.filterRelevantColumns(columns).forEach((column) => {\n            var columnName = column.name;\n\n            if (typeof delta[columnName] !== \"undefined\" && this.dataTypeMapping[column.type] != null) {\n                columnSet.push(this._escapeName(columnName) + \" = ?\");\n                values.push(this.toSqliteValue(delta[columnName]));\n            }\n        });\n\n        this.getPrimaryKeys(columns).forEach((key) => {\n            primaryKeyExpr.push(this._escapeName(key) + \" = ?\");\n            primaryKeyValues.push(entity[key]);\n        });\n\n        values = values.concat(primaryKeyValues);\n\n        return {\n            statement: `UPDATE ${this._escapeName(schema+\".\"+table.name)} SET ${columnSet.join(\", \")} WHERE ${primaryKeyExpr.join(\" AND \")}`,\n            values: values\n        };\n    }\n\n    createDeleteStatement(schema, table, entity) {\n        if (schema == null) {\n            throw new Error(\"Null Argument Exception: schema cannot be null or undefined.\");\n        }\n\n        if (table == null) {\n            throw new Error(\"Null Argument Exception: table cannot be null or undefined.\");\n        }\n\n        if (entity == null) {\n            throw new Error(\"Null Argument Exception: entity cannot be null or undefined.\");\n        }\n\n        const primaryKeysExpr = [];\n        const values = [];\n        const primaryKeys = this.getPrimaryKeys(table.columns);\n\n        primaryKeys.forEach((primaryKey) => {\n\n            if (entity[primaryKey] === null) {\n                primaryKeysExpr.push(this._escapeName(primaryKey) + \" IS NULL\");\n            } else {\n                primaryKeysExpr.push(this._escapeName(primaryKey) + \" = ?\");\n                values.push(this.toSqliteValue(entity[primaryKey]));\n            }\n\n        });\n\n        return {\n            statement: `DELETE FROM ${this._escapeName(schema+\".\"+table.name)} WHERE ${primaryKeysExpr.join(\" AND \")}`,\n            values: values\n        };\n    }\n\n    createColumnDefinitionStatement(table, column) {\n        const sqliteDataType = this.dataTypeMapping[column.type];\n        const primaryKeyStatment = \"\";\n        const primaryKeys = this.getPrimaryKeys(table.columns);\n\n        if (sqliteDataType != null) {\n            let primaryKey = \"\";\n\n            if (column.isPrimaryKey) {\n\n                if (primaryKeys.length === 1) {\n                    primaryKey = \" PRIMARY KEY\";\n                }\n\n                if (column.isAutoIncrement) {\n                    primaryKey += \" AUTOINCREMENT\";\n                }\n            }\n\n            return `${this._escapeName(column.name)} ${this.dataTypeMapping[column.type] + primaryKey}`\n\n        } else {\n            return null;\n        }\n    }\n\n    createColumnsDefinitionStatement(table) {\n        const columns = table.columns;\n        const columnsDefinition = columns.map((column) => {\n            return this.createColumnDefinitionStatement(table, column);\n        }).filter((value) => {\n            return value != null;\n        }).join(\", \")\n\n        return columnsDefinition;\n    }\n\n    createIndexStatement(schema, table, column) {\n        return `IF NOT EXISTS (SELECT * FROM sys.index WHERE object_id = OBJECT_ID(N'${this._escapeName(schema+\".\"+table)}') AND name = N'index_${column.replace(/\\\"/g, \"\")}'\n                  CREATE INDEX index_${column.replace(/\\\"/g, \"\")} ON ${this._escapeName(schema+\".\"+table)} (${this._escapeName(column)})`;\n    }\n\n    // TODO: Update for mssql\n    createTableIndexesStatements(schema, table, relationships) {\n        if (relationships == null) {\n            throw new Error(\"Null Argument Exception: relationships cannot be null or undefined.\");\n        }\n\n        const indexedColumns = {};\n\n        const foreignKeyIndexes = this.getTablesRelationshipsAsTargets(table, relationships).forEach((relationship) => {\n            indexedColumns[relationship.withForeignKey] = true;\n        });\n\n        const primaryKeys = this.getPrimaryKeys(table.columns);\n\n        this.getTablesRelationshipsAsSources(table, relationships).filter((relationship) => {\n            return primaryKeys.indexOf(relationship.hasKey) === -1;\n        }).forEach((relationship) => {\n            return indexedColumns[relationship.hasKey] = true;\n        });\n\n        primaryKeys.forEach((name) => {\n            indexedColumns[name] = true;\n        });\n\n        table.columns.filter((column) => {\n            return column.isIndexed;\n        }).map((column) => {\n            return indexedColumns[column.name]\n        });\n\n        return Object.keys(indexedColumns).map((columnName) => {\n            return this.createIndexStatement(schema, table.name, columnName);\n        });\n\n    }\n\n    createForeignKeysStatement(schema, table, relationships) {\n        const tableRelationships = this.getTablesRelationshipsAsTargets(table, relationships);\n\n        return tableRelationships.map((relationship) => {\n            return this.createForeignKeyStatement(relationship);\n        }).join(\"/n/t\");\n    }\n\n    createForeignKeyStatement(schema, relationship) {\n        return `CONSTRAINT (${this._escapeName(schema+\".\"+relationship.withForeignKey)}) REFERENCES ${this._escapeName(schema+\".\"+relationship.type)} (${this._escapeName(relationship.hasKey)})`;\n    }\n\n    createPrimaryKeyStatement(table) {\n        const primaryKeys = this.getPrimaryKeys(table.columns).map((primaryKey) => {\n            return this._escapeName(primaryKey);\n        });\n\n        if (primaryKeys.length === 0) {\n            return \"\";\n        } else {\n            return `PRIMARY KEY (${primaryKeys.join(\", \")})`;\n        }\n    }\n\n    // TODO: Update for mssql\n    createTableStatement(schema, table, relationships) {\n        relationships = Object.assign({}, defaultRelationships, relationships);\n\n        const columnDefinitionsStatement = this.createColumnsDefinitionStatement(table);\n        const foreignKeysStatement = this.createForeignKeysStatement(schema, table, relationships);\n\n        if (columnDefinitionsStatement && foreignKeysStatement) {\n            return `CREATE TABLE IF NOT EXISTS ${this._escapeName(schema+\".\"+table)} (${columnDefinitionsStatement}, ${foreignKeysStatement})`;\n        } else if (columnDefinitionsStatement) {\n            return `CREATE TABLE IF NOT EXISTS ${this._escapeName(schema+\".\"+table)} (${columnDefinitionsStatement})`;\n        } else {\n            return `CREATE TABLE IF NOT EXISTS ${this._escapeName(schema+\".\"+table)}`;\n        }\n\n    }\n\n    filterRelevantColumns(columns) {\n        return columns.filter((column) => {\n            return this.dataTypeMapping[column.type] != null;\n        });\n    }\n\n    getTablesRelationshipsAsTargets(table, relationships) {\n        const foreignKeyNames = {};\n\n        const filter = (relationship) => {\n            const foreignKey = relationship.withForeignKey;\n\n            if (relationship.ofType === table.name && foreignKeyNames[foreignKey] == null) {\n                foreignKeyNames[foreignKey];\n                return true;\n            }\n            return false;\n        }\n\n        const oneToOne = relationships.oneToOne.filter(filter);\n        const oneToMany = relationships.oneToMany.filter(filter);\n\n        return oneToOne.concat(oneToMany);\n    }\n\n    getTablesRelationshipsAsSources(table, relationships) {\n        const keyNames = {};\n\n        const filter = (relationship) => {\n            const key = relationship.hasKey;\n\n            if (relationship.type === table.name && keyNames[key] == null) {\n                keyNames[key];\n                return true;\n            }\n            return false;\n        }\n\n        const oneToOne = relationships.oneToOne.filter(filter);\n        const oneToMany = relationships.oneToMany.filter(filter);\n\n        return oneToOne.concat(oneToMany);\n    }\n\n    getColumn(table, name) {\n        return table.columns.find((column) => {\n            return column.name === name;\n        });\n    }\n\n    getDefaultValue(column) {\n        return column[`default${column.type}Value`] || null;\n    }\n\n    getPrimaryKeys(columns) {\n        return columns.filter((column) => {\n            return column.isPrimaryKey;\n        }).map((column) => {\n            return column.name;\n        });\n    }\n\n    // TODO: update for MSSQL\n    toMssqlValue(value) {\n        if (typeof value === \"string\") {\n            return value;\n        } else if (typeof value === \"number\") {\n            return value;\n        } else if (typeof value === \"boolean\") {\n            return value ? 1 : 0;\n        } else if (value instanceof Date) {\n            return value.getTime();\n        } else if (value == null) {\n            return null;\n        } else {\n            throw new Error(\"Unknown value.\");\n        }\n    }\n\n}"]}