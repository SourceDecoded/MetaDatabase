{"version":3,"sources":["../../src/mssql/TableStatementBuilder.js"],"names":["defaultRelationships","oneToOne","oneToMany","TableStatementBuilder","table","options","dataTypeMapping","edm","schema","version","name","query","_getDbTableName","_getQualifiedDbTableName","entity","Error","sqliteEntity","columns","values","filterRelevantColumns","forEach","column","columnName","defaultValue","getDefaultValue","push","_escapeName","toMssqlValue","columnsStatement","join","valuesStatement","Array","length","fill","statement","delta","primaryKeyExpr","primaryKeyValues","columnSet","Object","keys","type","toSqliteValue","getPrimaryKeys","key","concat","primaryKeysExpr","primaryKeys","primaryKey","sqlDataType","primaryKeyStatment","isPrimaryKey","isAutoIncrement","columnsDefinition","map","createColumnDefinitionStatement","filter","value","replace","relationships","indexedColumns","foreignKeyIndexes","getTablesRelationshipsAsTargets","relationship","withForeignKey","getTablesRelationshipsAsSources","indexOf","hasKey","isIndexed","createIndexStatement","tableRelationships","createForeignKeyStatement","ofType","assign","columnDefinitionsStatement","createColumnsDefinitionStatement","foreignKeysStatement","createForeignKeysStatement","_wrapIfTableExists","foreignKeyNames","foreignKey","keyNames","find","Date","getTime"],"mappings":"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","file":"TableStatementBuilder.js","sourcesContent":["import dataTypeMapping from \"./dataTypeMapping\";\n\nconst defaultRelationships = {\n    oneToOne: [],\n    oneToMany: []\n}\n\nexport default class TableStatementBuilder {\n    constructor(table, options) {\n        this.dataTypeMapping = dataTypeMapping;\n        this.table = table;\n        this.edm = options.edm;\n        this.schema = options.schema;\n        this.version = options.edm.version;\n    }\n\n    _escapeName(name) {\n        return `[${name}]`;\n    }\n\n    _wrapIfTableExists(table, query) {\n        return `IF NOT (EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES \n            WHERE TABLE_SCHEMA = '${this.schema}' AND TABLE_NAME = '${table.name}'))\n            BEGIN\n            ${query}\n            END`\n    }\n\n    _getDbTableName(table) {\n        return `${table}_${this.edm.version}`;\n    }\n\n    _getQualifiedDbTableName(table) {\n        return `[${this.schema}].[${this._getDbTableName(table)}]`;\n    }\n\n    createDropTableStatement() {\n        return `IF OBJECT_ID('${this.schema}.${this._getDbTableName(this.table.name)}', 'U') IS NOT NULL DROP TABLE ${this._getQualifiedDbTableName(table.name)};`\n    }\n\n    createInsertStatement(entity) {\n        if (entity == null) {\n            throw new Error(\"Null Argument Exception: entity cannot be null or undefined.\");\n        }\n\n        const sqliteEntity = {};\n        const columns = [];\n        const values = [];\n\n        this.filterRelevantColumns(this.table.columns).forEach((column) => {\n            var columnName = column.name;\n            var defaultValue = this.getDefaultValue(column);\n\n            if (typeof entity[columnName] !== \"undefined\" && entity[columnName] !== null) {\n                columns.push(this._escapeName(columnName));\n\n                if (entity[columnName] === null) {\n                    values.push(this.toMssqlValue(defaultValue));\n                } else {\n                    values.push(this.toMssqlValue(entity[columnName]));\n                }\n            }\n        });\n\n        const columnsStatement = columns.join(\", \");\n        const valuesStatement = new Array(values.length).fill(\"?\").join(\", \");\n\n        if (values.length === 0) {\n            return {\n                statement: `INSERT INTO ${this._getQualifiedDbTableName(this.table.name)} () VALUES (); SELECT SCOPE_IDENTITY() AS id;`,\n                values: values\n            };\n        }\n\n        return {\n            statement: `INSERT INTO ${this._getQualifiedDbTableName(this.table.name)} (${columnsStatement}) VALUES (${valuesStatement}); SELECT SCOPE_IDENTITY() AS id`,\n            values: values\n        };\n\n    }\n\n    createUpdateStatement(entity, delta) {\n        let values = [];\n        const primaryKeyExpr = [];\n        const primaryKeyValues = [];\n        const columnSet = [];\n        const columns = table.columns;\n\n        if (entity == null) {\n            throw new Error(\"Null Argument Exception: entity cannot be null or undefined.\");\n        }\n\n        if (delta == null) {\n            throw new Error(\"Null Argument Exception: delta cannot be null or undefined.\");\n        }\n\n        if (Object.keys(delta).length === 0) {\n            throw new Error(\"Invalid Argument: delta cannot an empty object.\");\n        }\n\n        this.filterRelevantColumns(columns).forEach((column) => {\n            var columnName = column.name;\n\n            if (typeof delta[columnName] !== \"undefined\" && this.dataTypeMapping[column.type] != null) {\n                columnSet.push(this._escapeName(columnName) + \" = ?\");\n                values.push(this.toSqliteValue(delta[columnName]));\n            }\n        });\n\n        this.getPrimaryKeys(columns).forEach((key) => {\n            primaryKeyExpr.push(this._escapeName(key) + \" = ?\");\n            primaryKeyValues.push(entity[key]);\n        });\n\n        values = values.concat(primaryKeyValues);\n\n        return {\n            statement: `UPDATE ${this._getQualifiedDbTableName(this.table.name)} SET ${columnSet.join(\", \")} WHERE ${primaryKeyExpr.join(\" AND \")}`,\n            values: values\n        };\n    }\n\n    createDeleteStatement(entity) {\n        if (entity == null) {\n            throw new Error(\"Null Argument Exception: entity cannot be null or undefined.\");\n        }\n\n        const primaryKeysExpr = [];\n        const values = [];\n        const primaryKeys = this.getPrimaryKeys(this.table.columns);\n\n        primaryKeys.forEach((primaryKey) => {\n\n            if (entity[primaryKey] === null) {\n                primaryKeysExpr.push(this._escapeName(primaryKey) + \" IS NULL\");\n            } else {\n                primaryKeysExpr.push(this._escapeName(primaryKey) + \" = ?\");\n                values.push(this.toSqliteValue(entity[primaryKey]));\n            }\n\n        });\n\n        return {\n            statement: `DELETE FROM ${this._getQualifiedDbTableName(this.table.name)} WHERE ${primaryKeysExpr.join(\" AND \")}`,\n            values: values\n        };\n    }\n\n    createColumnDefinitionStatement(column) {\n        const sqlDataType = this.dataTypeMapping[column.type];\n        const primaryKeyStatment = \"\";\n        const primaryKeys = this.getPrimaryKeys(this.table.columns);\n\n        if (sqlDataType != null) {\n            let primaryKey = \"\";\n\n            if (column.isPrimaryKey) {\n\n                if (primaryKeys.length === 1) {\n                    primaryKey = \" PRIMARY KEY\";\n                }\n\n                if (column.isAutoIncrement) {\n                    primaryKey += \" IDENTITY(1,1)\";\n                }\n            }\n\n            return `${this._escapeName(column.name)} ${this.dataTypeMapping[column.type] + primaryKey}`\n\n        } else {\n            return null;\n        }\n    }\n\n    createColumnsDefinitionStatement() {\n        const columns = this.table.columns;\n        const columnsDefinition = columns.map((column) => {\n            return this.createColumnDefinitionStatement(column);\n        }).filter((value) => {\n            return value != null;\n        }).join(\", \")\n\n        return columnsDefinition;\n    }\n\n    createIndexStatement(column) {\n        return `IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'${this._getQualifiedDbTableName(this.table.name)}') AND name = N'index_${column.replace(/\\\"/g, '\"\"')}')\n                  CREATE INDEX index_${column.replace(/\\\"/g, '\"\"')} ON ${this._getQualifiedDbTableName(this.table.name)} (${this._escapeName(column)})`;\n    }\n\n    createTableIndexesStatements(relationships) {\n        if (relationships == null) {\n            throw new Error(\"Null Argument Exception: relationships cannot be null or undefined.\");\n        }\n\n        const indexedColumns = {};\n\n        const foreignKeyIndexes = this.getTablesRelationshipsAsTargets(relationships).forEach((relationship) => {\n            indexedColumns[relationship.withForeignKey] = true;\n        });\n\n        const primaryKeys = this.getPrimaryKeys(this.table.columns);\n\n        this.getTablesRelationshipsAsSources(relationships).filter((relationship) => {\n            return primaryKeys.indexOf(relationship.hasKey) === -1;\n        }).forEach((relationship) => {\n            return indexedColumns[relationship.hasKey] = true;\n        });\n\n        primaryKeys.forEach((name) => {\n            indexedColumns[name] = true;\n        });\n\n        this.table.columns.filter((column) => {\n            return column.isIndexed;\n        }).map((column) => {\n            return indexedColumns[column.name]\n        });\n\n        return Object.keys(indexedColumns).map((columnName) => {\n            return this.createIndexStatement(columnName);\n        });\n\n    }\n\n    createForeignKeysStatement(relationships) {\n        const tableRelationships = this.getTablesRelationshipsAsTargets(relationships);\n\n        return tableRelationships.map((relationship) => {\n            return this.createForeignKeyStatement(relationship);\n        }).join(\"/n/t\");\n    }\n\n    createForeignKeyStatement(relationship) {\n        return `CONSTRAINT [c_${relationship.ofType}.${this._getDbTableName(relationship.withForeignKey)}_to_${this._getDbTableName(relationship.type)}.${relationship.hasKey}] FOREIGN KEY([${this._getDbTableName(relationship.withForeignKey)}]) REFERENCES ${this._getQualifiedDbTableName(relationship.type)} ([${relationship.hasKey}])`;\n    }\n\n    createPrimaryKeyStatement() {\n        const primaryKeys = this.getPrimaryKeys(this.table.columns).map((primaryKey) => {\n            return this._escapeName(primaryKey);\n        });\n\n        if (primaryKeys.length === 0) {\n            return \"\";\n        } else {\n            return `PRIMARY KEY (${primaryKeys.join(\", \")})`;\n        }\n    }\n\n    createTableStatement(relationships) {\n        relationships = Object.assign({}, defaultRelationships, relationships);\n\n        const columnDefinitionsStatement = this.createColumnsDefinitionStatement();\n        const foreignKeysStatement = this.createForeignKeysStatement(relationships);\n\n        if (columnDefinitionsStatement && foreignKeysStatement) {\n            return this._wrapIfTableExists(this.table,\n                `CREATE TABLE ${this._getQualifiedDbTableName(this.table.name)} (${columnDefinitionsStatement}, ${foreignKeysStatement})`);\n        } else if (columnDefinitionsStatement) {\n            return this._wrapIfTableExists(this.table,\n                `CREATE TABLE ${this._getQualifiedDbTableName(this.table.name)} (${columnDefinitionsStatement})`);\n        } else {\n            return this._wrapIfTableExists(this.table,\n                `CREATE TABLE ${this._getQualifiedDbTableName(this.table.name)}`);\n        }\n\n    }\n\n    filterRelevantColumns(columns) {\n        return columns.filter((column) => {\n            return this.dataTypeMapping[column.type] != null;\n        });\n    }\n\n    getTablesRelationshipsAsTargets(relationships) {\n        const foreignKeyNames = {};\n\n        const filter = (relationship) => {\n            const foreignKey = relationship.withForeignKey;\n\n            if (relationship.ofType === this.table.name && foreignKeyNames[foreignKey] == null) {\n                foreignKeyNames[foreignKey];\n                return true;\n            }\n            return false;\n        }\n\n        const oneToOne = relationships.oneToOne.filter(filter);\n        const oneToMany = relationships.oneToMany.filter(filter);\n\n        return oneToOne.concat(oneToMany);\n    }\n\n    getTablesRelationshipsAsSources(relationships) {\n        const keyNames = {};\n\n        const filter = (relationship) => {\n            const key = relationship.hasKey;\n\n            if (relationship.type === this.table.name && keyNames[key] == null) {\n                keyNames[key];\n                return true;\n            }\n            return false;\n        }\n\n        const oneToOne = relationships.oneToOne.filter(filter);\n        const oneToMany = relationships.oneToMany.filter(filter);\n\n        return oneToOne.concat(oneToMany);\n    }\n\n    getColumn(name) {\n        return this.table.columns.find((column) => {\n            return column.name === name;\n        });\n    }\n\n    getDefaultValue(column) {\n        return column[`default${column.type}Value`] || null;\n    }\n\n    getPrimaryKeys(columns) {\n        return columns.filter((column) => {\n            return column.isPrimaryKey;\n        }).map((column) => {\n            return column.name;\n        });\n    }\n\n    // TODO: update for MSSQL\n    toMssqlValue(value) {\n        if (typeof value === \"string\") {\n            return value;\n        } else if (typeof value === \"number\") {\n            return value;\n        } else if (typeof value === \"boolean\") {\n            return value ? 1 : 0;\n        } else if (value instanceof Date) {\n            return value.getTime();\n        } else if (value == null) {\n            return null;\n        } else {\n            throw new Error(\"Unknown value.\");\n        }\n    }\n\n}"]}