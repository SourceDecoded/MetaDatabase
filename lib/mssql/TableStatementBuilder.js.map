{"version":3,"sources":["../../src/mssql/TableStatementBuilder.js"],"names":["defaultRelationships","oneToOne","oneToMany","TableStatementBuilder","table","options","dataTypeMapping","edm","schema","name","query","_getDbTableName","version","replace","_getQualifiedDbTableName","entity","Error","values","columns","filterRelevantColumns","forEach","column","columnName","defaultValue","getDefaultValue","push","_escapeName","columnsStatement","join","valuesStatement","map","value","index","length","statement","delta","primaryKeyExpr","primaryKeyValues","columnSet","Object","keys","primaryKeys","getPrimaryKeys","filter","indexOf","key","primaryKeysExpr","primaryKey","sqlDataType","type","primaryKeyStatment","isPrimaryKey","isAutoIncrement","columnsDefinition","createColumnDefinitionStatement","relationships","indexedColumns","foreignKeyIndexes","getTablesRelationshipsAsTargets","relationship","withForeignKey","getTablesRelationshipsAsSources","hasKey","isIndexed","createIndexStatement","tableRelationships","createForeignKeyStatement","ofType","assign","columnDefinitionsStatement","createColumnsDefinitionStatement","foreignKeysStatement","_wrapIfTableExists","foreignKeyNames","foreignKey","concat","keyNames","find"],"mappings":"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","file":"TableStatementBuilder.js","sourcesContent":["import dataTypeMapping from \"./dataTypeMapping\";\n\nconst defaultRelationships = {\n    oneToOne: [],\n    oneToMany: []\n}\n\nexport default class TableStatementBuilder {\n    constructor(table, options) {\n        this.dataTypeMapping = dataTypeMapping;\n        this.table = table;\n        this.edm = options.edm;\n        this.schema = options.schema;\n    }\n\n    _escapeName(name) {\n        return `[${name}]`;\n    }\n\n    _wrapIfTableExists(table, query) {\n        return `IF NOT (EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES \n            WHERE TABLE_SCHEMA = '${this.schema}' AND TABLE_NAME = '${this._getDbTableName(table.name)}'))\n            BEGIN\n            ${query}\n            END`\n    }\n\n    _getDbTableName(table) {\n        return `${table}__${this.edm.version.replace(/\\./g, \"_\")}`;\n    }\n\n    _getQualifiedDbTableName(table) {\n        return `[${this.schema}].[${this._getDbTableName(table)}]`;\n    }\n\n    getQualifiedDbTableName() {\n        return _getQualifiedDbTableName(table.name);\n    }\n\n    createDropTableStatement() {\n        return `IF OBJECT_ID('${this.schema}.${this._getDbTableName(this.table.name)}', 'U') IS NOT NULL DROP TABLE ${this._getQualifiedDbTableName(this.table.name)};`\n    }\n\n    createInsertStatement(entity) {\n        if (entity == null) {\n            throw new Error(\"Null Argument Exception: entity cannot be null or undefined.\");\n        }\n\n        const values = [];\n        const columns = [];\n\n        this.filterRelevantColumns(this.table.columns).forEach((column) => {\n            var columnName = column.name;\n            var defaultValue = this.getDefaultValue(column);\n\n            if (typeof entity[columnName] !== \"undefined\" && entity[columnName] !== null) {\n                columns.push(this._escapeName(columnName));\n\n                if (entity[columnName] === null) {\n                    values.push(defaultValue);\n                } else {\n                    values.push(entity[columnName]);\n                }\n            }\n        });\n\n        const columnsStatement = columns.join(\",\");\n\n        const valuesStatement = values.map((value, index) => {\n            return \"@v\"+index;\n        });\n\n        if (values.length === 0) {\n            return {\n                statement: `INSERT INTO ${this._getQualifiedDbTableName(this.table.name)} () VALUES (); SELECT SCOPE_IDENTITY() AS id;`,\n                values: values\n            };\n        }\n\n        return {\n            statement: `INSERT INTO ${this._getQualifiedDbTableName(this.table.name)} (${columnsStatement}) VALUES (${valuesStatement}); SELECT SCOPE_IDENTITY() AS id;`,\n            values: values\n        };\n\n    }\n\n    createUpdateStatement(entity, delta) {\n        let values = [];\n        const primaryKeyExpr = [];\n        const primaryKeyValues = [];\n        const columnSet = [];\n        const columns = this.table.columns;\n\n        if (entity == null) {\n            throw new Error(\"Null Argument Exception: entity cannot be null or undefined.\");\n        }\n\n        if (delta == null) {\n            throw new Error(\"Null Argument Exception: delta cannot be null or undefined.\");\n        }\n\n        if (Object.keys(delta).length === 0) {\n            throw new Error(\"Invalid Argument: delta cannot an empty object.\");\n        }\n\n        let primaryKeys = this.getPrimaryKeys(columns);\n\n        this.filterRelevantColumns(columns).filter((column) => {\n            return primaryKeys.indexOf(column.name) === -1;\n        }).forEach((column) => {\n            var columnName = column.name;\n            if (typeof delta[columnName] !== \"undefined\") {\n                columnSet.push(this._escapeName(columnName) + `=@v${values.length}`);\n                values.push(delta[columnName]);\n            }\n        });\n\n        primaryKeys.forEach((key, index) => {\n            primaryKeyExpr.push(this._escapeName(key) + `=@k${index}`);\n            primaryKeyValues.push(entity[key]);\n        });\n\n        return {\n            statement: `UPDATE ${this._getQualifiedDbTableName(this.table.name)} SET ${columnSet.join(\", \")} WHERE ${primaryKeyExpr.join(\" AND \")}`,\n            values: values,\n            keys: primaryKeyValues\n        };\n    }\n\n    createDeleteStatement(entity) {\n        if (entity == null) {\n            throw new Error(\"Null Argument Exception: entity cannot be null or undefined.\");\n        }\n\n        const primaryKeysExpr = [];\n        const keys = [];\n        const primaryKeys = this.getPrimaryKeys(this.table.columns);\n\n        primaryKeys.forEach((primaryKey, index) => {\n\n            if (entity[primaryKey] === null) {\n                primaryKeysExpr.push(this._escapeName(primaryKey) + \" IS NULL\");\n            } else {\n                primaryKeysExpr.push(this._escapeName(primaryKey) + `=@k${keys.length}`);\n                keys.push(entity[primaryKey]);\n            }\n\n        });\n\n        return {\n            statement: `DELETE FROM ${this._getQualifiedDbTableName(this.table.name)} WHERE ${primaryKeysExpr.join(\" AND \")}`,\n            keys: keys\n        };\n    }\n\n    createColumnDefinitionStatement(column) {\n        const sqlDataType = this.dataTypeMapping[column.type];\n        const primaryKeyStatment = \"\";\n        const primaryKeys = this.getPrimaryKeys(this.table.columns);\n\n        if (sqlDataType != null) {\n            let primaryKey = \"\";\n\n            if (column.isPrimaryKey) {\n\n                if (primaryKeys.length === 1) {\n                    primaryKey = \" PRIMARY KEY\";\n                }\n\n                if (column.isAutoIncrement) {\n                    primaryKey += \" IDENTITY(1,1)\";\n                }\n            }\n\n            return `${this._escapeName(column.name)} ${this.dataTypeMapping[column.type] + primaryKey}`\n\n        } else {\n            return null;\n        }\n    }\n\n    createColumnsDefinitionStatement() {\n        const columns = this.table.columns || [];\n        const columnsDefinition = columns.map((column) => {\n            return this.createColumnDefinitionStatement(column);\n        }).filter((value) => {\n            return value != null;\n        }).join(\", \")\n\n        return columnsDefinition;\n    }\n\n    createIndexStatement(column) {\n        return `IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'${this._getQualifiedDbTableName(this.table.name)}') AND name = N'index_${column.replace(/\\\"/g, '\"\"')}')\n                  CREATE INDEX index_${column.replace(/\\\"/g, '\"\"')} ON ${this._getQualifiedDbTableName(this.table.name)} (${this._escapeName(column)})`;\n    }\n\n    createTableIndexesStatements(relationships) {\n        if (relationships == null) {\n            throw new Error(\"Null Argument Exception: relationships cannot be null or undefined.\");\n        }\n\n        const indexedColumns = {};\n\n        const foreignKeyIndexes = this.getTablesRelationshipsAsTargets(relationships).forEach((relationship) => {\n            indexedColumns[relationship.withForeignKey] = true;\n        });\n\n        const primaryKeys = this.getPrimaryKeys(this.table.columns);\n\n        this.getTablesRelationshipsAsSources(relationships).filter((relationship) => {\n            return primaryKeys.indexOf(relationship.hasKey) === -1;\n        }).forEach((relationship) => {\n            return indexedColumns[relationship.hasKey] = true;\n        });\n\n        primaryKeys.forEach((name) => {\n            indexedColumns[name] = true;\n        });\n\n        this.table.columns.filter((column) => {\n            return column.isIndexed;\n        }).map((column) => {\n            return indexedColumns[column.name]\n        });\n\n        return Object.keys(indexedColumns).map((columnName) => {\n            return this.createIndexStatement(columnName);\n        });\n\n    }\n\n    createForeignKeysStatement(relationships) {\n        const tableRelationships = this.getTablesRelationshipsAsTargets(relationships);\n\n        return tableRelationships.map((relationship) => {\n            return this.createForeignKeyStatement(relationship);\n        }).join(\"/n/t\");\n    }\n\n    createForeignKeyStatement(relationship) {\n        return `CONSTRAINT [c_${relationship.ofType}.${this._getDbTableName(relationship.withForeignKey)}_to_${this._getDbTableName(relationship.type)}.${relationship.hasKey}] FOREIGN KEY([${this._getDbTableName(relationship.withForeignKey)}]) REFERENCES ${this._getQualifiedDbTableName(relationship.type)} ([${relationship.hasKey}])`;\n    }\n\n    createPrimaryKeyStatement() {\n        const primaryKeys = this.getPrimaryKeys(this.table.columns).map((primaryKey) => {\n            return this._escapeName(primaryKey);\n        });\n\n        if (primaryKeys.length === 0) {\n            return \"\";\n        } else {\n            return `PRIMARY KEY (${primaryKeys.join(\", \")})`;\n        }\n    }\n\n    createTableStatement(relationships = {}) {\n        relationships = Object.assign({}, defaultRelationships, relationships);\n\n\n        const columnDefinitionsStatement = this.createColumnsDefinitionStatement();\n        // not sure we want to be enforcing these in the DB.\n        //const foreignKeysStatement = this.createForeignKeysStatement(relationships);\n        const foreignKeysStatement = \"\";\n\n        if (columnDefinitionsStatement && foreignKeysStatement) {\n            return this._wrapIfTableExists(this.table,\n                `CREATE TABLE ${this._getQualifiedDbTableName(this.table.name)} (${columnDefinitionsStatement}, ${foreignKeysStatement})`);\n        } else if (columnDefinitionsStatement) {\n            return this._wrapIfTableExists(this.table,\n                `CREATE TABLE ${this._getQualifiedDbTableName(this.table.name)} (${columnDefinitionsStatement})`);\n        } else {\n            return this._wrapIfTableExists(this.table,\n                `CREATE TABLE ${this._getQualifiedDbTableName(this.table.name)}`);\n        }\n\n    }\n\n    filterRelevantColumns(columns) {\n        return columns.filter((column) => {\n            return this.dataTypeMapping[column.type] != null;\n        });\n    }\n\n    getTablesRelationshipsAsTargets(relationships) {\n        const foreignKeyNames = {};\n\n        const filter = (relationship) => {\n            const foreignKey = relationship.withForeignKey;\n\n            if (relationship.ofType === this.table.name && foreignKeyNames[foreignKey] == null) {\n                foreignKeyNames[foreignKey];\n                return true;\n            }\n            return false;\n        }\n\n        const oneToOne = relationships.oneToOne.filter(filter);\n        const oneToMany = relationships.oneToMany.filter(filter);\n\n        return oneToOne.concat(oneToMany);\n    }\n\n    getTablesRelationshipsAsSources(relationships) {\n        const keyNames = {};\n\n        const filter = (relationship) => {\n            const key = relationship.hasKey;\n\n            if (relationship.type === this.table.name && keyNames[key] == null) {\n                keyNames[key];\n                return true;\n            }\n            return false;\n        }\n\n        const oneToOne = relationships.oneToOne.filter(filter);\n        const oneToMany = relationships.oneToMany.filter(filter);\n\n        return oneToOne.concat(oneToMany);\n    }\n\n    getColumn(name) {\n        return this.table.columns.find((column) => {\n            return column.name === name;\n        });\n    }\n\n    getDefaultValue(column) {\n        return column[`default${column.type}Value`] || null;\n    }\n\n    getPrimaryKeys(columns) {\n        return columns.filter((column) => {\n            return column.isPrimaryKey;\n        }).map((column) => {\n            return column.name;\n        });\n    }\n\n}"]}