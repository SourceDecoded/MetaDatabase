{"version":3,"sources":["../../src/mssql/Migrator.js"],"names":["Migrator","iDb","metaDb","schema","connectionPool","name","edm","options","edmTable","getTable","tableName","table","namer","builder","query","getQualifiedTableName","createColumnDefinitionStatement","column","request","metaTable","addDecoratorAsync","decorator","Promise","resolve","createTableStatement","then","result","removeDecoratorAsync"],"mappings":"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","file":"Migrator.js","sourcesContent":["import TableStatementBuilder from \"./TableStatementBuilder\";\nimport TableNameHelper from \"./TableNameHelper\";\n\nexport default class Migrator {\n    constructor(iDb, metaDb) {\n        this.schema = iDb.schema;\n        this.iDb = iDb;\n        this.connectionPool = iDb.connectionPool;\n        this.name = \"MsSqlMigrator\";\n        this.metaDb = metaDb;\n    }\n\n    addColumnAsync(edm, options = {}) {\n        let edmTable = this.iDb.getTable(options.tableName).table;\n        let namer = new TableNameHelper({edm:edm, schema:this.schema});\n        let builder = new TableStatementBuilder(edmTable, {\n            edm: edm,\n            schema: this.schema\n        });\n        let query = `ALTER TABLE ${namer.getQualifiedTableName(options.tableName)} ADD `;\n        query += builder.createColumnDefinitionStatement(options.column);\n\n        return this.connectionPool.request().query(query);\n    }\n\n    addDecoratorAsync(edm, options = {}) {\n        let metaTable = this.metaDb.getTable(options.tableName);\n        if (metaTable) {\n            return metaTable.addDecoratorAsync(options.decorator);\n        } else {\n            return Promise.resolve();\n        }\n    }\n\n    addOneToOneRelationshipAsync(edm, options = {}) {\n        // nothing to do here\n    }\n\n    addOneToManyRelationshipAsync(edm, options = {}) {\n        // nothing to do here\n    }\n\n    addTableAsync(edm, options = {}) {\n        let table = options;\n        let builder = new TableStatementBuilder(table, {\n            edm: edm,\n            schema: this.schema\n        });\n        let query = builder.createTableStatement();\n\n        return this.connectionPool.request().query(query).then((result) => {\n            return [];\n        });\n    }\n\n    removeColumnAsync(edm, options = {}) {\n    }\n\n    removeDecoratorAsync(edm, options = {}) {\n        let metaTable = this.metaDb.getTable(options.tableName);\n        if (metaTable) {\n            return metaTable.removeDecoratorAsync(options.decorator);\n        } else {\n            return Promise.resolve();\n        }\n    }\n\n    removeOneToOneRelationshipCommand(edm, options = {}){\n    }\n\n    removeOneToManyRelationshipCommand(edm, options = {}){\n    }\n\n    removeTableAsync(edm, options = {}) {\n    }\n\n    updateColumnAsync(edm, options = {}) {\n    }\n\n    updateDecoratorAsync(edm, options = {}) {\n    }\n\n    updateTableAsync(edm, options = {}) {\n    }\n}\n"]}