{"version":3,"sources":["../../src/mssql/Database.js"],"names":["edmValidator","Database","options","mssqlDatabase","edm","schema","Error","name","tables","validate","_createTables","forEach","table","find","walkedTables","_walkRelationships","tablesWalked","indexOf","forEachRelationship","relationship","sourceTable","_getTableFromEdm","type","relationships","oneToOne","filter","ofType","oneToMany","push","buildOrder","_getTableBuildOrder","reduce","promise","then","sqliteDatabaseTable","createAsync","Promise","resolve","reverse","dropAsync","Object","keys","map"],"mappings":"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","file":"Database.js","sourcesContent":["import Table from \"./Table\";\nimport Validator from \"./../edm/Validator\";\nimport dataTypeMapping from \"./dataTypeMapping\";\n\nconst edmValidator = new Validator(dataTypeMapping);\n\nexport default class Database {\n    constructor(options = {}) {\n        let mssqlDatabase = options.mssqlDatabase;\n        let edm = options.edm;\n        let schema = options.schema;\n\n        if (mssqlDatabase == null) {\n            throw new Error(\"Database needs to have an mssqlDatabase.\");\n        }\n        if (edm == null) {\n            throw new Error(\"Database needs to have an edm.\");\n        }\n\n        this.schema = schema;\n        this.name = edm.name;\n        this.edm = edm;\n        this.mssqlDatabase = mssqlDatabase;\n        this.tables = {};\n\n        edmValidator.validate(edm);\n        this._createTables();\n    }\n\n    _createTables() {\n        let options = {\n            mssqlDatabase: this.mssqlDatabase,\n            edm: this.edm,\n            schema: this.schema\n        };\n\n        this.edm.tables.forEach((table) => {\n            this.tables[table.name] = new Table(table.name, options);\n        });\n    }\n\n    _getTableFromEdm(name) {\n        return this.edm.tables.find((table) => {\n            return table.name = name;\n        });\n    }\n\n    _getTableBuildOrder() {\n        let walkedTables = [];\n\n        this.edm.tables.forEach((table) => {\n            this._walkRelationships(table, walkedTables);\n        });\n\n        return walkedTables;\n    }\n\n    _walkRelationships(table, tablesWalked) {\n        if (tablesWalked.indexOf(table) > -1) {\n            return;\n        }\n\n        let forEachRelationship = (relationship) => {\n            let sourceTable = this._getTableFromEdm(relationship.type);\n            this._walkRelationships(sourceTable, tablesWalked);\n        }\n\n        this.edm.relationships.oneToOne.filter((relationship) => {\n            relationship.ofType === table.name;\n        }).forEach(forEachRelationship);\n\n        this.edm.relationships.oneToMany.filter((relationship) => {\n            relationship.ofType === table.name;\n        }).forEach(forEachRelationship);\n\n        tablesWalked.push(table);\n    }\n\n    createAsync() {\n        let buildOrder = this._getTableBuildOrder();\n\n        return buildOrder.reduce((promise, table) => {\n            return promise.then(() => {\n                let sqliteDatabaseTable = this.tables[table.name];\n                return sqliteDatabaseTable.createAsync();\n            });\n        }, Promise.resolve());\n    }\n\n    dropAsync() {\n        let buildOrder = this._getTableBuildOrder().reverse();\n\n        return buildOrder.reduce((promise, table) => {\n            return promise.then(() => {\n                let sqliteDatabaseTable = this.tables[table.name];\n                return sqliteDatabaseTable.dropAsync();\n            });\n        }, Promise.resolve());\n    }\n\n    getTable(name) {\n        return this.tables[name];\n    }\n\n    getTables() {\n        return Object.keys(this.tables).map((name) => {\n            return this.tables[name];\n        });\n    }\n\n}"]}