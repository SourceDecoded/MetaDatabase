{"version":3,"sources":["../../src/mssql/Database.js"],"names":["edmValidator","Database","options","connectionPool","edm","schema","Error","name","tables","validate","_createTables","forEach","_createTable","table","find","walkedTables","_walkRelationships","tablesWalked","indexOf","forEachRelationship","relationship","sourceTable","_getTableFromEdm","type","relationships","oneToOne","filter","ofType","oneToMany","push","buildOrder","_getTableBuildOrder","reduce","promise","then","mssqlTable","createAsync","Promise","resolve","reverse","dropAsync","Object","keys","map"],"mappings":"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","file":"Database.js","sourcesContent":["import Table from \"./Table\";\nimport Migrator from \"./Migrator\";\nimport Validator from \"./../edm/Validator\";\nimport dataTypeMapping from \"./dataTypeMapping\";\n\nconst edmValidator = new Validator(dataTypeMapping);\n\nexport default class Database {\n    constructor(options = {}) {\n        let connectionPool = options.connectionPool;\n        let edm = options.edm;\n        let schema = options.schema;\n\n        if (connectionPool == null) {\n            throw new Error(\"Database needs to have a connectionPool.\");\n        }\n        if (edm == null) {\n            throw new Error(\"Database needs to have an edm.\");\n        }\n\n        this.schema = schema;\n        this.name = edm.name;\n        this.edm = edm;\n        this.connectionPool = connectionPool;\n        this.tables = {};\n\n        edmValidator.validate(edm);\n        this._createTables();\n    }\n\n    _createTables() {\n        this.edm.tables.forEach(table => this._createTable(table));\n    }\n\n    _createTable(table) {\n        let options = {\n            connectionPool: this.connectionPool,\n            edm: this.edm,\n            schema: this.schema\n        };\n\n        this.tables[table.name] = new Table(table.name, options);\n    }\n\n    _getTableFromEdm(name) {\n        return this.edm.tables.find((table) => {\n            return table.name = name;\n        });\n    }\n\n    _getTableBuildOrder() {\n        let walkedTables = [];\n\n        this.edm.tables.forEach((table) => {\n            this._walkRelationships(table, walkedTables);\n        });\n\n        return walkedTables;\n    }\n\n    _walkRelationships(table, tablesWalked) {\n        if (tablesWalked.indexOf(table) > -1) {\n            return;\n        }\n\n        let forEachRelationship = (relationship) => {\n            let sourceTable = this._getTableFromEdm(relationship.type);\n            this._walkRelationships(sourceTable, tablesWalked);\n        }\n\n        this.edm.relationships.oneToOne.filter((relationship) => {\n            relationship.ofType === table.name;\n        }).forEach(forEachRelationship);\n\n        this.edm.relationships.oneToMany.filter((relationship) => {\n            relationship.ofType === table.name;\n        }).forEach(forEachRelationship);\n\n        tablesWalked.push(table);\n    }\n\n    createAsync() {\n        let buildOrder = this._getTableBuildOrder();\n\n        return buildOrder.reduce((promise, table) => {\n            return promise.then(() => {\n                let mssqlTable = this.tables[table.name];\n                return mssqlTable.createAsync();\n            });\n        }, Promise.resolve());\n    }\n\n    dropAsync() {\n        let buildOrder = this._getTableBuildOrder().reverse();\n\n        return buildOrder.reduce((promise, table) => {\n            return promise.then(() => {\n                let mssqlTable = this.tables[table.name];\n                return mssqlTable.dropAsync();\n            });\n        }, Promise.resolve());\n    }\n\n    getTable(name) {\n        return this.tables[name];\n    }\n\n    getTables() {\n        return Object.keys(this.tables).map((name) => {\n            return this.tables[name];\n        });\n    }\n\n    refreshTables() {\n        this._createTables();\n    }\n\n    getMigrator() {\n        return new Migrator(this);\n    }\n\n}"]}