{"version":3,"sources":["../../src/mssql/Provider.js"],"names":["Provider","name","options","connectionPool","Error","edm","schema","queryBuilder","queryable","query","getQuery","statement","createStatement","request","then","results","entityBuilder","convert","recordset","count","countAsync","c","toArrayAsync","visitor","Visitor","createSelectStatementWithCount","result"],"mappings":";;;;;;;;AAAA;;;;;;;;IAEqBA,Q;AACjB,sBAAYC,IAAZ,EAAgC;AAAA,YAAdC,OAAc,uEAAJ,EAAI;;AAAA;;AAC5B,YAAIA,QAAQC,cAAR,IAA0B,IAA9B,EAAoC;AAChC,kBAAM,IAAIC,KAAJ,CAAU,iEAAV,CAAN;AACH;;AAED,YAAIF,QAAQG,GAAR,IAAe,IAAnB,EAAyB;AACrB,kBAAM,IAAID,KAAJ,CAAU,sDAAV,CAAN;AACH;;AAED,YAAIF,QAAQI,MAAR,IAAkB,IAAtB,EAA4B;AACxB,kBAAM,IAAIF,KAAJ,CAAU,wDAAV,CAAN;AACH;;AAED,aAAKC,GAAL,GAAWH,QAAQG,GAAnB;AACA,aAAKF,cAAL,GAAsBD,QAAQC,cAA9B;AACA,aAAKG,MAAL,GAAcJ,QAAQI,MAAtB;AACA,aAAKL,IAAL,GAAYA,IAAZ;AACA,aAAKM,YAAL,GAAoB,2BAAiB,KAAKF,GAAtB,CAApB;AACH;;;;qCAEYG,S,EAAW;AAAA;;AACpB,gBAAIC,QAAQD,UAAUE,QAAV,EAAZ;AACA,gBAAIC,YAAY,KAAKJ,YAAL,CAAkBK,eAAlB,CAAkCH,KAAlC,CAAhB;;AAEA,gBAAII,UAAU,KAAKV,cAAL,CAAoBU,OAApB,EAAd;;AAEA,mBAAOA,QAAQJ,KAAR,CAAcE,SAAd,EAAyBG,IAAzB,CAA8B,UAACC,OAAD,EAAa;AAC9C,uBAAO,MAAKC,aAAL,CAAmBC,OAAnB,CAA2BF,QAAQG,SAAnC,CAAP;AACH,aAFM,CAAP;AAGH;;;8CAEqBV,S,EAAW;AAAA;;AAC7B,gBAAIW,QAAQ,CAAZ;AACA,mBAAO,KAAKC,UAAL,CAAgB,UAACC,CAAD,EAAO;AAC1BF,wBAAQE,CAAR;AACA,uBAAO,OAAKC,YAAL,CAAkBd,SAAlB,CAAP;AACH,aAHM,EAGJM,IAHI,CAGC,UAACC,OAAD,EAAa;AACjB,uBAAO;AACHI,2BAAOA,KADJ;AAEHJ,6BAASA;AAFN,iBAAP;AAIH,aARM,CAAP;AASH;;;mCAEUP,S,EAAW;AAClB,gBAAIC,QAAQD,UAAUE,QAAV,EAAZ;AACA,gBAAIa,UAAU,IAAIC,OAAJ,CAAY,KAAKvB,IAAjB,EAAuB,KAAKI,GAA5B,EAAiC,KAAKC,MAAtC,CAAd;AACA,gBAAIK,YAAYY,QAAQE,8BAAR,CAAuChB,KAAvC,CAAhB;;AAEA,gBAAII,UAAU,KAAKV,cAAL,CAAoBU,OAApB,EAAd;;AAEA,mBAAOA,QAAQJ,KAAR,CAAcE,SAAd,EAAyBG,IAAzB,CAA8B,UAACY,MAAD,EAAY;AAC7C,uBAAOA,OAAOR,SAAP,CAAiB,CAAjB,EAAoBC,KAA3B;AACH,aAFM,CAAP;AAGH;;;;;;kBAvDgBnB,Q","file":"Provider.js","sourcesContent":["import QueryBuilder from \"./QueryBuilder\";\n\nexport default class Provider {\n    constructor(name, options = {}) {\n        if (options.connectionPool == null) {\n            throw new Error(\"Null Argument Exception: connectionPool is required in options.\");\n        }\n\n        if (options.edm == null) {\n            throw new Error(\"Null Argument Exception: edm is required in options.\");\n        }\n        \n        if (options.schema == null) {\n            throw new Error(\"Null Argument Exception: schema is required in options\");\n        }\n\n        this.edm = options.edm;\n        this.connectionPool = options.connectionPool;\n        this.schema = options.schema;\n        this.name = name;\n        this.queryBuilder = new QueryBuilder(this.edm);\n    }\n\n    toArrayAsync(queryable) {\n        let query = queryable.getQuery();\n        let statement = this.queryBuilder.createStatement(query);\n\n        let request = this.connectionPool.request();\n\n        return request.query(statement).then((results) => {\n            return this.entityBuilder.convert(results.recordset);\n        });\n    }\n\n    toArrayWithCountAsync(queryable) {\n        let count = 0;\n        return this.countAsync((c) => {\n            count = c;\n            return this.toArrayAsync(queryable);\n        }).then((results) => {\n            return {\n                count: count,\n                results: results\n            }\n        })\n    }\n\n    countAsync(queryable) {\n        let query = queryable.getQuery();\n        let visitor = new Visitor(this.name, this.edm, this.schema);\n        let statement = visitor.createSelectStatementWithCount(query);\n\n        let request = this.connectionPool.request();\n\n        return request.query(statement).then((result) => {\n            return result.recordset[0].count;\n        });\n    }\n}"]}