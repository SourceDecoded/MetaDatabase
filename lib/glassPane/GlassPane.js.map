{"version":3,"sources":["../../src/glassPane/GlassPane.js"],"names":["options","edm","metaDatabase","migrationRunner","actions","actionName","action","Promise","reject","executeAsync","tableName","table","entity"],"mappings":";;;;;;qjBAAA;AACA;;;AACA;;;;AACA;;;;;;;;;AAGI,oBAAYA,OAAZ,EAAqB;AAAA;;AACjB,aAAKC,GAAL,GAAWD,QAAQC,GAAnB;AACA,aAAKC,YAAL,GAAoBF,QAAQE,YAA5B;AACA,aAAKC,eAAL,GAAuBH,QAAQG,eAA/B;AACA,aAAKC,OAAL,GAAeJ,QAAQI,OAAvB;AACH;;;;kCAES;AACN;AACH;;;8CAEqBC,U,EAAYL,O,EAAS;AACvC,gBAAIM,SAAS,KAAKF,OAAL,CAAaH,GAAb,CAAiBI,UAAjB,CAAb;AACA,gBAAI,CAACC,MAAL,EAAa;AACT,uBAAOC,QAAQC,MAAR,CAAe,2BAA2BH,UAA1C,CAAP;AACH;AACDL,oBAAQE,YAAR,GAAuB,KAAKA,YAA5B;AACA,mBAAOI,OAAOG,YAAP,CAAoBT,OAApB,CAAP;AACH;;;gDAEuBU,S,EAAWL,U,EAAYL,O,EAAS;AACpD,gBAAIM,SAAS,KAAKF,OAAL,CAAaO,KAAb,CAAmBD,SAAnB,EAA8BL,UAA9B,CAAb;AACA,gBAAI,CAACC,MAAL,EAAa;AACT,uBAAOC,QAAQC,MAAR,CAAe,6BAA6BH,UAA5C,CAAP;AACH;AACDL,oBAAQE,YAAR,GAAuB,KAAKA,YAA5B;AACAF,oBAAQU,SAAR,GAAoBA,SAApB;AACA,mBAAOJ,OAAOG,YAAP,CAAoBT,OAApB,CAAP;AACH;;;iDAEwBU,S,EAAWL,U,EAAYL,O,EAAS;AACrD,gBAAIM,SAAS,KAAKF,OAAL,CAAaQ,MAAb,CAAoBF,SAApB,EAA+BL,UAA/B,CAAb;AACA,gBAAI,CAACC,MAAL,EAAa;AACT,uBAAOC,QAAQC,MAAR,CAAe,8BAA8BH,UAA7C,CAAP;AACH;AACDL,oBAAQE,YAAR,GAAuB,KAAKA,YAA5B;AACAF,oBAAQU,SAAR,GAAoBA,SAApB;AACA,mBAAOJ,OAAOG,YAAP,CAAoBT,OAApB,CAAP;AACH","file":"GlassPane.js","sourcesContent":["// GlassPane\n// Represent an EDM, manage its corresponding DB and Migrator\nimport Edm from \"../edm/Edm\";\nimport Migrator from \"../edm/Migrator\";\n\nexport default class {\n    constructor(options) {\n        this.edm = options.edm;\n        this.metaDatabase = options.metaDatabase;\n        this.migrationRunner = options.migrationRunner;\n        this.actions = options.actions;\n    }\n\n    dispose() {\n        // nothing to see here now, but one never knows!\n    }\n    \n    executeEdmActionAsync(actionName, options) {\n        let action = this.actions.edm[actionName];\n        if (!action) {\n            return Promise.reject(\"EDM action not found: \" + actionName);\n        }\n        options.metaDatabase = this.metaDatabase;\n        return action.executeAsync(options);\n    }\n\n    executeTableActionAsync(tableName, actionName, options) {\n        let action = this.actions.table[tableName][actionName];\n        if (!action) {\n            return Promise.reject(\"Table action not found: \" + actionName);\n        }\n        options.metaDatabase = this.metaDatabase;\n        options.tableName = tableName;\n        return action.executeAsync(options);\n    }\n\n    executeEntityActionAsync(tableName, actionName, options) {\n        let action = this.actions.entity[tableName][actionName];\n        if (!action) {\n            return Promise.reject(\"Entity action not found: \" + actionName);\n        }\n        options.metaDatabase = this.metaDatabase;\n        options.tableName = tableName;\n        return action.executeAsync(options);\n    }\n}"]}