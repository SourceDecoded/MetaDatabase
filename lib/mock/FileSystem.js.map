{"version":3,"sources":["../../src/mock/FileSystem.js"],"names":["FileWritable","files","path","chunk","encoding","next","FileSystem","Error","readStream","push","Promise","resolve","writeStream"],"mappings":";;;;;;;;AAAA;;;;;;;;IAEMA,Y;;;AACF,0BAAYC,KAAZ,EAAmBC,IAAnB,EAAyB;AAAA;;AAAA;;AAErB,cAAKD,KAAL,GAAaA,KAAb;AACA,cAAKC,IAAL,GAAYA,IAAZ;;AAEA,cAAKD,KAAL,CAAWC,IAAX,IAAmB,EAAnB;AALqB;AAMxB;;;;+BAEMC,K,EAAOC,Q,EAAUC,I,EAAM;AAC1B,iBAAKJ,KAAL,CAAW,KAAKC,IAAhB,KAAyBC,KAAzB;AACAE;AACH;;;;;;IAGgBC,U;AACjB,0BAAc;AAAA;;AACV,aAAKL,KAAL,GAAa,EAAb;AACH;;;;2CAEkBC,I,EAAM;AACrB,gBAAI,KAAKD,KAAL,CAAWC,IAAX,KAAoB,IAAxB,EAA8B;AAC1B,sBAAM,IAAIK,KAAJ,CAAU,oBAAV,CAAN;AACH;;AAED,gBAAIC,aAAa,sBAAjB;AACAA,uBAAWC,IAAX,CAAgB,KAAKR,KAAL,CAAWC,IAAX,CAAhB;AACAM,uBAAWC,IAAX,CAAgB,IAAhB;;AAEA,mBAAOC,QAAQC,OAAR,CAAgBH,UAAhB,CAAP;AACH;;;4CAEmBN,I,EAAM;AACtB,gBAAIU,cAAc,IAAIZ,YAAJ,CAAiB,KAAKC,KAAtB,EAA6BC,IAA7B,CAAlB;AACA,mBAAOQ,QAAQC,OAAR,CAAgBC,WAAhB,CAAP;AACH;;;wCAEeV,I,EAAM;AAClB,gBAAI,KAAKD,KAAL,CAAWC,IAAX,KAAoB,IAAxB,EAA8B;AAC1B,sBAAM,IAAIK,KAAJ,CAAU,oBAAV,CAAN;AACH;;AAED,iBAAKN,KAAL,CAAWC,IAAX,IAAmB,IAAnB;;AAEA,mBAAOQ,QAAQC,OAAR,EAAP;AACH;;;;;;kBA9BgBL,U","file":"FileSystem.js","sourcesContent":["import { Readable, Writable } from \"stream\";\n\nclass FileWritable extends Writable {\n    constructor(files, path) {\n        super();\n        this.files = files;\n        this.path = path;\n\n        this.files[path] = \"\";\n    }\n\n    _write(chunk, encoding, next) {\n        this.files[this.path] += chunk;\n        next();\n    }\n}\n\nexport default class FileSystem {\n    constructor() {\n        this.files = {};\n    }\n\n    getReadStreamAsync(path) {\n        if (this.files[path] == null) {\n            throw new Error(\"File didn't exist.\");\n        }\n\n        let readStream = new Readable();\n        readStream.push(this.files[path]);\n        readStream.push(null);\n\n        return Promise.resolve(readStream);\n    }\n\n    getWriteStreamAsync(path) {\n        let writeStream = new FileWritable(this.files, path);\n        return Promise.resolve(writeStream);\n    }\n\n    removeFileAsync(path) {\n        if (this.files[path] == null) {\n            throw new Error(\"File didn't exist.\");\n        }\n\n        this.files[path] = null;\n\n        return Promise.resolve();\n    }\n}"]}