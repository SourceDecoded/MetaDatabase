{"version":3,"sources":["../../src/edm/Validator.js"],"names":["defaultDataTypeMapping","Validator","dataTypeMapping","string","edm","Error","_isEmptyString","name","label","version","Array","isArray","tables","forEach","table","validateTable","validateRelationships","column","type","isPrimaryKey","isIndexed","isNullable","isAutoIncrement","decorator","relationship","hasKey","hasOne","hasOneLabel","ofType","withKey","withForeignKey","withOne","withOneLabel","hasMany","hasManyLabel","relationships","oneToOne","oneToMany","validateOneToOneRelationship","validateOneToManyRelationship","validateTableDescriptors","columns","decorators","validateDecorator","primaryKeyColumns","filter","validateColumn","length","pluralLabel"],"mappings":"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","file":"Validator.js","sourcesContent":["const defaultDataTypeMapping = {\n    \"String\": \"String\",\n    \"Number\": \"Number\",\n    \"Boolean\": \"Boolean\",\n    \"Float\": \"Float\",\n    \"Decimal\": \"Decimal\",\n    \"Double\": \"Double\",\n    \"Integer\": \"Integer\",\n    \"Date\": \"Date\",\n    \"Enum\": \"Enum\"\n};\n\nexport default class Validator {\n    constructor(dataTypeMapping) {\n        this.dataTypeMapping = dataTypeMapping || defaultDataTypeMapping;\n    }\n\n    _isEmptyString(string) {\n        return string == null || typeof string !== \"string\" || string === \"\";\n    }\n\n    validate(edm) {\n        if (edm == null) {\n            throw new Error(\"Invalid Argument: Edm cannot be null.\");\n        }\n\n        if (this._isEmptyString(edm.name)) {\n            throw new Error(\"Invalid Argument: Edm needs to have a name of type string.\");\n        }\n\n        if (this._isEmptyString(edm.label)) {\n            throw new Error(\"Invalid Argument: Edm needs to have a label of type string.\");\n        }\n\n        if (this._isEmptyString(edm.version)) {\n            throw new Error(\"Invalid Argument: Edm needs to have a version of type string.\");\n        }\n\n        if (!Array.isArray(edm.tables)) {\n            throw new Error(\"Invalid Argument: Edm needs an array of tables.\");\n        }\n\n        edm.tables.forEach((table) => {\n            this.validateTable(table);\n        });\n\n        this.validateRelationships(edm);\n    }\n\n    validateColumn(column) {\n        if (this._isEmptyString(column.name)) {\n            throw new Error(\"Invalid Argument: Column needs to have a name.\");\n        }\n\n        if (this._isEmptyString(column.label)) {\n            throw new Error(\"Invalid Argument: Column needs to hava a label.\");\n        }\n\n        if (this.dataTypeMapping[column.type] == null) {\n            throw new Error(`Invalid Argument: Unknown Column Type: ${column.type}.`);\n        }\n\n        if (column.isPrimaryKey && column.type !== \"Integer\") {\n            throw new Error(\"Invalid Argument: If the column is the primary key, it needs to be of type Integer.\");\n        }\n\n        if (typeof column.isIndexed !== \"boolean\") {\n            column.isIndexed = false;\n        }\n\n        if (typeof column.isNullable !== \"boolean\") {\n            column.isNullable = true;\n        }\n\n        if (typeof column.isAutoIncrement !== \"boolean\") {\n            column.isAutoIncrement = false;\n        }\n\n    }\n\n    validateDecorator(decorator) {\n        if (this._isEmptyString(decorator.name)) {\n            throw new Error(\"Invalid Argument: Decorators need to have a name property.\");\n        }\n    }\n\n    validateOneToOneRelationship(relationship) {\n        if (this._isEmptyString(relationship.type)) {\n            throw new Error(\"Invalid Argument: One to one relationships needs to have a type property.\");\n        }\n\n        if (this._isEmptyString(relationship.hasKey)) {\n            throw new Error(\"Invalid Argument: One to one relationships needs to have a hasKey property.\");\n        }\n\n        if (this._isEmptyString(relationship.hasOne)) {\n            throw new Error(\"Invalid Argument: One to one relationships needs to have a hasOne property.\");\n        }\n\n        if (this._isEmptyString(relationship.hasOneLabel)) {\n            throw new Error(\"Invalid Argument: One to one relationships needs to have a hasOneLabel property.\");\n        }\n\n        if (this._isEmptyString(relationship.ofType)) {\n            throw new Error(\"Invalid Argument: One to one relationships needs to have a ofType property.\");\n        }\n\n        if (this._isEmptyString(relationship.withKey)) {\n            throw new Error(\"Invalid Argument: One to one relationships needs to have a withKey property.\");\n        }\n\n        if (this._isEmptyString(relationship.withForeignKey)) {\n            throw new Error(\"Invalid Argument: One to one relationships needs to have a withForeignKey property.\");\n        }\n\n        if (this._isEmptyString(relationship.withOne)) {\n            throw new Error(\"Invalid Argument: One to one relationships needs to have a withOne property.\");\n        }\n\n        if (this._isEmptyString(relationship.withOneLabel)) {\n            throw new Error(\"Invalid Argument: One to one relationships needs to have a withOneLabel property.\");\n        }\n    }\n\n    validateOneToManyRelationship(relationship) {\n        if (this._isEmptyString(relationship.type)) {\n            throw new Error(\"Invalid Argument: One to many relationships needs to have a type property.\");\n        }\n\n        if (this._isEmptyString(relationship.hasKey)) {\n            throw new Error(\"Invalid Argument: One to many relationships needs to have a hasKey property.\");\n        }\n\n        if (this._isEmptyString(relationship.hasMany)) {\n            throw new Error(\"Invalid Argument: One to many relationships needs to have a hasMany property.\");\n        }\n\n        if (this._isEmptyString(relationship.hasManyLabel)) {\n            throw new Error(\"Invalid Argument: One to many relationships needs to have a hasManyLabel property.\");\n        }\n\n        if (this._isEmptyString(relationship.ofType)) {\n            throw new Error(\"Invalid Argument: One to many relationships needs to have a ofType property.\");\n        }\n\n        if (this._isEmptyString(relationship.withKey)) {\n            throw new Error(\"Invalid Argument: One to many relationships needs to have a withKey property.\");\n        }\n\n        if (this._isEmptyString(relationship.withForeignKey)) {\n            throw new Error(\"Invalid Argument: One to many relationships needs to have a withForeignKey property.\");\n        }\n\n        if (this._isEmptyString(relationship.withOne)) {\n            throw new Error(\"Invalid Argument: One to many relationships needs to have a withOne property.\");\n        }\n\n        if (this._isEmptyString(relationship.withOneLabel)) {\n            throw new Error(\"Invalid Argument: One to many relationships needs to have a withOneLabel property.\");\n        }\n    }\n\n    validateRelationships(edm) {\n        if (edm.relationships == null) {\n            throw new Error(\"Invalid Argument: Edm needs to have a relationships object.\");\n        }\n\n        if (!Array.isArray(edm.relationships.oneToOne)) {\n            throw new Error(\"Invalid Argument: Edm needs to have a oneToOne array describing one to one relationships. It can be an empty array.\");\n        }\n\n        if (!Array.isArray(edm.relationships.oneToMany)) {\n            throw new Error(\"Invalid Argument: Edm needs to have a oneToMany array describing one to many relationships. It can be an empty array.\");\n        }\n\n        edm.relationships.oneToOne.forEach((relationship) => {\n            this.validateOneToOneRelationship(relationship);\n        });\n        edm.relationships.oneToMany.forEach((relationship) => {\n            this.validateOneToManyRelationship(relationship);\n        });\n    }\n\n    validateTable(table) {\n        this.validateTableDescriptors(table);\n\n        if (!Array.isArray(table.columns)) {\n            throw new Error(\"Invalid Argument: Table needs to have an array of columns.\");\n        }\n\n        if (Array.isArray(table.decorators)) {\n            table.decorators.forEach((decorator) => {\n                this.validateDecorator(decorator);\n            });\n        }\n\n        let primaryKeyColumns = table.columns.filter((column) => {\n            return column.isPrimaryKey;\n        });\n\n        table.columns.forEach((column) => {\n            this.validateColumn(column);\n        });\n\n        if (table.columns.length > 0 && primaryKeyColumns.length !== 1) {\n            throw new Error(\"Invalid Argument: Tables can only have one primary key.\");\n        }\n\n    }\n\n    validateTableDescriptors(table) {\n        if (table == null) {\n            throw new Error(\"Invalid Argument: Table cannot be null or undefined.\");\n        }\n\n        if (typeof table !== \"object\" || Array.isArray(table)) {\n            throw new Error(\"Invalid Argument: Table needs to be an object.\");\n        }\n\n        if (this._isEmptyString(table.name)) {\n            throw new Error(\"Invalid Argument: Table needs to have a name.\");\n        }\n\n        if (this._isEmptyString(table.label)) {\n            throw new Error(\"Invalid Argument: Table needs to have a label.\");\n        }\n\n        if (this._isEmptyString(table.pluralLabel)) {\n            throw new Error(\"Invalid Argument: Table needs to have a pluralLabel.\");\n        }\n\n    }\n}"]}