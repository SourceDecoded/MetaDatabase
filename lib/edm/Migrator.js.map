{"version":3,"sources":["../../src/edm/Migrator.js"],"names":["resolvedPromise","Promise","resolve","isEqualTo","left","right","leftKeys","Object","keys","rightKeys","length","every","key","Migrator","edm","validator","name","tableName","table","_getTable","columns","find","column","isPrimaryKey","columnName","_throwIfTableDoesNotExist","decoratorName","decorators","decorator","tables","_getDecorator","string","_throwIfColumnDoesNotExist","index","findIndex","splice","oldRelationship","newRelationship","_getColumn","Error","options","_throwIfColumnExist","validateColumn","_doesTableHavePrimaryKey","push","assign","validateDecorator","_hasDecorator","validateOneToOneRelationship","relationship","relationships","oneToOne","validateOneToManyRelationship","oneToMany","validateTableDescriptors","_throwIfTableExist","label","pluralLabel","updatedColumn"],"mappings":"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","file":"Migrator.js","sourcesContent":["import Validator from \"./Validator\";\n\nconst resolvedPromise = Promise.resolve();\n\nconst isEqualTo = (left, right) => {\n    let leftKeys = Object.keys(left);\n    let rightKeys = Object.keys(right);\n\n    if (leftKeys.length !== rightKeys.length) {\n        return false;\n    }\n\n    return leftKeys.every((key) => {\n        left[key] === right[key];\n    });\n}\n\nexport default class Migrator {\n    constructor(edm) {\n        this.validator = new Validator();\n        this.name = \"Edm Migrator\";\n        this.edm = edm;\n    }\n\n    _doesTableHavePrimaryKey(tableName) {\n        let table = this._getTable(tableName);\n\n        return table.columns.find((column) => {\n            return column.isPrimaryKey;\n        }) != null;\n    }\n\n    _getColumn(tableName, columnName) {\n        this._throwIfTableDoesNotExist(tableName);\n\n        let columns = this._getTable(tableName).columns;\n\n        return columns.find((column) => {\n            return column.name === columnName;\n        });\n    }\n\n    _getDecorator(tableName, decoratorName) {\n        this._throwIfTableDoesNotExist(tableName);\n        let table = this._getTable(tableName);\n\n        return table.decorators.find((decorator) => {\n            return decorator.name === decoratorName;\n        })\n    }\n\n    _getTable(name) {\n        let tables = this.edm.tables;\n\n        return tables.find((table) => {\n            return table.name === name;\n        });\n    }\n\n    _hasDecorator(tableName, decoratorName) {\n        return this._getDecorator(tableName, decoratorName) != null;\n    }\n\n    _isEmptyString(string) {\n        return string == null || typeof string !== \"string\" || string === \"\";\n    }\n\n    _setColumn(tableName, columnName, column) {\n        this._throwIfColumnDoesNotExist();\n        let columns = this._getTable(table).column;\n\n        let index = columns.findIndex((column) => {\n            column.name === columnName;\n        });\n\n        columns.splice(index, 1, column);\n    }\n\n    _setDecorator(decorators, decoratorName, decorator) {\n        let index = decorators.findIndex((decorator) => {\n            decorator.name === decoratorName;\n        });\n\n        decorators.splice(index, 1, decorator);\n    }\n\n    _replaceOneToOneRelationship(oldRelationship, newRelationship) {\n\n    }\n\n    _replaceOneToManyRelationship(oldRelationship, newRelationship) {\n\n    }\n\n    _throwIfColumnExist(tableName, columnName) {\n        let column = this._getColumn(tableName, columnName);\n\n        if (column != null) {\n            throw new Error(`'${columnName}' column already exists.`);\n        }\n    }\n\n    _throwIfColumnDoesNotExist(tableName, columnName) {\n        let column = this._getColumn(tableName, columnName);\n\n        if (column == null) {\n            throw new Error(`'${columnName}' column doesn't exists.`);\n        }\n    }\n\n    _throwIfTableExist(name) {\n        let table = this._getTable(name);\n\n        if (table != null) {\n            throw new Error(`'${name}' table already exists.`);\n        }\n    }\n\n    _throwIfTableDoesNotExist(name) {\n        let table = this._getTable(name);\n\n        if (table == null) {\n            throw new Error(`'${name}' table doesn't exists.`);\n        }\n    }\n\n    addColumnAsync(options = {}) {\n        let table = this._getTable(options.tableName);\n\n        this._throwIfColumnExist(options.tableName, options.column.name);\n        this.validator.validateColumn(options.column);\n\n        if (table.columns.length === 0 && !options.column.isPrimaryKey) {\n            throw new Error(\"First column to a table needs to be a primary key.\");\n        }\n\n        if (this._doesTableHavePrimaryKey(options.tableName) && options.column.isPrimaryKey) {\n            throw new Error(`The ${options.tableName} can only have one primary key.`);\n        }\n\n        table.columns.push(Object.assign({}, options.column));\n\n        return resolvedPromise;\n    }\n\n    addDecoratorAsync(options = {}) {\n        this._throwIfTableDoesNotExist(options.tableName);\n        let table = this._getTable(options.tableName);\n\n        this.validator.validateDecorator(options.decorator);\n\n        if (this._hasDecorator(table.name, options.decorator.name)) {\n            throw new Error(`The '${options.decorator.name}' decorator already exists on the '${options.tableName}' table.`);\n        }\n\n        table.decorators.push(Object.assign({}, options.decorator));\n\n        return resolvedPromise;\n    }\n\n    addOneToOneRelationshipAsync(options) {\n        this.validator.validateOneToOneRelationship(options.relationship);\n        this.edm.relationships.oneToOne.push(Object.assign({}, options.relationship));\n    }\n\n    addOneToManyRelationshipAsync(options) {\n        this.validator.validateOneToManyRelationship(options.relationship);\n        this.edm.relationships.oneToMany.push(Object.assign({}, options.relationship));\n    }\n\n    addTableAsync(options = {}) {\n        this.validator.validateTableDescriptors(options);\n        this._throwIfTableExist(options.name);\n\n        this.edm.tables.push({\n            name: options.name,\n            label: options.label,\n            pluralLabel: options.pluralLabel,\n            decorators: [],\n            columns: options.columns\n        });\n\n        return resolvedPromise;\n    }\n\n    removeColumnAsync(options = {}) {\n        this._throwIfTableDoesNotExist(options.tableName);\n        this._throwIfColumnDoesNotExist(options.tableName, options.column.name);\n\n        let table = this._getTable(options.tableName);\n        let column = this._getColumn(options.tableName, options.column.name);\n\n        if (column.isPrimaryKey && table.columns.length > 1) {\n            throw new Error(\"Cannot remove the primary key.\");\n        }\n\n        return resolvedPromise;\n    }\n\n    removeDecoratorAsync(options = {}) {\n        this._throwIfTableDoesNotExist(options.tableName);\n        let table = this._getTable(options.tableName);\n\n        let decorator = this._getDecorator(options.tableName, options.decorator.name);\n\n        if (decorator == null) {\n            throw new Error(`The ${options.tableName} doesn't have the ${options.decorator.name} to update.`);\n        }\n\n        let index = table.decorators.findIndex((decorator) => {\n            return decorator.name === options.decorator.name;\n        });\n        table.decorators.splice(index,1);\n        \n        return resolvedPromise;\n    }\n\n    removeTableAsync(options = {}) {\n        this._throwIfTableDoesNotExist(options.name);\n\n        let index = this.edm.tables.findIndex((table) => {\n            return table.name === options.name;\n        });\n\n        this.edm.tables.splice(index, 1);\n\n        return resolvedPromise;\n    }\n\n    updateColumnAsync(options = {}) {\n        let table = this._getTable(options.tableName);\n        this._throwIfTableDoesNotExist(options.tableName);\n        this._throwIfColumnDoesNotExist(options.tableName, options.column.name);\n\n        let column = this._getColumn(options.tableName, options.column.name);\n        let updatedColumn = Object.assign({}, column, options.column);\n\n        this.validator.validateColumn(updatedColumn);\n\n        if (typeof column.isPrimaryKey === \"boolean\" && column.isPrimaryKey !== updatedColumn.isPrimaryKey) {\n            throw new Error(\"Once a primary key has been set, you cannot remove it as a primary key. You can however rename its name, label, and pluralLabel.\");\n        }\n\n        Object.assign(column, updatedColumn);\n\n        return resolvedPromise;\n    }\n\n    updateDecoratorAsync(options = {}) {\n        this._throwIfTableDoesNotExist(options.tableName);\n\n        let table = this._getTable(options.tableName);\n        this.validator.validateDecorator(options.decorator);\n\n        let decorator = this._getDecorator(options.tableName, options.decorator.name);\n\n        if (decorator == null) {\n            throw new Error(`The ${options.tableName} doesn't have the ${options.decorator.name} to update.`);\n        }\n\n        Object.assign(decorator, options.decorator);\n\n        return resolvedPromise;\n    }\n\n    updateTableAsync(options = {}) {\n        this._throwIfTableDoesNotExist(options.name);\n\n        let table = this._getTable(options.name);\n        this.validator.validateTableDescriptors(Object.assign({}, table, options));\n\n        // We want to make sure that the developer doesn't change the columns and decorators here.\n        Object.assign(table, options, { decorators: table.decorators, columns: table.columns });\n\n        return resolvedPromise;\n    }\n\n}"]}