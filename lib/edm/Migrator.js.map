{"version":3,"sources":["../../src/edm/Migrator.js"],"names":["resolvedPromise","Promise","resolve","Migrator","validator","name","table","columns","find","column","isPrimaryKey","decoratorName","decorators","decorator","tables","_getDecorator","string","edm","columnName","_getColumn","Error","_getTable","options","tableName","_throwIfColumnExist","validateColumn","length","_doesTableHavePrimaryKey","push","_throwIfTableDoesNotExist","validateDecorator","_hasDecorator","validateOneToOneRelationship","relationship","relationships","oneToOne","validateOneToManyRelationship","oneToMany","validateTableDescriptors","_throwIfTableExist","label","pluralLabel","_throwIfColumnDoesNotExist","index","findIndex","splice","updatedColumn","Object","assign"],"mappings":"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","file":"Migrator.js","sourcesContent":["import Validator from \"./Validator\";\n\nconst resolvedPromise = Promise.resolve;\n\nexport default class Migrator {\n    constructor() {\n        this.validator = new Validator();\n        this.name = \"Edm Migrator\";\n    }\n\n    _doesTableHavePrimaryKey(table) {\n        return table.columns.find((column) => {\n            return column.isPrimaryKey;\n        }) != null;\n    }\n\n    _getColumn(columns, name) {\n        return columns.find((column) => {\n            return column.name === name;\n        });\n    }\n\n    _getDecorator(table, decoratorName) {\n        return table.decorators.find((decorator) => {\n            return decorator.name === decoratorName;\n        })\n    }\n\n    _getTable(tables, name) {\n        return tables.find((table) => {\n            return table.name === name;\n        });\n    }\n\n    _hasDecorator(table, decoratorName) {\n        return this._getDecorator(table, decoratorName) != null;\n    }\n\n    _isEmptyString(string) {\n        return string == null || typeof string !== \"string\" || string === \"\";\n    }\n\n    _throwIfColumnExist(edm, columns, columnName) {\n        let column = this._getColumn(columns, columnName);\n\n        if (column != null) {\n            throw new Error(`'${columnName}' column already exists.`);\n        }\n    }\n\n    _throwIfColumnDoesNotExist(edm, columns, columnName) {\n        let column = this._getColumn(columns, columnName);\n\n        if (column == null) {\n            throw new Error(`'${columnName}' column doesn't exists.`);\n        }\n    }\n\n    _throwIfTableExist(edm, name) {\n        let table = this._getTable(edm.tables, name);\n\n        if (table != null) {\n            throw new Error(`'${name}' table already exists.`);\n        }\n    }\n\n    _throwIfTableDoesNotExist(edm, name) {\n        let table = this._getTable(edm.tables, name);\n\n        if (table == null) {\n            throw new Error(`'${name}' table doesn't exists.`);\n        }\n    }\n\n    addColumnAsync(edm, options = {}) {\n        let table = this._getTable(edm.tables, options.tableName);\n        this._throwIfColumnExist(edm, table.columns, options.column.name);\n\n        this.validator.validateColumn(options.column);\n\n        if (table.columns.length === 0 && !options.column.isPrimaryKey) {\n            throw new Error(\"First column to a table needs to be a primary key.\");\n        }\n\n        if (this._doesTableHavePrimaryKey(table) && options.column.isPrimaryKey) {\n            throw new Error(`The ${options.table} can only have one primary key.`);\n        }\n\n        table.columns.push(options.column);\n\n        return resolvedPromise;\n    }\n\n    addDecoratorAsync(edm, options = {}) {\n        let table = this._getTable(edm.tables, options.tableName);\n        this._throwIfTableDoesNotExist(edm, options.tableName);\n\n        this.validator.validateDecorator(options.decorator);\n\n        if (this._hasDecorator(table, options.decorator.name)) {\n            throw new Error(`The '${options.decorator.name}' decorator already exists on the '${options.tableName}' table.`);\n        }\n\n        table.decorators.push(options.decorator);\n\n        return resolvedPromise;\n    }\n\n    addOneToOnRelationship(edm, options) {\n        this.validator.validateOneToOneRelationship(options.relationship);\n        edm.relationships.oneToOne.push(options.relationship);\n    }\n\n    addOneToManyRelationship(edm, options) {\n        this.validator.validateOneToManyRelationship(options.relationship);\n        edm.relationships.oneToMany.push(options.relationship);\n    }\n\n    addTableAsync(edm, options = {}) {\n        this.validator.validateTableDescriptors(options);\n        this._throwIfTableExist(edm, options.name);\n\n        edm.tables.push({\n            name: options.name,\n            label: options.label,\n            pluralLabel: options.pluralLabel,\n            decorators: [],\n            columns: []\n        });\n\n        return resolvedPromise;\n    }\n\n    removeColumnAsync(edm, options = {}) {\n        let table = this._getTable(edm.tables, options.tableName);\n        let column = this._getColumn(table.columns, options.column.name);\n\n        this._throwIfTableDoesNotExist(edm, options.tableName);\n        this._throwIfColumnDoesNotExist(edm, table.columns, options.column.name);\n\n        if (column.isPrimaryKey && table.columns.length > 1) {\n            throw new Error(\"Cannot remove the primary key.\");\n        }\n\n        return resolvedPromise;\n    }\n\n    removeDecoratorAsync(edm, options = {}) {\n        let table = this._getTable(edm.tables, options.tableName);\n        this._throwIfTableDoesNotExist(edm, options.tableName);\n\n        let decorator = this._getDecorator(table, options.decorator.name);\n\n        if (decorator == null) {\n            throw new Error(`The ${options.tableName} doesn't have the ${options.decorator.name} to update.`);\n        }\n\n        let index = table.decorators.findIndex((decorator) => {\n            return decorator.name === options.decorator.name;\n        });\n\n        table.decorators.splice(index, 1);\n\n        return resolvedPromise;\n    }\n\n    removeTableAsync(edm, options = {}) {\n        this._throwIfTableDoesNotExist(edm, options.name);\n\n        let index = edm.tables.findIndex((table) => {\n            return table.name === options.name;\n        });\n\n        edm.tables.splice(index, 1);\n\n        return resolvedPromise;\n    }\n\n    updateColumnAsync(edm, options = {}) {\n        let table = this._getTable(edm.tables, options.tableName);\n        this._throwIfTableDoesNotExist(edm, table.columns, options.column.name);\n\n        let column = this._getColumn(table.columns, options.column.name);\n        let updatedColumn = Object.assign({}, column, options.column);\n\n        this.validator.validateColumn(updatedColumn);\n\n        if (typeof column.isPrimaryKey === \"boolean\" && column.isPrimaryKey !== updatedColumn.isPrimaryKey) {\n            throw new Error(\"Once a primary key has been set, you cannot remove it as a primary key. You can however rename its name, label, and pluralLabel.\");\n        }\n\n        Object.assign(column, updatedColumn);\n\n        return resolvedPromise;\n    }\n\n    updateDecoratorAsync(edm, options = {}) {\n        let table = this._getTable(edm.tables, options.tableName);\n        this._throwIfTableDoesNotExist(edm, options.tableName);\n\n        this.validator.validateDecorator(options.decorator);\n\n        let decorator = this._getDecorator(table, options.decorator.name);\n\n        if (decorator == null) {\n            throw new Error(`The ${options.tableName} doesn't have the ${options.decorator.name} to update.`);\n        }\n\n        Object.assign(decorator, options.decorator);\n\n        return resolvedPromise;\n    }\n\n    updateTableAsync(edm, options = {}) {\n        this._throwIfTableDoesNotExist(edm, options.name);\n\n        let table = this._getTable(edm.tables, options.name);\n        this.validator.validateTableDescriptors(Object.assign({}, table, options));\n\n        // We want to make sure that the developer doesn't change the columns and decorators here.\n        Object.assign(table, options, { decorators: table.decorators, columns: table.columns });\n\n        return resolvedPromise;\n    }\n\n}"]}