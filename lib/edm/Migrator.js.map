{"version":3,"sources":["../../src/edm/Migrator.js"],"names":["resolvedPromise","Promise","resolve","Migrator","validator","table","columns","find","column","isPrimaryKey","name","decoratorName","decorators","decorator","tables","_getDecorator","string","edm","columnName","_getColumn","Error","_getTable","options","tableName","_throwIfColumnExist","validateColumn","length","_doesTableHavePrimaryKey","push","_throwIfTableDoesNotExist","validateDecorator","_hasDecorator","validateOneToOneRelationship","relationship","relationships","oneToOne","validateOneToManyRelationship","oneToMany","validateTableDescriptors","_throwIfTableExist","label","pluralLabel","index","findIndex","splice","updatedColumn","Object","assign"],"mappings":"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","file":"Migrator.js","sourcesContent":["import Validator from \"./Validator\";\n\nconst resolvedPromise = Promise.resolve;\n\nexport default class Migrator {\n    constructor() {\n        this.validator = new Validator();\n    }\n\n    _doesTableHavePrimaryKey(table) {\n        return table.columns.find((column) => {\n            return column.isPrimaryKey;\n        }) != null;\n    }\n\n    _getColumn(columns, name) {\n        return columns.find((column) => {\n            return column.name === name;\n        });\n    }\n\n    _getDecorator(table, decoratorName) {\n        return table.decorators.find((decorator) => {\n            return decorator.name === decoratorName;\n        })\n    }\n\n    _getTable(tables, name) {\n        return tables.find((table) => {\n            return table.name === name;\n        });\n    }\n\n    _hasDecorator(table, decoratorName) {\n        return this._getDecorator(table, decoratorName) != null;\n    }\n\n    _isEmptyString(string) {\n        return string == null || typeof string !== \"string\" || string === \"\";\n    }\n\n    _throwIfColumnExist(edm, columns, columnName) {\n        let column = this._getColumn(columns, columnName);\n\n        if (column != null) {\n            throw new Error(`'${columnName}' column already exists.`);\n        }\n    }\n\n    _throwIfColumnDoesNotExist(edm, columns, columnName) {\n        let column = this._getColumn(columns, columnName);\n\n        if (column == null) {\n            throw new Error(`'${columnName}' column doesn't exists.`);\n        }\n    }\n\n    _throwIfTableExist(edm, name) {\n        let table = this._getTable(edm.tables, name);\n\n        if (table != null) {\n            throw new Error(`'${name}' table already exists.`);\n        }\n    }\n\n    _throwIfTableDoesNotExist(edm, name) {\n        let table = this._getTable(edm.tables, name);\n\n        if (table == null) {\n            throw new Error(`'${name}' table doesn't exists.`);\n        }\n    }\n\n    addColumnAsync(edm, options = {}) {\n        let table = this._getTable(edm.tables, options.tableName);\n        this._throwIfColumnExist(edm, table.columns, options.column.name);\n\n        this.validator.validateColumn(options.column);\n\n        if (table.columns.length === 0 && !options.column.isPrimaryKey) {\n            throw new Error(\"First column to a table needs to be a primary key.\");\n        }\n\n        if (this._doesTableHavePrimaryKey(table) && options.column.isPrimaryKey) {\n            throw new Error(`The ${options.table} can only have one primary key.`);\n        }\n\n        table.columns.push(options.column);\n\n        return resolvedPromise;\n    }\n\n    addDecoratorAsync(edm, options = {}) {\n        let table = this._getTable(edm.tables, options.tableName);\n        this._throwIfTableDoesNotExist(edm, options.tableName);\n\n        this.validator.validateDecorator(options.decorator);\n\n        if (this._hasDecorator(table, options.decorator.name)) {\n            throw new Error(`The '${options.decorator.name}' decorator already exists on the '${options.tableName}' table.`);\n        }\n\n        table.decorators.push(options.decorator);\n\n        return resolvedPromise;\n    }\n\n    addOneToOnRelationship(edm, options) {\n        this.validator.validateOneToOneRelationship(options.relationship);\n        edm.relationships.oneToOne.push(options.relationship);\n    }\n\n    addOneToManyRelationship(edm, options) {\n        this.validator.validateOneToManyRelationship(options.relationship);\n        edm.relationships.oneToMany.push(options.relationship);\n    }\n\n    addTableAsync(edm, options = {}) {\n        this.validator.validateTableDescriptors(options);\n        this._throwIfTableExist(edm, options.name);\n\n        edm.tables.push({\n            name: options.name,\n            label: options.label,\n            pluralLabel: options.pluralLabel,\n            decorators: [],\n            columns: []\n        });\n\n        return resolvedPromise;\n    }\n\n    removeColumnAsync(edm, options = {}) {\n        let table = this._getTable(edm.tables, options.tableName);\n        this._throwIfTableDoesNotExist(edm, table.columns, options.columnName);\n\n        let column = this._getColumn(table.columns, options.columnName);\n\n        if (column.isPrimaryKey) {\n            throw new Error(\"Cannot remove the primary key.\");\n        }\n\n        return resolvedPromise;\n    }\n\n    removeDecoratorAsync(edm, options = {}) {\n        let table = this._getTable(edm.tables, options.tableName);\n        this._throwIfTableDoesNotExist(edm, options.tableName);\n\n        let decorator = this._getDecorator(table, options.decoratorName);\n\n        if (decorator == null) {\n            throw new Error(`The ${options.tableName} doesn't have the ${options.decorator.name} to update.`);\n        }\n\n        let index = table.decorators.findIndex((decorator) => {\n            return decorator.name === options.decoratorName;\n        });\n\n        table.decorators.splice(index, 1);\n\n        return resolvedPromise;\n    }\n\n    removeTableAsync(edm, options = {}) {\n        this._throwIfTableDoesNotExist(edm, options.tableName);\n\n        let index = edm.tables.findIndex((table) => {\n            return table.name === options.tableName;\n        });\n\n        edm.tables.splice(index, 1);\n\n        return resolvedPromise;\n    }\n\n    updateColumnAsync(edm, options = {}) {\n        let table = this._getTable(edm.tables, options.tableName);\n        this._throwIfTableDoesNotExist(edm, table.columns, options.columnName);\n\n        let column = this._getColumn(table.columns, options.columnName);\n        let updatedColumn = Object.assign({}, column, options.column);\n\n        this.validator.validateColumn(updatedColumn);\n\n        if (typeof column.isPrimaryKey === \"boolean\" && column.isPrimaryKey !== updatedColumn.isPrimaryKey) {\n            throw new Error(\"Once a primary key has been set, you cannot remove it as a primary key. You can however rename its name, label, and pluralLabel.\");\n        }\n\n        Object.assign(column, updatedColumn);\n\n        return resolvedPromise;\n    }\n\n    updateDecoratorAsync(edm, options = {}) {\n        let table = this._getTable(edm.tables, options.tableName);\n        this._throwIfTableDoesNotExist(edm, options.tableName);\n\n        this.validator.validateDecorator(options.decorator);\n\n        let decorator = this._getDecorator(table, options.decorator.name);\n\n        if (decorator == null) {\n            throw new Error(`The ${options.tableName} doesn't have the ${options.decorator.name} to update.`);\n        }\n\n        Object.assign(decorator, options.decorator);\n\n        return resolvedPromise;\n    }\n\n    updateTableAsync(edm, options = {}) {\n        this._throwIfTableDoesNotExist(edm, options.name);\n\n        let table = this._getTable(edm.tables, options.name);\n        this.validator.validateTableDescriptors(Object.assign({}, table, options));\n\n        // We want to make sure that the developer doesn't change the columns and decorators here.\n        Object.assign(table, options, { decorators: table.decorators, columns: table.columns });\n\n        return resolvedPromise;\n    }\n\n}"]}