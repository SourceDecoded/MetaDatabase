{"version":3,"sources":["../../src/edm/CommandBuilder.js"],"names":["CommandBuilder","column","command","execute","action","options","type","name","label","isPrimaryKey","isAutoIncrement","isNullable","isIndexed","revert","table","pluralLabel","edm","tables","reduce","accumulator"],"mappings":";;;;;;;;AAAA;;;;;;;;IAEqBA,c;AACjB,8BAAc;AAAA;AAEb;;;;wCAEeC,M,EAAQ;AACpB,gBAAIC,UAAU,uBAAd;AACAA,oBAAQC,OAAR,CAAgBC,MAAhB,GAAyB,WAAzB;AACAF,oBAAQC,OAAR,CAAgBE,OAAhB,GAA0B;AACtBC,sBAAML,OAAOK,IADS;AAEtBC,sBAAMN,OAAOM,IAFS;AAGtBC,uBAAOP,OAAOO,KAHQ;AAItBC,8BAAc,OAAOR,OAAOQ,YAAd,KAA+B,SAA/B,GAA2CR,OAAOQ,YAAlD,GAAiE,KAJzD;AAKtBC,iCAAiB,OAAOT,OAAOS,eAAd,KAAkC,SAAlC,GAA8CT,OAAOS,eAArD,GAAuE,KALlE;AAMtBC,4BAAY,OAAOV,OAAOU,UAAd,KAA6B,SAA7B,GAAyCV,OAAOU,UAAhD,GAA6D,KANnD;AAOtBC,2BAAW,OAAOX,OAAOW,SAAd,KAA4B,SAA5B,GAAwCX,OAAOW,SAA/C,GAA2D;AAPhD,aAA1B;;AAUAV,oBAAQW,MAAR,CAAeT,MAAf,GAAwB,cAAxB;AACAF,oBAAQW,MAAR,CAAeR,OAAf,GAAyB;AACrBC,sBAAML,OAAOK,IADQ;AAErBC,sBAAMN,OAAOM,IAFQ;AAGrBC,uBAAOP,OAAOO,KAHO;AAIrBC,8BAAc,OAAOR,OAAOQ,YAAd,KAA+B,SAA/B,GAA2CR,OAAOQ,YAAlD,GAAiE,KAJ1D;AAKrBC,iCAAiB,OAAOT,OAAOS,eAAd,KAAkC,SAAlC,GAA8CT,OAAOS,eAArD,GAAuE,KALnE;AAMrBC,4BAAY,OAAOV,OAAOU,UAAd,KAA6B,SAA7B,GAAyCV,OAAOU,UAAhD,GAA6D,KANpD;AAOrBC,2BAAW,OAAOX,OAAOW,SAAd,KAA4B,SAA5B,GAAwCX,OAAOW,SAA/C,GAA2D;AAPjD,aAAzB;AASH;;;8CAEqBE,K,EAAO;AACzB,gBAAIZ,UAAU,uBAAd;AACAA,oBAAQC,OAAR,CAAgBC,MAAhB,GAAyB,UAAzB;AACAF,oBAAQC,OAAR,CAAgBE,OAAhB,GAA0B;AACtBE,sBAAMO,MAAMP,IADU;AAEtBC,uBAAOM,MAAMN,KAFS;AAGtBO,6BAAaD,MAAMC;AAHG,aAA1B;;AAMAb,oBAAQW,MAAR,CAAeT,MAAf,GAAwB,aAAxB;AACAF,oBAAQW,MAAR,CAAeR,OAAf,GAAyB;AACrBE,sBAAMO,MAAMP,IADS;AAErBC,uBAAOM,MAAMN,KAFQ;AAGrBO,6BAAaD,MAAMC;AAHE,aAAzB;AAKH;;;8CAEqBC,G,EAAK;AACvB,mBAAOA,IAAIC,MAAJ,CAAWC,MAAX,CAAkB,UAACC,WAAD,EAAcL,KAAd,EAAwB,CAEhD,CAFM,EAEJ,EAFI,CAAP;AAGH;;;;;;kBAnDgBd,c","file":"CommandBuilder.js","sourcesContent":["import Command from \"./../migration/Command\";\n\nexport default class CommandBuilder {\n    constructor() {\n\n    }\n\n    createAddColumn(column) {\n        let command = new Command();\n        command.execute.action = \"addColumn\";\n        command.execute.options = {\n            type: column.type,\n            name: column.name,\n            label: column.label,\n            isPrimaryKey: typeof column.isPrimaryKey === \"boolean\" ? column.isPrimaryKey : false,\n            isAutoIncrement: typeof column.isAutoIncrement === \"boolean\" ? column.isAutoIncrement : false,\n            isNullable: typeof column.isNullable === \"boolean\" ? column.isNullable : false,\n            isIndexed: typeof column.isIndexed === \"boolean\" ? column.isIndexed : false\n        };\n\n        command.revert.action = \"removeColumn\";\n        command.revert.options = {\n            type: column.type,\n            name: column.name,\n            label: column.label,\n            isPrimaryKey: typeof column.isPrimaryKey === \"boolean\" ? column.isPrimaryKey : false,\n            isAutoIncrement: typeof column.isAutoIncrement === \"boolean\" ? column.isAutoIncrement : false,\n            isNullable: typeof column.isNullable === \"boolean\" ? column.isNullable : false,\n            isIndexed: typeof column.isIndexed === \"boolean\" ? column.isIndexed : false\n        };\n    }\n\n    createAddTableCommand(table) {\n        let command = new Command();\n        command.execute.action = \"addTable\";\n        command.execute.options = {\n            name: table.name,\n            label: table.label,\n            pluralLabel: table.pluralLabel\n        }\n\n        command.revert.action = \"removeTable\";\n        command.revert.options = {\n            name: table.name,\n            label: table.label,\n            pluralLabel: table.pluralLabel\n        }\n    }\n\n    createCommandsFromEdm(edm) {\n        return edm.tables.reduce((accumulator, table) => {\n\n        }, []);\n    }\n}"]}