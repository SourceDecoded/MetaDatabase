{"version":3,"sources":["../src/MigrationRunner.js"],"names":["defaultOptions","edm","history","migrator","edmValidator","MigrationRunner","options","Object","assign","_validateOptions","action","id","Error","execute","actions","revert","validate","forEach","_validateAction","_validateEdm","_validateHistory","_validateMigrator","name","passedActionIndex","index","length","actionName","migratorAction","consequentialActions","apply","Array","isArray","migrate","error","modifiedError","stack"],"mappings":"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","file":"MigrationRunner.js","sourcesContent":["import EdmValidator from \"./EdmValidator\";\n\nconst defaultOptions = {\n    edm: null,\n    history: [],\n    migrator: null\n};\n\nconst edmValidator = new EdmValidator();\n\nexport default class MigrationRunner {\n    constructor(options) {\n        Object.assign({}, defaultOptions, options);\n        this._validateOptions(options);\n\n        this.edm = options.edm;\n        this.history = options.history;\n        this.migrator = options.migrator;\n    }\n\n    _validateAction(action) {\n        if (typeof action.id !== \"string\") {\n            throw new Error(\"Actions require an id.\");\n        }\n\n        if (action.execute == null) {\n            throw new Error(\"Actions require an execute object.\");\n        }\n\n        if (typeof actions.execute.action !== \"string\") {\n            throw new Error(\"Actions require an execute object with an action property of type string.\");\n        }\n\n        if (action.revert == null) {\n            throw new Error(\"Actions require an revert object.\");\n        }\n\n        if (typeof actions.revert.action !== \"string\") {\n            throw new Error(\"Actions require an revert object with an action property of type string.\");\n        }\n    }\n\n    _validateEdm(edm) {\n        edmValidator.validate(edm);\n    }\n\n    _validateHistory(history) {\n        history.forEach((action) => {\n            this._validateAction(action);\n        });\n    }\n\n    _validateOptions(options) {\n        this._validateEdm(options.edm);\n        this._validateHistory(options.history);\n        this._validateMigrator(options.migrator);\n    }\n\n    _validateMigrator(migrator) {\n        if (typeof migrator.name !== \"string\") {\n            throw new Error(\"Illegal Argument: Migrators need a name property.\");\n        }\n    }\n\n    /*\n        All actions return an array of other actions.\n    */\n    migrate(actions) {\n        let passedActionIndex = -1;\n\n        try {\n\n            for (let index = 0; index < actions.length; index++) {\n                let action = actions[index];\n                this._validateAction(action);\n\n                let actionName = action.execute.action;\n                let migratorAction = this.migrator[actionName];\n\n                if (typeof migratorAction !== \"function\") {\n                    throw new Error(`'${this.migrator.name}' migrator doesn't support this action. ${actionName}`);\n                }\n\n                let consequentialActions = migratorAction.apply(this.migrator, [edm, action.execute.options]);\n\n                if (Array.isArray(consequentialActions) && consequentialActions.length > 0) {\n                    this.migrate(consequentialActions);\n                }\n\n                passedActionIndex = index;\n            }\n\n        } catch (error) {\n\n            try {\n\n                for (let index = passedActionIndex; passedActionIndex > 0; passedActionIndex--) {\n                    let action = actions[index];\n                    let actionName = action.revert.action;\n                    let migratorAction = this.migrator[actionName];\n\n                    if (typeof migratorAction !== \"function\") {\n                        throw new Error(`Migrator doesn't support this action. ${actionName}`);\n                    }\n\n                    migratorAction.apply(this.migrator, [edm, action.revert.options]);\n\n                }\n\n            } catch (error) {\n                let modifiedError = Error(\"Failed to revert actions on a failed migration.\");\n                modifiedError.stack = error.stack;\n\n                throw modifiedError;\n            }\n\n            let modifiedError = new Error(\"Successfully reverted actions on a failed mirgration.\");\n            modifiedError.stack = error.stack;\n\n            throw modifiedError;\n        }\n\n    }\n\n}"]}