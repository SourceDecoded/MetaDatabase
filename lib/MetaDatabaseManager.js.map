{"version":3,"sources":["../src/MetaDatabaseManager.js"],"names":["MetaDatabaseManager","decorators","edmDatabase","fileSystem","sqlite","Error","metaDatabases","readyPromise","_createMetaDatabasesAsync","edm","getAllEdmsAsync","then","edms","reduce","promise","metaDatabase","databasePath","_getPathForDatabase","name","version","initializeAsync","Promise","resolve","user","path","access","constants","F_OK","database","push","getTable","addEntityAsync","decoratedEdm","createdBy","id","getAllDatabaseInformationAsync","results","map","information","JSON","parse","find","getDatabaseInformationAsync","toArrayAsync","result","asQueryable","where","expBuilder","and","property","isEqualTo","all","removeEntityAsync","unlink"],"mappings":"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","file":"MetaDatabaseManager.js","sourcesContent":["import Database from \"./sqlite/Database\";\nimport MetaDatabase from \"./MetaDatabase\";\n\nexport default class MetaDatabaseManager {\n    constructor({ decorators = [], edmDatabase = null, fileSystem = null, sqlite = null } = {}) {\n\n        if (edmDatabase == null) {\n            throw new Error(\"Null Argument exception: edmDatabase is needed to run MetaDatabaseManager.\");\n        }\n\n        if (fileSystem == null) {\n            throw new Error(\"Null Argument Excepetion: fileSystem is needed to run MetaDatabaseManager.\");\n        }\n\n        this.edmDatabase = edmDatabase;\n        this.decorators = decorators;\n        this.fileSystem = fileSystem;\n        this.sqlite = sqlite;\n        this.metaDatabases = [];\n        this.readyPromise = this._createMetaDatabasesAsync();\n    }\n\n    _createMetaDatabasesAsync(edm) {\n        return this.getAllEdmsAsync().then((edms) => {\n            return edms.reduce((promise, edm) => {\n                return promise.then(() => {\n                    let metaDatabase = new MetaDatabase({\n                        edm: edm,\n                        sqlite: this.sqlite,\n                        databasePath: this._getPathForDatabase(edm.name, edm.version),\n                        decorators: this.decorators\n                    });\n\n                    return metaDatabase.initializeAsync();\n                })\n            }, Promise.resolve());\n        });\n    }\n\n    _getPathForDatabase(name, version) {\n        return `${name}_${version}`;\n    }\n\n    addDatabaseAsync(user, edm) {\n        let path = this._getPathForDatabase(edm.name, edm.version);\n\n        this.fileSystem.access(path, this.fileSystem.constants.F_OK).then(() => {\n            throw new Error(\"Database already exists.\");\n        }).then(() => {\n            let metaDatabase = new MetaDatabase({\n                database: database,\n                decorators: this.decorators\n            });\n\n            this.metaDatabases.push(metaDatabase);\n\n            return metaDatabase.initializeAsync().then(() => {\n                return metaDatabase;\n            });\n        }).then((metaDatabase) => {\n            return this.edmDatabase.getTable(\"Edm\").addEntityAsync({\n                name: edm.name,\n                version: edm.version,\n                edm: edm,\n                decoratedEdm: metaDatabase.edm,\n                createdBy: user.id\n            });\n        });\n    }\n\n    getAllEdmsAsync() {\n        return this.getAllDatabaseInformationAsync().then((results) => {\n            return results.map((information) => {\n                return JSON.parse(information.decoratedEdm);\n            });\n        });\n    }\n\n    getDatabaseAsync(name, version) {\n        return this.readyPromise.then(() => {\n            return this.metaDatabases.find((metaDatabase) => {\n                return metaDatabase.name === name && metaDatabase.version === version;\n            });\n        });\n    }\n\n    getEdmAsync(name, version) {\n        return this.getDatabaseInformationAsync(name, version).toArrayAsync((result) => {\n            if (result == null) {\n                return null;\n            } else {\n                return JSON.parse(result.decoratedEdm);\n            }\n        });\n    }\n\n    getAllDatabaseInformationAsync() {\n        return this.edmDatabase.getTable(\"Edm\").asQueryable().toArrayAsync();\n    }\n\n    getDatabaseInformationAsync(name, version) {\n        return this.edmDatabase.getTable(\"Edm\").asQueryable().where((expBuilder) => {\n            return expBuilder.and(\n                expBuilder.property(\"name\").isEqualTo(name),\n                expBuilder.property(\"version\").isEqualTo(version)\n            );\n        }).toArrayAsync((results) => {\n            return results[0] || null;\n        });\n    }\n\n    removeDatabaseAsync(user, name, version) {\n        return this.readyPromise.then(() => {\n            return this.edmDatabase.getTable(\"Edm\").asQueryable().where((expBuilder) => {\n                return expBuilder.and(\n                    expBuilder.property(\"name\").isEqualTo(name),\n                    expBuilder.property(\"version\").isEqualTo(version)\n                );\n            }).toArrayAsync().then((results) => {\n                var information = results[0];\n\n                if (information == 0) {\n                    throw new Error(`Couldn't find database information for ${name}:${version}.`);\n                }\n\n                if (information.createdBy !== user.id) {\n                    throw new Error(\"You do not have permission to delete this database.\");\n                }\n\n                return Promise.all([\n                    this.edmDatabase.removeEntityAsync(information),\n                    this.fileSystem.unlink(this._getPathForDatabase(name, version))\n                ]);\n            });\n\n        });\n    }\n\n}"]}