{"version":3,"sources":["../src/EdmMigrator.js"],"names":["EdmMigrator","tables","name","find","table","index","edm","findIndex","Error","options","label","pluralLabel","_validateNewTableOptions","_throwIfTableExist","push","decorators","_validateUpdateTableOptions","_throwIfTableDoesNotExist","_getTable","update","splice"],"mappings":"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","file":"EdmMigrator.js","sourcesContent":["export default class EdmMigrator {\n    constructor() {\n    }\n\n    _getTable(tables, name) {\n        return this.tables.find((table) => {\n            return table.name === name;\n        });\n    }\n\n    _throwIfTableExist(name) {\n        let index = edm.tables.findIndex((table) => {\n            return table.name === name;\n        });\n\n        if (index > -1) {\n            throw new Error(`'${name}' table already exists.`);\n        }\n    }\n\n    _throwIfTableDoesNotExist(name) {\n        let index = edm.tables.findIndex((table) => {\n            return table.name === name;\n        });\n\n        if (index === -1) {\n            throw new Error(`'${name}' table doesn't exists.`);\n        }\n    }\n\n    _validateNewTableOptions(options) {\n        if (typeof options.name !== \"string\") {\n            throw new Error(`Illegal Argument: options.name needs to be a string.`);\n        }\n\n        if (typeof options.label !== \"string\") {\n            throw new Error(`Illegal Argument: options.label needs to be a string.`);\n        }\n\n        if (typeof options.pluralLabel !== \"string\") {\n            throw new Error(`Illegal Argument: options.pluralLabel needs to be a string.`);\n        }\n    }\n\n    _validateUpdateTableOptions(options) {\n        if (options.name != null && typeof options.name !== \"string\") {\n            throw new Error(`Illegal Argument: options.name needs to be a string.`);\n        }\n\n        if (options.label != null && typeof options.label !== \"string\") {\n            throw new Error(`Illegal Argument: options.label needs to be a string.`);\n        }\n\n        if (options.pluralLabel != null && typeof options.pluralLabel !== \"string\") {\n            throw new Error(`Illegal Argument: options.pluralLabel needs to be a string.`);\n        }\n    }\n\n    addTableAsync(edm, options) {\n        this._validateNewTableOptions(options);\n        this._throwIfTableExist(options.name);\n\n        edm.tables.push({\n            name: options.name,\n            label: options.label,\n            pluralLabel: options.pluralLabel,\n            decorators: []\n        });\n    }\n\n    updateTableAsync(edm, options) {\n        this._validateUpdateTableOptions(options);\n        this._throwIfTableDoesNotExist(options.name);\n\n        let table = this._getTable(edm.tables, options.name);\n        table.name = options.update.name != null ? options.update.name : table.name;\n        table.label = options.update.label != null ? options.update.label : table.label;\n        table.pluralLabel = options.update.pluralLabel != null ? options.update.pluralLabel : table.pluralLabel;\n    }\n\n    removeTableAsync(edm, options) {\n        this._throwIfTableDoesNotExist(options.name);\n\n        let index = edm.tables.findIndex((table) => {\n            return table.name === options.name;\n        });\n\n        edm.tables.splice(index, 1);\n    }\n}"]}