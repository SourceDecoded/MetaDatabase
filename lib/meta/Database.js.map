{"version":3,"sources":["../../src/meta/Database.js"],"names":["decorators","database","fileSystem","Array","isArray","Error","edm","name","version","tables","getTables","forEach","table","Object","keys","map"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;AAII,sBAIa;AAAA;;AAAA,uFAAJ,EAAI;AAAA,mCAHTA,UAGS;AAAA,YAHTA,UAGS,mCAHI,EAGJ;AAAA,iCAFTC,QAES;AAAA,YAFTA,QAES,iCAFE,IAEF;AAAA,mCADTC,UACS;AAAA,YADTA,UACS,mCADI,IACJ;;AAAA;;AAET,YAAI,CAACC,MAAMC,OAAN,CAAcJ,UAAd,CAAL,EAAgC;AAC5B,kBAAM,IAAIK,KAAJ,CAAU,oDAAV,CAAN;AACH;;AAED,YAAIJ,YAAY,IAAhB,EAAsB;AAClB,kBAAM,IAAII,KAAJ,CAAU,iEAAV,CAAN;AACH;;AAED,YAAIH,cAAc,IAAlB,EAAwB;AACpB,kBAAM,IAAIG,KAAJ,CAAU,mEAAV,CAAN;AACH;;AAED,aAAKJ,QAAL,GAAgBA,QAAhB;AACA,aAAKD,UAAL,GAAkBA,UAAlB;AACA,aAAKM,GAAL,GAAWL,SAASK,GAApB;AACA,aAAKC,IAAL,GAAY,KAAKD,GAAL,CAASC,IAArB;AACA,aAAKC,OAAL,GAAe,KAAKF,GAAL,CAASE,OAAxB;AACA,aAAKN,UAAL,GAAkBA,UAAlB;AACA,aAAKO,MAAL,GAAc,EAAd;;AAEAR,iBAASS,SAAT,GAAqBC,OAArB,CAA6B,UAACC,KAAD,EAAW;AACpC,kBAAKH,MAAL,CAAYG,MAAML,IAAlB,IAA0B,oBAAU;AAChCK,uBAAOA,KADyB;AAEhCZ,4BAAY,MAAKA,UAFe;AAGhCE,4BAAY,MAAKA;AAHe,aAAV,CAA1B;AAKH,SAND;AAQH;;;;iCAEQK,I,EAAM;AACX,mBAAO,KAAKE,MAAL,CAAYF,IAAZ,KAAqB,IAA5B;AACH;;;oCAEW;AAAA;;AACR,mBAAOM,OAAOC,IAAP,CAAY,KAAKL,MAAjB,EAAyBM,GAAzB,CAA6B,UAACR,IAAD,EAAU;AAC1C,uBAAO,OAAKE,MAAL,CAAYF,IAAZ,CAAP;AACH,aAFM,CAAP;AAGH","file":"Database.js","sourcesContent":["import Database from \"./../sqlite/Database\";\nimport Table from \"./Table\";\nimport path from \"path\";\nimport fileSystem from \"fs\";\n\nexport default class {\n\n    constructor({\n        decorators = [],\n        database = null,\n        fileSystem = null\n         } = {}) {\n\n        if (!Array.isArray(decorators)) {\n            throw new Error(\"Invalid Argument: decorators needs to be an array.\");\n        }\n\n        if (database == null) {\n            throw new Error(\"Null Argument Exception: MetaDatabase needs to have a database.\");\n        }\n\n        if (fileSystem == null) {\n            throw new Error(\"Null Argument Exception: MetaDatabase needs to have a fileSystem.\");\n        }\n\n        this.database = database;\n        this.decorators = decorators;\n        this.edm = database.edm;\n        this.name = this.edm.name;\n        this.version = this.edm.version;\n        this.fileSystem = fileSystem;\n        this.tables = {};\n\n        database.getTables().forEach((table) => {\n            this.tables[table.name] = new Table({\n                table: table,\n                decorators: this.decorators,\n                fileSystem: this.fileSystem\n            });\n        });\n\n    }\n\n    getTable(name) {\n        return this.tables[name] || null;\n    }\n\n    getTables() {\n        return Object.keys(this.tables).map((name) => {\n            return this.tables[name];\n        });\n    }\n\n}"]}