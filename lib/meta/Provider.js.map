{"version":3,"sources":["../../src/meta/Provider.js"],"names":["Provider","user","metaTable","metaDatabase","provider","table","decorators","obj","method","args","result","apply","Promise","resolve","queryable","query","getQuery","innerQueries","where","getMatchingNodes","reduce","queryableExpression","value","type","getTable","getQueryProvider","then","previousQueryable","promise","decorator","options","decoratorOptions","name","_invokeMethodAsync","_refineQueryableAsync","toArrayAsync","toArrayWithCountAsync","countAsync"],"mappings":"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","file":"Provider.js","sourcesContent":["import { Queryable, ValueExpression } from \"queryablejs\";\n\nexport default class Provider {\n    constructor(user, metaTable, metaDatabase) {\n        this.metaTable = metaTable;\n        this.metaDatabase = metaDatabase;\n        this.provider = metaTable.table.provider;\n        this.decorators = metaTable.decorators;\n        this.user = user;\n    }\n\n    _invokeMethodAsync(obj, method, args = []) {\n        if (obj != null && typeof obj[method] === \"function\") {\n            var result = obj[method].apply(obj, args);\n\n            if (!(result instanceof Promise)) {\n                result = Promise.resolve(result);\n            }\n\n            return result;\n        }\n\n        return Promise.resolve();\n    }\n\n    _refineInnerQueriesAsync(queryable) {\n        let query = queryable.getQuery();\n\n        let innerQueries = query.where.getMatchingNodes(new ValueExpression(\"queryable\"));\n\n        return innerQueries.reduce((queryableExpression) => {\n            let query = queryableExpression.value;\n            let queryable = new Queryable(query.type, query);\n            let provider = this.metaDatabase.getTable(query.type).getQueryProvider(this.user);\n\n        }, Queryable).then(() => {\n            return queryable;\n        });\n    }\n\n    _refineQueryableAsync(queryable) {\n        let user = this.user;\n        let previousQueryable = queryable;\n\n        return this.decorators.reduce((promise, decorator) => {\n            return promise.then((queryable) => {\n                previousQueryable = queryable;\n\n                let options = this.metaTable.decoratorOptions[decorator.name];\n                let result = this._invokeMethodAsync(decorator, \"refineQueryableAsync\", [user, queryable, options]);\n\n                if (result == null) {\n                    result = queryable;\n                }\n\n                if (!(result instanceof Promise)) {\n                    return Promise.resolve(result);\n                }\n\n                return result;\n            }).then((queryable) => {\n                if (!(queryable instanceof Queryable)) {\n                    return previousQueryable;\n                }\n                return queryable;\n            });\n        }, Promise.resolve(queryable));\n    }\n\n    toArrayAsync(queryable) {\n        let user = this.user;\n\n        return this._refineQueryableAsync(queryable).then((queryable) => {\n            return this.provider.toArrayAsync(queryable);\n        });\n    }\n\n    toArrayWithCountAsync(queryable) {\n        let user = this.user;\n\n        return this._refineQueryableAsync(queryable).then((queryable) => {\n            return this.provider.toArrayWithCountAsync(queryable);\n        });\n    }\n\n    countAsync(queryable) {\n        let user = this.user;\n\n        return this._refineQueryableAsync(queryable).then((queryable) => {\n            return this.provider.countAsync(queryable);\n        });\n    }\n}"]}