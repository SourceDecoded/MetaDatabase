{"version":3,"sources":["../../src/meta/Provider.js"],"names":["Provider","user","metaTable","provider","table","decorators","obj","method","args","result","apply","Promise","resolve","queryable","previousQueryable","reduce","promise","decorator","then","options","decoratorOptions","name","_invokeMethodAsync","_refineQueryableAsync","toArrayAsync","toArrayWithCountAsync","countAsync"],"mappings":";;;;;;;;AAAA;;;;IAEqBA,Q;AACjB,sBAAYC,IAAZ,EAAkBC,SAAlB,EAA6B;AAAA;;AACzB,aAAKA,SAAL,GAAiBA,SAAjB;AACA,aAAKC,QAAL,GAAgBD,UAAUE,KAAV,CAAgBD,QAAhC;AACA,aAAKE,UAAL,GAAkBH,UAAUG,UAA5B;AACA,aAAKJ,IAAL,GAAYA,IAAZ;AACH;;;;2CAEkBK,G,EAAKC,M,EAAmB;AAAA,gBAAXC,IAAW,uEAAJ,EAAI;;AACvC,gBAAIF,OAAO,IAAP,IAAe,OAAOA,IAAIC,MAAJ,CAAP,KAAuB,UAA1C,EAAsD;AAClD,oBAAIE,SAASH,IAAIC,MAAJ,EAAYG,KAAZ,CAAkBJ,GAAlB,EAAuBE,IAAvB,CAAb;;AAEA,oBAAI,EAAEC,kBAAkBE,OAApB,CAAJ,EAAkC;AAC9BF,6BAASE,QAAQC,OAAR,CAAgBH,MAAhB,CAAT;AACH;;AAED,uBAAOA,MAAP;AACH;;AAED,mBAAOE,QAAQC,OAAR,EAAP;AACH;;;8CAEqBC,S,EAAW;AAAA;;AAC7B,gBAAIZ,OAAO,KAAKA,IAAhB;AACA,gBAAIa,oBAAoBD,SAAxB;;AAEA,mBAAO,KAAKR,UAAL,CAAgBU,MAAhB,CAAuB,UAACC,OAAD,EAAUC,SAAV,EAAwB;AAClD,uBAAOD,QAAQE,IAAR,CAAa,UAACL,SAAD,EAAe;AAC/BC,wCAAoBD,SAApB;;AAEA,wBAAIM,UAAU,MAAKjB,SAAL,CAAekB,gBAAf,CAAgCH,UAAUI,IAA1C,CAAd;AACA,wBAAIZ,SAAS,MAAKa,kBAAL,CAAwBL,SAAxB,EAAmC,sBAAnC,EAA2D,CAAChB,IAAD,EAAOY,SAAP,EAAkBM,OAAlB,CAA3D,CAAb;;AAEA,wBAAIV,UAAU,IAAd,EAAoB;AAChBA,iCAASI,SAAT;AACH;;AAED,wBAAI,EAAEJ,kBAAkBE,OAApB,CAAJ,EAAkC;AAC9B,+BAAOA,QAAQC,OAAR,CAAgBH,MAAhB,CAAP;AACH;;AAED,2BAAOA,MAAP;AACH,iBAfM,EAeJS,IAfI,CAeC,UAACL,SAAD,EAAe;AACnB,wBAAI,EAAEA,2CAAF,CAAJ,EAAuC;AACnC,+BAAOC,iBAAP;AACH;AACD,2BAAOD,SAAP;AACH,iBApBM,CAAP;AAqBH,aAtBM,EAsBJF,QAAQC,OAAR,CAAgBC,SAAhB,CAtBI,CAAP;AAuBH;;;qCAEYA,S,EAAW;AAAA;;AACpB,gBAAIZ,OAAO,KAAKA,IAAhB;;AAEA,mBAAO,KAAKsB,qBAAL,CAA2BV,SAA3B,EAAsCK,IAAtC,CAA2C,UAACL,SAAD,EAAe;AAC7D,uBAAO,OAAKV,QAAL,CAAcqB,YAAd,CAA2BX,SAA3B,CAAP;AACH,aAFM,CAAP;AAGH;;;8CAEqBA,S,EAAW;AAAA;;AAC7B,gBAAIZ,OAAO,KAAKA,IAAhB;;AAEA,mBAAO,KAAKsB,qBAAL,CAA2BV,SAA3B,EAAsCK,IAAtC,CAA2C,UAACL,SAAD,EAAe;AAC7D,uBAAO,OAAKV,QAAL,CAAcsB,qBAAd,CAAoCZ,SAApC,CAAP;AACH,aAFM,CAAP;AAGH;;;mCAEUA,S,EAAW;AAAA;;AAClB,gBAAIZ,OAAO,KAAKA,IAAhB;;AAEA,mBAAO,KAAKsB,qBAAL,CAA2BV,SAA3B,EAAsCK,IAAtC,CAA2C,UAACL,SAAD,EAAe;AAC7D,uBAAO,OAAKV,QAAL,CAAcuB,UAAd,CAAyBb,SAAzB,CAAP;AACH,aAFM,CAAP;AAGH;;;;;;kBAzEgBb,Q","file":"Provider.js","sourcesContent":["import { Queryable } from \"queryablejs\";\n\nexport default class Provider {\n    constructor(user, metaTable) {\n        this.metaTable = metaTable;\n        this.provider = metaTable.table.provider;\n        this.decorators = metaTable.decorators;\n        this.user = user;\n    }\n\n    _invokeMethodAsync(obj, method, args = []) {\n        if (obj != null && typeof obj[method] === \"function\") {\n            var result = obj[method].apply(obj, args);\n\n            if (!(result instanceof Promise)) {\n                result = Promise.resolve(result);\n            }\n\n            return result;\n        }\n\n        return Promise.resolve();\n    }\n\n    _refineQueryableAsync(queryable) {\n        let user = this.user;\n        let previousQueryable = queryable;\n\n        return this.decorators.reduce((promise, decorator) => {\n            return promise.then((queryable) => {\n                previousQueryable = queryable;\n\n                let options = this.metaTable.decoratorOptions[decorator.name];\n                let result = this._invokeMethodAsync(decorator, \"refineQueryableAsync\", [user, queryable, options]);\n\n                if (result == null) {\n                    result = queryable;\n                }\n\n                if (!(result instanceof Promise)) {\n                    return Promise.resolve(result);\n                }\n\n                return result;\n            }).then((queryable) => {\n                if (!(queryable instanceof Queryable)) {\n                    return previousQueryable;\n                }\n                return queryable;\n            });\n        }, Promise.resolve(queryable));\n    }\n\n    toArrayAsync(queryable) {\n        let user = this.user;\n\n        return this._refineQueryableAsync(queryable).then((queryable) => {\n            return this.provider.toArrayAsync(queryable);\n        });\n    }\n\n    toArrayWithCountAsync(queryable) {\n        let user = this.user;\n\n        return this._refineQueryableAsync(queryable).then((queryable) => {\n            return this.provider.toArrayWithCountAsync(queryable);\n        });\n    }\n\n    countAsync(queryable) {\n        let user = this.user;\n\n        return this._refineQueryableAsync(queryable).then((queryable) => {\n            return this.provider.countAsync(queryable);\n        });\n    }\n}"]}