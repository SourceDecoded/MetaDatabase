{"version":3,"sources":["../../src/sqlite/EntityBuilder.js"],"names":["flattenMultiKeyMap","multiKeyMap","keys","getKeys","reduce","array","key","concat","get","getValues","EntityBuilder","name","edm","relationships","table","_getTable","delimiter","tableName","entity","entityMap","attachedEntities","sourceRelationships","_getTablesRelationshipsAsSources","targetRelationships","_getTablesRelationshipsAsTargets","oneToOneRelationships","filter","relationship","hasOne","oneToManyRelationships","hasMany","forEach","foreignTableName","ofType","foreignKey","withForeignKey","hasKey","target","Object","values","find","indexOf","targets","push","sourceTableName","type","withOne","source","row","_getKeyForEntity","_createEntity","parts","split","columnName","value","parseFloat","parseInt","Date","Error","columns","column","_convertValue","tables","accumulator","_getPrimaryKeys","map","join","isPrimaryKey","foreignKeyNames","oneToOne","oneToMany","keyNames","sqlResults","length","_createEntityMap","results","convertRow","_attachEntityRelationships"],"mappings":"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","file":"EntityBuilder.js","sourcesContent":["\nlet flattenMultiKeyMap = function (multiKeyMap) {\n    let keys = multiKeyMap.getKeys();\n    return keys.reduce(function (array, key) {\n        return array.concat(multiKeyMap.get(key).getValues());\n    }, []);\n}\n\nexport default class EntityBuilder {\n    constructor(name, edm) {\n        this.name = name;\n        this.edm = edm;\n        this.relationships = this.edm.relationships;\n        this.table = this._getTable(name);\n        this.delimiter = \"___\";\n    }\n\n    _attachEntityRelationships(tableName, entity, entityMap, attachedEntities) {\n        let table = this._getTable(tableName);\n\n        let sourceRelationships = this._getTablesRelationshipsAsSources(table, this.relationships);\n        let targetRelationships = this._getTablesRelationshipsAsTargets(table, this.relationships);\n\n        let oneToOneRelationships = sourceRelationships.filter((relationship) => {\n            return relationship.hasOne != null;\n        });\n\n        let oneToManyRelationships = sourceRelationships.filter((relationship) => {\n            return relationship.hasMany != null;\n        });\n\n        oneToOneRelationships.forEach((relationship) => {\n            let foreignTableName = relationship.ofType;\n            let foreignKey = relationship.withForeignKey;\n            let key = relationship.hasKey;\n            let hasOne = relationship.hasOne;\n\n            let target = Object.values(entityMap[foreignTableName]).find((target) => {\n                return target[foreignKey] === entity[key];\n            });\n\n            if (target != null && attachedEntities.indexOf(target) === -1) {\n                entity[hasOne] = target;\n\n                attachedEntities(foreignTableName, target, entityMap, attachedEntities.concat([entity]));\n            }\n        });\n\n        oneToManyRelationships.forEach((relationship) => {\n            let foreignTableName = relationship.ofType;\n            let foreignKey = relationship.withForeignKey;\n            let key = relationship.hasKey;\n            let hasMany = relationship.hasMany;\n\n            let targets = Object.values(entityMap[foreignTableName]).filter((target) => {\n                return target[foreignKey] === entity[key];\n            });\n\n            entity[hasOne] = [];\n\n            targets.forEach((target) => {\n                if (attachedEntities.indexOf(target) === -1) {\n                    entity[hasOne].push(target);\n                    attachedEntities(foreignTableName, target, entityMap, attachedEntities.concat([entity]));\n                }\n            });\n        });\n\n        targetRelationships.forEach((relationship) => {\n            let sourceTableName = relationship.type;\n            let foreignKey = relationship.withForeignKey;\n            let key = relationship.hasKey;\n            let withOne = relationship.withOne;\n\n            let source = Object.values(entityMap[sourceTableName]).find((source) => {\n                return source[key] === entity[foreignKey];\n            });\n\n            if (source != null && attachedEntities.indexOf(source) === -1) {\n                entity[withOne] = source;\n\n                attachedEntities(sourceTableName, source, entityMap, attachedEntities.concat([entity]));\n            }\n        });\n    }\n\n    _convertRow(row, entityMap) {\n        let edm = this.edm;\n        let name = this.name;\n        let key = this._getKeyForEntity(entity);\n        let entity = entityMap[this.name][key];\n\n        if (entity == null) {\n            entityMap[this.name][key] = this._createEntity(name, row);\n        }\n\n        Object.keys(row).forEach((key) => {\n            let parts = key.split(\"___\");\n            let tableName = parts[0];\n            let columnName = parts[1];\n\n            let entity = this._createEntity(tableName, row);\n\n            if (entity == null) {\n                entityMap[tableName][key] = entity;\n            }\n\n        });\n\n        return entity;\n    }\n\n    _convertValue(type, value) {\n        if (value == null) {\n            return null;\n        }\n\n        if (type === \"String\") {\n            return value;\n        } else if (type === \"Numeric\") {\n            return parseFloat(value);\n        } else if (type === \"Boolean\") {\n            return type == \"1\" ? true : false;\n        } else if (type === \"Float\") {\n            return parseFloat(value);\n        } else if (type === \"Decimal\") {\n            return parseFloat(value);\n        } else if (type === \"Double\") {\n            return parseFloat(value);\n        } else if (type === \"Integer\") {\n            return parseInt(value, 10);\n        } else if (type === \"Date\") {\n            return new Date(value);\n        } else if (type === \"Enum\") {\n            return parseInt(value, 10);\n        } else {\n            throw new Error(\"Unknown type.\");\n        }\n    }\n\n    _createEntity(type, row) {\n        let entity = {};\n        let columns = this._getTable(type).columns;\n        let delimiter = this.delimiter;\n\n        columns.forEach((column) => {\n            entity[column.name] = this._convertValue(row[`${type}${delimiter}${column.name}`]);\n        });\n\n        return entity;\n    }\n\n    _createEntityMap() {\n        return this.edm.tables.reduce((accumulator, table) => {\n            accumulator[table.name] = {};\n            return accumulator;\n        }, {});\n    }\n\n    _getKeyForEntity(entity) {\n        return this._getPrimaryKeys(type).map((key) => {\n            return entity[key];\n        }).join(\"|\");\n    }\n\n    _getPrimaryKeys(type) {\n        return this._getTable(type).columns.filter((column) => {\n            return column.isPrimaryKey;\n        }).map((column) => {\n            return column.name;\n        });\n    }\n\n    _getTable(name) {\n        return this.edm.tables.find((table) => {\n            return table.name === name;\n        });\n    }\n\n    _getTablesRelationshipsAsTargets(table, relationships) {\n        const foreignKeyNames = {};\n\n        const filter = (relationship) => {\n            const foreignKey = relationship.withForeignKey;\n\n            if (relationship.ofType === table.name && foreignKeyNames[foreignKey] == null) {\n                foreignKeyNames[foreignKey];\n                return true;\n            }\n            return false;\n        }\n\n        const oneToOne = relationships.oneToOne.filter(filter);\n        const oneToMany = relationships.oneToMany.filter(filter);\n\n        return oneToOne.concat(oneToMany);\n    }\n\n    _getTablesRelationshipsAsSources(table, relationships) {\n        const keyNames = {};\n\n        const filter = (relationship) => {\n            const key = relationship.hasKey;\n\n            if (relationship.type === table.name && keyNames[key] == null) {\n                keyNames[key];\n                return true;\n            }\n            return false;\n        }\n\n        const oneToOne = relationships.oneToOne.filter(filter);\n        const oneToMany = relationships.oneToMany.filter(filter);\n\n        return oneToOne.concat(oneToMany);\n    }\n\n    convert(sqlResults) {\n        let name = this.name;\n\n        if (sqlResults.length > 0) {\n            let entityMap = this._createEntityMap();\n\n            let results = sqlResults.map((row) => {\n                return this.convertRow(row, entityMap);\n            });\n\n            Object.keys(entityMap).forEach((key) => {\n                let parts = key.split(\"_|_\");\n                let tableName = parts[0];\n                let entity = entityMap[key];\n\n                this._attachEntityRelationships(tableName, entity, entityMap, []);\n            });\n\n            return results;\n        } else {\n            return [];\n        }\n    }\n\n\n}"]}