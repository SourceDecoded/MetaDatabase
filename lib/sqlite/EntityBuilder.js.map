{"version":3,"sources":["../../src/sqlite/EntityBuilder.js"],"names":["flattenMultiKeyMap","multiKeyMap","keys","getKeys","reduce","array","key","concat","get","getValues","EntityBuilder","BASE","sql","type","edm","model","getModelByType","Type","delimiter","prototype","attachEntityWithRelationships","entity","entityMap","oneToOneRelationships","getOneToOneRelationships","oneToOneAsTargetRelationships","getOneToOneAsTargetRelationships","oneToManyRelationships","getOneToManyRelationships","oneToManyAsTargetRelationships","getOneToManyAsTargetRelationships","manyToManyRelationships","getManyToManyRelationships","manyToManyAsTargetRelationships","getManyToManyAsTargetRelationships","forEach","relationship","sourceEntity","withForeignKey","hasOne","withOne","hasMany","push","mappingEntities","usingMappingType","mappingEntity","hasForeignKey","withKey","source","index","indexOf","withMany","getPrimaryKeyValueByType","row","getPrimaryKeyProperties","map","collectionName","join","convertRow","self","add","Object","parts","split","propertyName","getModel","primaryKey","properties","propertyType","Date","DateTimeOffset","Boolean","convert","sqlResults","length","MultiKeyMap","results","entities"],"mappings":"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","file":"EntityBuilder.js","sourcesContent":["\nvar flattenMultiKeyMap = function (multiKeyMap) {\n    var keys = multiKeyMap.getKeys();\n    return keys.reduce(function (array, key) {\n        return array.concat(multiKeyMap.get(key).getValues());\n    }, []);\n}\n\nvar EntityBuilder = BASE.sql.EntityBuilder = function (type, edm) {\n    this.type = type;\n    this.edm = edm;\n    this.model = this.edm.getModelByType(Type);\n    this.delimiter = \"___\";\n};\n\nEntityBuilder.prototype.attachEntityWithRelationships = function (entity, entityMap) {\n    var edm = this.edm;\n    var oneToOneRelationships = edm.getOneToOneRelationships(entity);\n    var oneToOneAsTargetRelationships = edm.getOneToOneAsTargetRelationships(entity);\n    var oneToManyRelationships = edm.getOneToManyRelationships(entity);\n    var oneToManyAsTargetRelationships = edm.getOneToManyAsTargetRelationships(entity);\n    var manyToManyRelationships = edm.getManyToManyRelationships(entity);\n    var manyToManyAsTargetRelationships = edm.getManyToManyAsTargetRelationships(entity);\n\n    oneToOneAsTargetRelationships.forEach(function (relationship) {\n        var sourceEntity = entityMap.get(relationship.type, entity[relationship.withForeignKey]);\n\n        if (sourceEntity != null) {\n            sourceEntity[relationship.hasOne] = entity;\n            entity[relationship.withOne] = sourceEntity;\n        }\n    });\n\n    oneToManyAsTargetRelationships.forEach(function (relationship) {\n        var sourceEntity = entityMap.get(relationship.type, entity[relationship.withForeignKey]);\n\n        if (sourceEntity != null) {\n            sourceEntity[relationship.hasMany].push(entity);\n            entity[relationship.withOne] = sourceEntity;\n        }\n    });\n\n    manyToManyAsTargetRelationships.forEach(function (relationship) {\n        var mappingEntities = entityMap.get(relationship.usingMappingType);\n\n        if (mappingEntities != null) {\n            mappingEntities.getValues().forEach(function (mappingEntity) {\n                if (mappingEntity[relationship.hasForeignKey] !== entity[relationship.withKey]) {\n                    return;\n                }\n\n                var source = entityMap.get(relationship.type, mappingEntity[relationship.withForeignKey]);\n                if (source != null) {\n                    var index = source[relationship.hasMany].indexOf(entity);\n                    if (index === -1) {\n                        source[relationship.hasMany].push(entity);\n                    }\n\n                    index = entity[relationship.withMany].indexOf(source);\n\n                    if (index === -1) {\n                        entity[relationship.withMany].push(source);\n                    }\n                }\n            });\n        }\n    });\n};\n\nEntityBuilder.prototype.getPrimaryKeyValueByType = function (Type, row) {\n    var keys = this.edm.getPrimaryKeyProperties(Type);\n    var model = this.edm.getModelByType(Type);\n    var delimiter = this.delimiter;\n\n    return keys.map(function (key) {\n        return row[model.collectionName + delimiter + key]\n    }).join(\"|\");\n};\n\nEntityBuilder.prototype.convertRow = function (row, entityMap) {\n    var self = this;\n    var edm = this.edm;\n    var Type = this.Type;\n    var key = this.getPrimaryKeyValueByType(Type, row);\n    var entity = entityMap.get(Type, key);\n\n    if (!entity) {\n        var entity = new Type();\n        entityMap.add(Type, key, entity);\n    }\n\n    Object.keys(row).forEach(function (key) {\n        var parts = key.split(\"___\");\n        var collectionName = parts[0];\n        var propertyName = parts[1];\n        var model = edm.getModel(collectionName);\n        var type = model.type;\n        var primaryKey = self.getPrimaryKeyValueByType(type, row);\n        var entity = entityMap.get(type, primaryKey);\n        var properties = model.properties;\n        var propertyType = properties[propertyName].type;\n\n        if (!entity) {\n            var entity = new type();\n            entityMap.add(type, primaryKey, entity);\n        }\n\n        if ((propertyType === Date || propertyType === DateTimeOffset) && row[key] !== null) {\n            entity[propertyName] = new Date(row[key]);\n        } else if (propertyType === Boolean) {\n            entity[propertyName] = row[key] ? true : false;\n        } else {\n            entity[propertyName] = row[key];\n        }\n\n    });\n\n    return entity;\n};\n\nEntityBuilder.prototype.convert = function (sqlResults) {\n    var self = this;\n    var Type = this.Type;\n\n    if (sqlResults.length > 0) {\n        var entityMap = new MultiKeyMap();\n        var results = sqlResults.map(function (row) {\n            return self.convertRow(row, entityMap);\n        });\n\n        var entities = flattenMultiKeyMap(entityMap);\n        entities.forEach(function (entity) {\n            self.attachEntityWithRelationships(entity, entityMap);\n        });\n\n        return results;\n    } else {\n        return [];\n    }\n};\n"]}