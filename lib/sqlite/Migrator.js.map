{"version":3,"sources":["../../src/sqlite/Migrator.js"],"names":["Migrator","sqliteDatabase","Error","tableStatementBuilder","edm","options","statement","createAddColumnStatement","tableName","column","run","createTableStatement"],"mappings":";;;;;;;;AAAA;;;;;;;;IAEqBA,Q;AACjB,sBAAYC,cAAZ,EAA4B;AAAA;;AAExB,YAAIA,kBAAkB,IAAtB,EAA4B;AACxB,kBAAM,IAAIC,KAAJ,CAAU,sEAAV,CAAN;AACH;;AAED,aAAKD,cAAL,GAAsBA,cAAtB;AACA,aAAKE,qBAAL,GAA6B,qCAA7B;AAEH;;;;uCAEcC,G,EAAmB;AAAA,gBAAdC,OAAc,uEAAJ,EAAI;;AAC9B,gBAAIC,YAAY,KAAKH,qBAAL,CAA2BI,wBAA3B,CAAoDF,QAAQG,SAA5D,EAAuEH,QAAQI,MAA/E,CAAhB;AACA,mBAAO,KAAKR,cAAL,CAAoBS,GAApB,CAAwBJ,SAAxB,CAAP;AACH;;;0CAEiBF,G,EAAmB;AAAA,gBAAdC,OAAc,uEAAJ,EAAI;AACpC;;;qDAE4BD,G,EAAmB;AAAA,gBAAdC,OAAc,uEAAJ,EAAI;AAC/C;;;sDAE6BD,G,EAAmB;AAAA,gBAAdC,OAAc,uEAAJ,EAAI;AAChD;;;sCAEaD,G,EAAmB;AAAA,gBAAdC,OAAc,uEAAJ,EAAI;;AAC7B,gBAAIC,YAAY,KAAKH,qBAAL,CAA2BQ,oBAA3B,CAAgDN,OAAhD,CAAhB;AACA,mBAAO,KAAKJ,cAAL,CAAoBS,GAApB,CAAwBJ,SAAxB,CAAP;AACH;;;0CAEiBF,G,EAAmB;AAAA,gBAAdC,OAAc,uEAAJ,EAAI;AACpC;;;6CAEoBD,G,EAAmB;AAAA,gBAAdC,OAAc,uEAAJ,EAAI;AACvC;;;0DAEiCD,G,EAAmB;AAAA,gBAAdC,OAAc,uEAAJ,EAAI;AACpD;;;2DAEkCD,G,EAAmB;AAAA,gBAAdC,OAAc,uEAAJ,EAAI;AACrD;;;yCAEgBD,G,EAAmB;AAAA,gBAAdC,OAAc,uEAAJ,EAAI;AACnC;;;0CAEiBD,G,EAAmB;AAAA,gBAAdC,OAAc,uEAAJ,EAAI;AACpC;;;6CAEoBD,G,EAAmB;AAAA,gBAAdC,OAAc,uEAAJ,EAAI;AACvC;;;yCAEgBD,G,EAAmB;AAAA,gBAAdC,OAAc,uEAAJ,EAAI;AACnC;;;;;;kBArDgBL,Q","file":"Migrator.js","sourcesContent":["import TableStatementBuilder from \"./TableStatementBuilder\";\n\nexport default class Migrator {\n    constructor(sqliteDatabase) {\n\n        if (sqliteDatabase == null) {\n            throw new Error(\"Null Argument Exception: sqliteDatabase cannot be null or undefined.\");\n        }\n\n        this.sqliteDatabase = sqliteDatabase;\n        this.tableStatementBuilder = new TableStatementBuilder();\n\n    }\n\n    addColumnAsync(edm, options = {}) {\n        let statement = this.tableStatementBuilder.createAddColumnStatement(options.tableName, options.column);\n        return this.sqliteDatabase.run(statement);\n    }\n\n    addDecoratorAsync(edm, options = {}) {\n    }\n\n    addOneToOneRelationshipAsync(edm, options = {}) {\n    }\n\n    addOneToManyRelationshipAsync(edm, options = {}) {\n    }\n\n    addTableAsync(edm, options = {}) {\n        let statement = this.tableStatementBuilder.createTableStatement(options);\n        return this.sqliteDatabase.run(statement);\n    }\n\n    removeColumnAsync(edm, options = {}) {\n    }\n\n    removeDecoratorAsync(edm, options = {}) {\n    }\n\n    removeOneToOneRelationshipCommand(edm, options = {}) {\n    }\n\n    removeOneToManyRelationshipCommand(edm, options = {}) {\n    }\n\n    removeTableAsync(edm, options = {}) {\n    }\n\n    updateColumnAsync(edm, options = {}) {\n    }\n\n    updateDecoratorAsync(edm, options = {}) {\n    }\n\n    updateTableAsync(edm, options = {}) {\n    }\n}\n"]}