{"version":3,"sources":["../../src/sqlite/Visitor.js"],"names":["Visitor","name","edm","table","_getTable","currentNavigationTable","joinClauses","tableTypes","Map","isParsingInclude","dataConverter","convertString","value","_escape","convertContainsString","convertStartsWithString","convertEndsWithString","convertNumber","toString","convertBoolean","convertDate","getTime","clause","index","indexOf","push","replace","relationship","_escapeIdentifier","ofType","type","hasKey","withForeignKey","properties","relationships","sourceRelationships","_getRelationshipsAsSource","targetRelationships","_getRelationshipsAsTarget","forEach","property","hasOne","hasMany","joinClause","_buildLeftJoinStatementFromSource","withOne","_buildLeftJoinStatementFromTarget","filter","oneToOneRelationships","oneToOne","oneToManyRelationships","oneToMany","concat","tables","find","Date","Error","column","children","Array","prototype","slice","call","arguments","result","expression","length","joined","join","visitor","vistor","parse","propertyAccessor","namespace","left","right","query","countAlias","queryParts","set","where","orderBy","skip","take","include","columnAliases","makeColumnAliases","part","_sqlizePrimitive","whereExpression","array","map","equalTo","notEqual","columns","tableName","columnName","tableMetaData","propertyData","navigationProperties","propertyTable","currentTableName","_addJoinClause","_getNavigationProperties","_writeTableProperty","newValue","substring","Infinity","apply"],"mappings":"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","file":"Visitor.js","sourcesContent":["import { ExpressionVisitor } from \"queryablejs\";\n\nexport default class Visitor extends ExpressionVisitor {\n    constructor(name, edm) {\n        super();\n        this.name = name;\n        this.edm = edm;\n        this.table = this._getTable(name);\n        this.currentNavigationTable = this.table;\n        this.joinClauses = [];\n        this.tableTypes = new Map();\n        this.isParsingInclude = false;\n\n        this.dataConverter = {\n            convertString: (value) => {\n                return `'${this._escape(value)}'`;\n            },\n            convertContainsString: (value) => {\n                return `'%${this._escape(value)}%'`;\n            },\n            convertStartsWithString: (value) => {\n                return `'${this._escape(value)}%'`;\n            },\n            convertEndsWithString: (value) => {\n                return `'%${this._escape(value)}'`;\n            },\n            convertNumber: (value) => {\n                return value.toString();\n            },\n            convertBoolean: (value) => {\n                return value ? 1 : 0;\n            },\n            convertDate: (value) => {\n                return value.getTime();\n            }\n        }\n\n    }\n\n    _addJoinClause(clause) {\n        let index = this.joinClauses.indexOf(clause);\n        if (index === -1) {\n            this.joinClauses.push(clause);\n        }\n    }\n\n    _escape(value) {\n        return `${value.replace(/'/g, \"''\")}`;\n    }\n\n    _escapeIdentifier(value) {\n        return `\"${value.replace(/\\\"/g, '\"')}\"`;\n    }\n\n    _buildLeftJoinStatementFromSource(relationship) {\n        return `LEFT JOIN ${this._escapeIdentifier(relationship.ofType)} ON ${this._escapeIdentifier(relationship.type)}.${this._escapeIdentifier(relationship.hasKey)} = ${this._escapeIdentifier(relationship.ofType)}.${this._escapeIdentifier(relationship.withForeignKey)}`;\n    }\n\n    _buildLeftJoinStatementFromTarget(relationship) {\n        return `LEFT JOIN ${this._escapeIdentifier(relationship.type)} ON ${this._escapeIdentifier(relationship.ofType)}.${this._escapeIdentifier(relationship.withForeignKey)} = ${this._escapeIdentifier(relationship.type)}.${this._escapeIdentifier(relationship.hasKey)}`;\n    };\n\n    _getNavigationProperties(edm, table) {\n        let properties = {};\n        let relationships = edm.relationships;\n\n        let sourceRelationships = this._getRelationshipsAsSource(table, relationships);\n        let targetRelationships = this._getRelationshipsAsTarget(table, relationships);\n\n        sourceRelationships.forEach((relationship) => {\n            let property;\n\n            if (relationship.hasOne != null) {\n                property = relationship.hasOne;\n            } else {\n                property = relationship.hasMany;\n            }\n\n            properties[property] = {\n                relationship: relationship,\n                table: this._getTable(relationship.ofType),\n                joinClause: this._buildLeftJoinStatementFromSource(relationship)\n            };\n        });\n\n        targetRelationships.forEach((relationship) => {\n            properties[relationship.withOne] = {\n                relationship: relationship,\n                table: this._getTable(relationship.type),\n                joinClause: this._buildLeftJoinStatementFromTarget(relationship)\n            };\n        });\n\n        return properties;\n    }\n\n    _getRelationshipsAsSource(table, relationships) {\n        const filter = (relationship) => {\n            return relationship.type === table.name;\n        };\n\n        const oneToOneRelationships = relationships.oneToOne.filter(filter);\n        const oneToManyRelationships = relationships.oneToMany.filter(filter);\n\n        return oneToOneRelationships.concat(oneToManyRelationships);\n    }\n\n    _getRelationshipsAsTarget(table, relationships) {\n        const filter = (relationship) => {\n            return relationship.ofType === table.name;\n        }\n\n        const oneToOneRelationships = relationships.oneToOne.filter(filter);\n        const oneToManyRelationships = relationships.oneToMany.filter(filter);\n\n        return oneToOneRelationships.concat(oneToManyRelationships);\n    }\n\n    _getTable(name) {\n        return this.edm.tables.find((table) => {\n            return table.name === name;\n        });\n    }\n\n    _sqlizePrimitive(value) {\n        if (typeof value === \"string\") {\n            return this.dataConverter.convertString(value);\n        } else if (typeof value === \"number\") {\n            return this.dataConverter.convertNumber(value);\n        } else if (typeof value === \"boolean\") {\n            return this.dataConverter.convertBoolean(value);\n        } else if (value instanceof Date) {\n            return this.dataConverter.convertDate(value);\n        } else if (value == null) {\n            return \"NULL\";\n        } else {\n            throw new Error(\"Unknown primitive type.\");\n        }\n    }\n\n    _writeTableProperty(table, column) {\n        return this._escapeIdentifier(table) + \".\" + this._escapeIdentifier(column);\n    }\n\n    and() {\n        let children = Array.prototype.slice.call(arguments, 0);\n        let result = [];\n\n        children.forEach((expression, index) => {\n            result.push(expression);\n            if (index !== children.length - 1) {\n                result.push(\" AND \");\n            }\n        });\n\n        let joined = result.join(\"\");\n\n        if (joined === \"\") {\n            return \"\";\n        }\n\n        return \"(\" + joined + \")\";\n    }\n\n    any(property, expression) {\n        let table = property.table;\n        let visitor = new Visitor(table.name, this.edm);\n        let result = vistor.parse(expression);\n\n        return visitor.parse(expression);\n    }\n\n    ascending(propertyAccessor) {\n        let namespace = propertyAccessor.value;\n        return namespace + \" ASC\";\n    }\n\n    array(expression) {\n        return expression.value;\n    }\n\n    boolean(expression) {\n        return expression.value;\n    }\n\n    countAsync(left, right) {\n        throw new Error(\"Not yet implemented.\");\n    }\n\n    constant(expression) {\n        return expression.value;\n    }\n\n    createSelectStatementWithCount(query, countAlias) {\n        let queryParts = [];\n        countAlias = countAlias || \"count\";\n\n        this.joinClauses = [];\n        this.tableTypes = new Map();\n\n        this.tableTypes.set(this.table.name, this.table);\n\n        let where = this.parse(query.where);\n\n        queryParts.push(\n            \"SELECT COUNT(*) AS \\\"\" + countAlias + \"\\\" FROM \" + this._escapeIdentifier(this.table.name),\n            this.joinClauses.join(\" \"),\n            where\n        );\n\n        return queryParts.join(\" \");\n    }\n\n    createCustomSelectStatement(query, properties){\n        \n    }\n\n    createSelectStatement(query) {\n        let queryParts = [];\n\n        this.joinClauses = [];\n        this.tableTypes = new Map();\n\n        this.tableTypes.set(this.table.name, this.table);\n\n        let where = this.parse(query.where);\n        let orderBy = this.parse(query.orderBy);\n        let skip = this.parse(query.skip);\n        let take = this.parse(query.take);\n        \n        this.isParsingInclude = true;\n        let include = this.parse(query.include);\n        this.isParsingInclude = false;\n        \n        let columnAliases = this.makeColumnAliases(this.tableTypes);\n        let joinClause = this.joinClauses.length > 0 ? this.joinClauses.join(\" \") : \"\";\n\n        if (where && include) {\n            where = where + \" AND \" + include;\n        } else if (!where && include) {\n            where = include;\n        }\n\n        queryParts.push(\n            \"SELECT \" + columnAliases + \" FROM \" + this._escapeIdentifier(this.table.name),\n            joinClause,\n            where,\n            orderBy,\n            take,\n            skip\n        );\n\n        return queryParts.filter((part) => {\n            return part != null && part != \"\";\n        }).join(\" \");\n    };\n\n    date(expression) {\n        return this._sqlizePrimitive(expression.value);\n    }\n\n    descending(propertyAccessor) {\n        let namespace = propertyAccessor.value;\n        return namespace + \" DESC\";\n    }\n\n    endsWith(propertyAccessor, value) {\n        let namespace = propertyAccessor.value;\n        return namespace + \" LIKE \" + this.dataConverter.convertEndsWithString(value);\n    }\n\n    equalTo(propertyAccessor, right) {\n        let left = propertyAccessor.value;\n        if (right === null) {\n            return left + \" IS NULL\";\n        } else {\n            return left + \" = \" + this._sqlizePrimitive(right);\n        }\n    }\n\n    expression(expression) {\n        return expression.value;\n    }\n\n    greaterThan(propertyAccessor, right) {\n        let left = propertyAccessor.value;\n        return left + \" > \" + this._sqlizePrimitive(right);\n    }\n\n    greaterThanOrEqualTo(propertyAccessor, right) {\n        let left = propertyAccessor.value;\n        return left + \" >= \" + this._sqlizePrimitive(right);\n    }\n\n    include(whereExpression) {\n        return whereExpression;\n    }\n\n    isIn(property, array) {\n        return \"(\" + array.map((value) => {\n            return this.equalTo(property, value);\n        }).join(\" OR \") + \")\";\n    }\n\n    isNotIn(property, array) {\n        return \"(\" + array.map((value) => {\n            return this.notEqual(property, value);\n        }).join(\" AND \") + \")\";\n    }\n\n    lessThan(propertyAccessor, right) {\n        let left = propertyAccessor.value;\n        return left + \" < \" + this._sqlizePrimitive(right);\n    }\n\n    lessThanOrEqualTo(propertyAccessor, right) {\n        let left = propertyAccessor.value;\n        return left + \" <= \" + this._sqlizePrimitive(right);\n    }\n\n    makeColumnAliases(map) {\n        let columns = [];\n\n        map.forEach((table) => {\n            let tableName = table.name;\n\n            table.columns.forEach((column) => {\n                let columnName = column.name;\n\n                columns.push(this._escapeIdentifier(tableName) + \".\" + this._escapeIdentifier(columnName) + \" AS \" + this._escapeIdentifier(tableName + \"___\" + columnName));\n            });\n\n        });\n\n        return columns.join(\", \");\n    }\n\n    not(left, right) {\n        return left + \" NOT \" + right;\n    }\n\n    notEqualTo(propertyAccessor, right) {\n        let left = propertyAccessor.value;\n        if (right === null) {\n            return left + \" IS NOT NULL\";\n        } else {\n            return left + \" <> \" + this._sqlizePrimitive(right);\n        }\n    }\n\n    null(expression) {\n        return null;\n    }\n\n    number(expression) {\n        return expression.value;\n    }\n\n    or() {\n        let children = Array.prototype.slice.call(arguments, 0);\n        let result = [];\n        children.forEach((expression, index) => {\n            result.push(expression);\n            if (index !== children.length - 1) {\n                result.push(\" OR \");\n            }\n        });\n\n        let joined = result.join(\"\");\n\n        if (joined === \"\") {\n            return \"\";\n        }\n\n        return \"(\" + joined + \")\";\n    }\n\n    orderBy() {\n        let result = Array.prototype.slice.call(arguments, 0).join(\", \");\n        if (!result) {\n            return \"\";\n        }\n\n        return \"ORDER BY \" + result;\n    }\n\n    property(expression) {\n        let property = expression.value;\n        return property;\n    }\n\n    propertyAccess(tableMetaData, property) {\n        let propertyData = tableMetaData.navigationProperties && tableMetaData.navigationProperties[property] || null;\n        let propertyTable = propertyData && propertyData.table || null;\n        let currentTableName = this.currentNavigationTable.name;\n\n        let navigationProperties = null;\n\n        if (propertyTable) {\n            if (this.isParsingInclude) {\n                this.tableTypes.set(propertyTable.name, propertyTable);\n            }\n            this._addJoinClause(propertyData.joinClause);\n            this.currentNavigationTable = propertyTable;\n            navigationProperties = this._getNavigationProperties(this.edm, propertyTable);\n        }\n\n        return {\n            table: propertyTable,\n            value: this._writeTableProperty(currentTableName, property),\n            navigationProperties: navigationProperties\n        };\n    }\n\n    queryable(property, expression) {\n        let table = property.table;\n        let visitor = new Visitor(table.name, this.edm);\n\n        return visitor.parse(expression);\n    };\n\n    skip(value) {\n        return \"OFFSET \" + value;\n    }\n\n    startsWith(propertyAccessor, value) {\n        let namespace = propertyAccessor.value;\n        let newValue = this._sqlizePrimitive(value);\n        newValue = value.substring(1, value.length - 1);\n\n        return namespace + \" LIKE \" + this.dataConverter.convertStartsWithString(value);\n    }\n\n    string(expression) {\n        return expression.value;\n    }\n\n    substringOf(propertyAccessor, value) {\n        let namespace = propertyAccessor.value;\n        return namespace + \" LIKE \" + this.dataConverter.convertContainsString(value);\n    }\n\n    take(value) {\n        if (value === Infinity) {\n            return \"LIMIT -1\";\n        } else {\n            return \"LIMIT\" + value;\n        }\n    }\n\n    type(type) {\n        this.currentNavigationTable = this.table;\n        let navigationProperties = this._getNavigationProperties(this.edm, this.table)\n\n        return {\n            table: this.table,\n            value: \"\",\n            navigationProperties: navigationProperties\n        };\n    }\n\n    where(expression) {\n        if (!expression) {\n            return \"\";\n        }\n        return \"WHERE \" + this[\"and\"].apply(this, arguments);\n    }\n\n}\n\n\n"]}