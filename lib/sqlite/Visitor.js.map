{"version":3,"sources":["../../src/sqlite/Visitor.js"],"names":["Visitor","name","edm","table","_getTable","value","_escape","toString","getTime","replace","tables","find","_convertString","_convertNumber","_convertBoolean","Date","_convertDate","Error","column","_escapeIdentifier","children","Array","from","arguments","result","join","length","expression","array","isArray","map","_sqlizePrimitive","left","_convertContainsString","right","_convertEndsWithString","results","type","property","_writeTableProperty","query","queryBuilder","createStatement","_convertStartsWithString","apply"],"mappings":";;;;;;;;AAAA;;AACA;;;;;;;;;;;;IAEqBA,O;;;AACjB,qBAAYC,IAAZ,EAAkBC,GAAlB,EAAuB;AAAA;;AAAA;;AAEnB,cAAKD,IAAL,GAAYA,IAAZ;AACA,cAAKC,GAAL,GAAWA,GAAX;AACA,cAAKC,KAAL,GAAa,MAAKC,SAAL,CAAeH,IAAf,CAAb;;AAJmB;AAMtB;;;;uCAEcI,K,EAAO;AAClB,yBAAW,KAAKC,OAAL,CAAaD,KAAb,CAAX;AACH;;;+CAEsBA,K,EAAO;AAC1B,0BAAY,KAAKC,OAAL,CAAaD,KAAb,CAAZ;AACH;;;iDAEwBA,K,EAAO;AAC5B,yBAAW,KAAKC,OAAL,CAAaD,KAAb,CAAX;AACH;;;+CAEsBA,K,EAAO;AAC1B,0BAAY,KAAKC,OAAL,CAAaD,KAAb,CAAZ;AACH;;;uCAEcA,K,EAAO;AAClB,mBAAOA,MAAME,QAAN,EAAP;AACH;;;wCAEeF,K,EAAO;AACnB,mBAAOA,QAAQ,CAAR,GAAY,CAAnB;AACH;;;qCAEYA,K,EAAO;AAChB,mBAAOA,MAAMG,OAAN,EAAP;AACH;;;gCAEOH,K,EAAO;AACX,gBAAIA,SAAS,IAAb,EAAmB;AACf,uBAAOA,KAAP;AACH;;AAED,wBAAUA,MAAMI,OAAN,CAAc,IAAd,EAAoB,IAApB,CAAV;AACH;;;0CAEiBJ,K,EAAO;AACrB,gBAAIA,SAAS,IAAb,EAAmB;AACf,uBAAOA,KAAP;AACH;;AAED,0BAAWA,MAAMI,OAAN,CAAc,KAAd,EAAqB,IAArB,CAAX;AACH;;;kCAESR,I,EAAM;AACZ,mBAAO,KAAKC,GAAL,CAASQ,MAAT,CAAgBC,IAAhB,CAAqB,UAACR,KAAD,EAAW;AACnC,uBAAOA,MAAMF,IAAN,KAAeA,IAAtB;AACH,aAFM,CAAP;AAGH;;;yCAEgBI,K,EAAO;AACpB,gBAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC3B,uBAAO,KAAKO,cAAL,CAAoBP,KAApB,CAAP;AACH,aAFD,MAEO,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAClC,uBAAO,KAAKQ,cAAL,CAAoBR,KAApB,CAAP;AACH,aAFM,MAEA,IAAI,OAAOA,KAAP,KAAiB,SAArB,EAAgC;AACnC,uBAAO,KAAKS,eAAL,CAAqBT,KAArB,CAAP;AACH,aAFM,MAEA,IAAIA,iBAAiBU,IAArB,EAA2B;AAC9B,uBAAO,KAAKC,YAAL,CAAkBX,KAAlB,CAAP;AACH,aAFM,MAEA,IAAIA,SAAS,IAAb,EAAmB;AACtB,uBAAO,MAAP;AACH,aAFM,MAEA;AACH,sBAAM,IAAIY,KAAJ,CAAU,yBAAV,CAAN;AACH;AACJ;;;4CAEmBd,K,EAAOe,M,EAAQ;AAC/B,mBAAU,KAAKC,iBAAL,CAAuBhB,KAAvB,CAAV,SAA2C,KAAKgB,iBAAL,CAAuBD,MAAvB,CAA3C;AACH;;;8BAEK;AACF,gBAAIE,WAAWC,MAAMC,IAAN,CAAWC,SAAX,CAAf;AACA,gBAAIC,SAASJ,SAASK,IAAT,CAAc,OAAd,CAAb;;AAEA,gBAAID,OAAOE,MAAP,KAAkB,CAAtB,EAAyB;AACrB,uBAAO,EAAP;AACH;;AAED,gBAAIN,SAASM,MAAT,KAAoB,CAAxB,EAA2B;AACvB,uBAAOF,MAAP;AACH;;AAED,yBAAWA,MAAX;AACH;;;8BAEKG,U,EAAY;AAAA;;AACd,gBAAIC,QAAQD,WAAWtB,KAAvB;;AAEA,gBAAI,CAACgB,MAAMQ,OAAN,CAAcD,KAAd,CAAL,EAA0B;AACtB,sBAAM,IAAIX,KAAJ,CAAU,2DAAV,CAAN;AACH;;AAED,gBAAIO,SAASI,MAAME,GAAN,CAAU,UAACzB,KAAD,EAAW;AAC9B,uBAAO,OAAK0B,gBAAL,CAAsB1B,KAAtB,CAAP;AACH,aAFY,EAEVoB,IAFU,CAEL,IAFK,CAAb;;AAIA,yBAAWD,MAAX;AACH;;;gCAEOG,U,EAAY;AAChB,mBAAOA,WAAWtB,KAAlB;AACH;;;iCAEQsB,U,EAAY;AACjB,mBAAOA,WAAWtB,KAAlB;AACH;;;iCAEQ2B,I,EAAM3B,K,EAAO;AAClB,mBAAU2B,IAAV,cAAuB,KAAKC,sBAAL,CAA4B5B,KAA5B,CAAvB;AACH;;;6BAEIsB,U,EAAY;AACb,mBAAOA,WAAWtB,KAAlB;AACH;;;iCAEQ2B,I,EAAME,K,EAAO;AAClB,mBAAUF,IAAV,cAAuB,KAAKG,sBAAL,CAA4BD,KAA5B,CAAvB;AACH;;;kCAESF,I,EAAME,K,EAAO;AACnB,gBAAIA,UAAU,IAAd,EAAoB;AAChB,uBAAUF,IAAV;AACH,aAFD,MAEO;AACH,uBAAUA,IAAV,WAAoB,KAAKD,gBAAL,CAAsBG,KAAtB,CAApB;AACH;AACJ;;;mCAEUP,W,EAAY;AACnB,mBAAOA,YAAWtB,KAAlB;AACH;;;sCAEa2B,I,EAAME,K,EAAO;AACvB,mBAAUF,IAAV,WAAoB,KAAKD,gBAAL,CAAsBG,KAAtB,CAApB;AACH;;;+CAEsBF,I,EAAME,K,EAAO;AAChC,mBAAUF,IAAV,YAAqB,KAAKD,gBAAL,CAAsBG,KAAtB,CAArB;AACH;;;6BAEIF,I,EAAMI,O,EAAS;AAChB,mBAAUJ,IAAV,YAAqBI,OAArB;AACH;;;gCAEOJ,I,EAAMI,O,EAAS;AACnB,mBAAUJ,IAAV,gBAAyBI,OAAzB;AACH;;;mCAEUJ,I,EAAME,K,EAAO;AACpB,mBAAUF,IAAV,WAAoB,KAAKD,gBAAL,CAAsBG,KAAtB,CAApB;AACH;;;4CAEmBF,I,EAAME,K,EAAO;AAC7B,mBAAUF,IAAV,YAAqB,KAAKD,gBAAL,CAAsBG,KAAtB,CAArB;AACH;;;4BAEGF,I,EAAME,K,EAAO;AACb,mBAAUF,IAAV,aAAsBE,KAAtB;AACH;;;qCAEYF,I,EAAME,K,EAAO;AACtB,gBAAIA,UAAU,MAAd,EAAsB;AAClB,uBAAUF,IAAV;AACH,aAFD,MAEO;AACH,uBAAUA,IAAV,YAAqB,KAAKD,gBAAL,CAAsBG,KAAtB,CAArB;AACH;AACJ;;;8BAEIP,U,EAAY;AACb,mBAAOA,WAAWtB,KAAlB;AACH;;;+BAEMsB,U,EAAY;AACf,mBAAOA,WAAWtB,KAAlB;AACH;;;6BAEI;AACD,gBAAIe,WAAWC,MAAMC,IAAN,CAAWC,SAAX,CAAf;AACA,gBAAIC,SAASJ,SAASK,IAAT,CAAc,MAAd,CAAb;;AAEA,gBAAID,WAAW,EAAf,EAAmB;AACf,uBAAO,EAAP;AACH;;AAED,gBAAIJ,SAASM,MAAT,KAAoB,CAAxB,EAA2B;AACvB,uBAAOF,MAAP;AACH;;AAED,yBAAWA,MAAX;AACH;;;iCAEQG,U,EAAY;AACjB,mBAAOA,WAAWtB,KAAlB;AACH;;;uCAEcgC,I,EAAMC,Q,EAAU;AAC3B,mBAAO,KAAKC,mBAAL,CAAyB,KAAKpC,KAAL,CAAWF,IAApC,EAA0CqC,QAA1C,CAAP;AACH;;;kCAESX,U,EAAY;AAClB,gBAAIa,QAAQb,WAAWtB,KAAvB;AACA,gBAAIoC,eAAe,2BAAiB,KAAKvC,GAAtB,CAAnB;;AAEA,yBAAWuC,aAAaC,eAAb,CAA6BF,KAA7B,CAAX;AACH;;;mCAEUR,I,EAAM3B,K,EAAO;AACpB,mBAAU2B,IAAV,cAAuB,KAAKW,wBAAL,CAA8BtC,KAA9B,CAAvB;AACH;;;+BAEMsB,U,EAAY;AACf,mBAAOA,WAAWtB,KAAlB;AACH;;;6BAEIsB,U,EAAY;AACb,mBAAOA,WAAWtB,KAAlB;AACH;;;8BAEKsB,U,EAAY;AACd,gBAAI,CAACA,UAAL,EAAiB;AACb,uBAAO,EAAP;AACH;;AAED,8BAAgB,KAAK,KAAL,EAAYiB,KAAZ,CAAkB,IAAlB,EAAwBrB,SAAxB,CAAhB;AACH;;;;;;kBAxOgBvB,O","file":"Visitor.js","sourcesContent":["import { ExpressionVisitor, Queryable } from \"queryablejs\";\nimport QueryBuilder from \"./QueryBuilder\";\n\nexport default class Visitor extends ExpressionVisitor {\n    constructor(name, edm) {\n        super();\n        this.name = name;\n        this.edm = edm;\n        this.table = this._getTable(name);\n\n    }\n\n    _convertString(value) {\n        return `'${this._escape(value)}'`;\n    }\n\n    _convertContainsString(value) {\n        return `'%${this._escape(value)}%'`;\n    }\n\n    _convertStartsWithString(value) {\n        return `'${this._escape(value)}%'`;\n    }\n\n    _convertEndsWithString(value) {\n        return `'%${this._escape(value)}'`;\n    }\n\n    _convertNumber(value) {\n        return value.toString();\n    }\n\n    _convertBoolean(value) {\n        return value ? 1 : 0;\n    }\n\n    _convertDate(value) {\n        return value.getTime();\n    }\n\n    _escape(value) {\n        if (value == null) {\n            return value;\n        }\n\n        return `${value.replace(/'/g, \"''\")}`;\n    }\n\n    _escapeIdentifier(value) {\n        if (value == null) {\n            return value;\n        }\n\n        return `\"${value.replace(/\\\"/g, '\"\"')}\"`;\n    }\n\n    _getTable(name) {\n        return this.edm.tables.find((table) => {\n            return table.name === name;\n        });\n    }\n\n    _sqlizePrimitive(value) {\n        if (typeof value === \"string\") {\n            return this._convertString(value);\n        } else if (typeof value === \"number\") {\n            return this._convertNumber(value);\n        } else if (typeof value === \"boolean\") {\n            return this._convertBoolean(value);\n        } else if (value instanceof Date) {\n            return this._convertDate(value);\n        } else if (value == null) {\n            return \"NULL\";\n        } else {\n            throw new Error(\"Unknown primitive type.\");\n        }\n    }\n\n    _writeTableProperty(table, column) {\n        return `${this._escapeIdentifier(table)}.${this._escapeIdentifier(column)}`;\n    }\n\n    and() {\n        let children = Array.from(arguments);\n        let result = children.join(\" AND \");\n\n        if (result.length === 0) {\n            return \"\";\n        }\n\n        if (children.length === 1) {\n            return result;\n        }\n\n        return `(${result})`;\n    }\n\n    array(expression) {\n        let array = expression.value;\n\n        if (!Array.isArray(array)){\n            throw new Error(\"Invalid query: The array value node needs to be an array.\");\n        }\n\n        let result = array.map((value) => {\n            return this._sqlizePrimitive(value);\n        }).join(\", \");\n\n        return `(${result})`;\n    }\n\n    boolean(expression) {\n        return expression.value;\n    }\n\n    constant(expression) {\n        return expression.value;\n    }\n\n    contains(left, value) {\n        return `${left} LIKE ${this._convertContainsString(value)}`;\n    }\n\n    date(expression) {\n        return expression.value;\n    }\n\n    endsWith(left, right) {\n        return `${left} LIKE ${this._convertEndsWithString(right)}`;\n    }\n\n    isEqualTo(left, right) {\n        if (right === null) {\n            return `${left} IS NULL`;\n        } else {\n            return `${left} = ${this._sqlizePrimitive(right)}`;\n        }\n    }\n\n    expression(expression) {\n        return expression.value;\n    }\n\n    isGreaterThan(left, right) {\n        return `${left} > ${this._sqlizePrimitive(right)}`;\n    }\n\n    isGreaterThanOrEqualTo(left, right) {\n        return `${left} >= ${this._sqlizePrimitive(right)}`;\n    }\n\n    isIn(left, results) {\n        return `${left} IN ${results}`;\n    }\n\n    isNotIn(left, results) {\n        return `${left} NOT IN ${results}`;\n    }\n\n    isLessThan(left, right) {\n        return `${left} < ${this._sqlizePrimitive(right)}`;\n    }\n\n    isLessThanOrEqualTo(left, right) {\n        return `${left} <= ${this._sqlizePrimitive(right)}`;\n    }\n\n    not(left, right) {\n        return `${left} NOT ${right}`;\n    }\n\n    isNotEqualTo(left, right) {\n        if (right === \"NULL\") {\n            return `${left} IS NOT NULL`;\n        } else {\n            return `${left} <> ${this._sqlizePrimitive(right)}`;\n        }\n    }\n\n    null(expression) {\n        return expression.value;\n    }\n\n    number(expression) {\n        return expression.value;\n    }\n\n    or() {\n        let children = Array.from(arguments);\n        let result = children.join(\" OR \");\n\n        if (result === \"\") {\n            return \"\";\n        }\n\n        if (children.length === 1) {\n            return result;\n        }\n\n        return `(${result})`;\n    }\n\n    property(expression) {\n        return expression.value;\n    }\n\n    propertyAccess(type, property) {\n        return this._writeTableProperty(this.table.name, property);\n    }\n\n    queryable(expression) {\n        let query = expression.value;\n        let queryBuilder = new QueryBuilder(this.edm);\n\n        return `(${queryBuilder.createStatement(query)})`;\n    };\n\n    startsWith(left, value) {\n        return `${left} LIKE ${this._convertStartsWithString(value)}`;\n    }\n\n    string(expression) {\n        return expression.value;\n    }\n\n    type(expression) {\n        return expression.value;\n    }\n\n    where(expression) {\n        if (!expression) {\n            return \"\";\n        }\n\n        return `WHERE ${this[\"and\"].apply(this, arguments)}`;\n    }\n\n}\n\n\n"]}