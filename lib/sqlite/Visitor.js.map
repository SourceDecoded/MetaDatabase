{"version":3,"sources":["../../src/sqlite/Visitor.js"],"names":["SqlParts","select","where","orderBy","skip","take","Infinity","parts","push","filter","part","length","join","Visitor","name","edm","table","_getTable","dataConverter","convertString","value","_escape","convertContainsString","convertStartsWithString","convertEndsWithString","convertNumber","toString","convertBoolean","convertDate","getTime","replace","query","mapping","keys","Object","_escapeIdentifier","columns","map","key","tables","find","Date","Error","column","children","Array","from","arguments","result","left","expression","array","_sqlizePrimitive","queryParts","countAlias","sql","parse","_createSelectStatement","right","results","type","property","_writeTableProperty","queryable","getQuery","visitor","createSql","apply"],"mappings":"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","file":"Visitor.js","sourcesContent":["import { ExpressionVisitor, Queryable } from \"queryablejs\";\n\nclass SqlParts {\n    constructor() {\n        this.select = null;\n        this.where = null;\n        this.orderBy = null;\n        this.skip = 0;\n        this.take = Infinity;\n    }\n\n    toString() {\n        let parts = [];\n\n        parts.push(\n            this.select,\n            this.where,\n            this.orderBy,\n            this.take,\n            this.skip\n        );\n\n        parts = parts.filter((part) => {\n            return typeof part === \"string\" && part.length > 0;\n        });\n\n        return parts.join(\" \");\n    }\n}\n\nexport default class Visitor extends ExpressionVisitor {\n    constructor(name, edm) {\n        super();\n        this.name = name;\n        this.edm = edm;\n        this.table = this._getTable(name);\n\n        this.dataConverter = {\n            convertString: (value) => {\n                return `'${this._escape(value)}'`;\n            },\n            convertContainsString: (value) => {\n                return `'%${this._escape(value)}%'`;\n            },\n            convertStartsWithString: (value) => {\n                return `'${this._escape(value)}%'`;\n            },\n            convertEndsWithString: (value) => {\n                return `'%${this._escape(value)}'`;\n            },\n            convertNumber: (value) => {\n                return value.toString();\n            },\n            convertBoolean: (value) => {\n                return value ? 1 : 0;\n            },\n            convertDate: (value) => {\n                return value.getTime();\n            }\n        }\n\n    }\n\n    _escape(value) {\n        if (value == null) {\n            return value;\n        }\n\n        return `${value.replace(/'/g, \"''\")}`;\n    }\n\n    _escapeIdentifier(value) {\n        if (value == null) {\n            return value;\n        }\n\n        return `\"${value.replace(/\\\"/g, '\"\"')}\"`;\n    }\n\n    _createSelectStatement(query) {\n        let mapping = query.select.value;\n        let keys = Object.keys(mapping);\n\n        if (keys.length === 0) {\n            return `SELECT * FROM ${this._escapeIdentifier(this.table.name)}`;\n        } else {\n            let columns = keys.map((key) => {\n                return `${this._escapeIdentifier(key)} AS ${this._escapeIdentifier(mapping[key])}`;\n            }).join(\", \");\n\n            return `SELECT ${columns} FROM ${this._escapeIdentifier(this.table.name)}`;\n        }\n    }\n\n    _getTable(name) {\n        return this.edm.tables.find((table) => {\n            return table.name === name;\n        });\n    }\n\n    _sqlizePrimitive(value) {\n        if (typeof value === \"string\") {\n            return this.dataConverter.convertString(value);\n        } else if (typeof value === \"number\") {\n            return this.dataConverter.convertNumber(value);\n        } else if (typeof value === \"boolean\") {\n            return this.dataConverter.convertBoolean(value);\n        } else if (value instanceof Date) {\n            return this.dataConverter.convertDate(value);\n        } else if (value == null) {\n            return \"NULL\";\n        } else {\n            throw new Error(\"Unknown primitive type.\");\n        }\n    }\n\n    _writeTableProperty(table, column) {\n        return `${this._escapeIdentifier(table)}.${this._escapeIdentifier(column)}`;\n    }\n\n    and() {\n        let children = Array.from(arguments);\n        let result = children.join(\" AND \");\n\n        if (result.length === 0) {\n            return \"\";\n        }\n\n        if (children.length === 1) {\n            return result;\n        }\n\n        return `(${result})`;\n    }\n\n    ascending(left) {\n        return `${left} ASC`;\n    }\n\n    array(expression) {\n        let array = expression.value;\n        let result = array.map((value) => {\n            return this._sqlizePrimitive(value);\n        }).join(\", \");\n\n        return `(${result})`;\n    }\n\n    boolean(expression) {\n        return expression.value;\n    }\n\n    constant(expression) {\n        return expression.value;\n    }\n\n    createSqlWithCount(query) {\n        let queryParts = [];\n        let countAlias = \"count\";\n\n        let sql = new SqlParts();\n        sql.select = `SELECT COUNT(*) AS count FROM ${this._escapeIdentifier(this.name)}`;\n        sql.where = this.parse(query.where);\n\n        return sql.toString();\n    }\n\n    createSql(query) {\n        let sql = new SqlParts();\n        sql.select = this._createSelectStatement(query);\n        sql.where = this.parse(query.where);\n        sql.orderBy = this.parse(query.orderBy);\n        sql.skip = this.skip(query.skip.value);\n        sql.take = this.take(query.take.value);\n\n        return sql.toString();\n    };\n\n    date(expression) {\n        return expression.value;\n    }\n\n    descending(left) {\n        return `${left} DESC`;\n    }\n\n    endsWith(left, right) {\n        return `${left} LIKE ${this.dataConverter.convertEndsWithString(right)}`;\n    }\n\n    isEqualTo(left, right) {\n        if (right === null) {\n            return `${left} IS NULL`;\n        } else {\n            return `${left} = ${this._sqlizePrimitive(right)}`;\n        }\n    }\n\n    expression(expression) {\n        return expression.value;\n    }\n\n    isGreaterThan(left, right) {\n        return `${left} > ${this._sqlizePrimitive(right)}`;\n    }\n\n    isGreaterThanOrEqualTo(left, right) {\n        return `${left} >= ${this._sqlizePrimitive(right)}`;\n    }\n\n    isIn(left, results) {\n        return `${left} IN ${results}`;\n    }\n\n    isNotIn(left, results) {\n        return `${left} NOT IN ${results}`;\n    }\n\n    isLessThan(left, right) {\n        return `${left} < ${this._sqlizePrimitive(right)}`;\n    }\n\n    isLessThanOrEqualTo(left, right) {\n        return `${left} <= ${this._sqlizePrimitive(right)}`;\n    }\n\n    not(left, right) {\n        return `${left} NOT ${right}`;\n    }\n\n    isNotEqualTo(left, right) {\n        if (right === \"NULL\") {\n            return `${left} IS NOT NULL`;\n        } else {\n            return `${left} <> ${this._sqlizePrimitive(right)}`;\n        }\n    }\n\n    null(expression) {\n        return expression.value;\n    }\n\n    number(expression) {\n        return expression.value;\n    }\n\n    or() {\n        let children = Array.from(arguments);\n        let result = children.join(\" OR \");\n\n        if (result === \"\") {\n            return \"\";\n        }\n\n        return `(${result})`;\n    }\n\n    orderBy() {\n        let result = Array.from(arguments).join(\", \");\n\n        if (result === \"\") {\n            return \"\";\n        }\n\n        return `ORDER BY ${result}`;\n    }\n\n    property(expression) {\n        return expression.value;\n    }\n\n    propertyAccess(type, property) {\n        return this._writeTableProperty(this.table.name, property);\n    }\n\n    queryable(expression) {\n        let queryable = expression.value;\n        let query = queryable.getQuery();\n        let visitor = new Visitor(queryable.type, this.edm);\n\n        return `(${visitor.createSql(query)})`;\n    };\n\n    skip(value) {\n        return `OFFSET ${value}`\n    }\n\n    startsWith(left, value) {\n        return `${left} LIKE ${this.dataConverter.convertStartsWithString(value)}`;\n    }\n\n    string(expression) {\n        return expression.value;\n    }\n\n    contains(left, value) {\n        return `${left} LIKE ${this.dataConverter.convertContainsString(value)}`;\n    }\n\n    take(value) {\n        if (value === Infinity) {\n            return `LIMIT -1`;\n        } else {\n            return `LIMIT ${value}`;\n        }\n    }\n\n    type(expression) {\n        return expression.value;\n    }\n\n    where(expression) {\n        if (!expression) {\n            return \"\";\n        }\n\n        return `WHERE ${this[\"and\"].apply(this, arguments)}`;\n    }\n\n}\n\n\n"]}