{"version":3,"sources":["../../src/sqlite/Database.js"],"names":["Database","sqlite","edm","Error","name","tables","_createTables","options","forEach","table","reduce","promise","then","createAsync","Promise","resolve","his","dropAsync"],"mappings":";;;;;;;;AAAA;;;;;;;;IAEqBA,Q;AACjB,sBAAYC,MAAZ,EAAoBC,GAApB,EAAyB;AAAA;;AACrB,YAAID,UAAU,IAAd,EAAoB;AAChB,kBAAM,IAAIE,KAAJ,CAAU,kCAAV,CAAN;AACH;AACD,YAAID,OAAO,IAAX,EAAiB;AACb,kBAAM,IAAIC,KAAJ,CAAU,+BAAV,CAAN;AACH;;AAED,aAAKC,IAAL,GAAYF,IAAIE,IAAhB;AACA,aAAKF,GAAL,GAAWA,GAAX;AACA,aAAKD,MAAL,GAAcA,MAAd;AACA,aAAKI,MAAL,GAAc,EAAd;;AAEA,aAAKC,aAAL;AACH;;;;wCAEe;AAAA;;AACZ,gBAAIC,UAAU;AACVN,wBAAQ,KAAKA,MADH;AAEVC,qBAAK,KAAKA;AAFA,aAAd;;AAKA,iBAAKA,GAAL,CAASG,MAAT,CAAgBG,OAAhB,CAAwB,UAACC,KAAD,EAAW;AAC/B,sBAAKJ,MAAL,CAAYI,MAAML,IAAlB,IAA0B,oBAAUK,MAAML,IAAhB,EAAsBG,OAAtB,CAA1B;AACH,aAFD;AAGH;;;sCAEa;AACV,mBAAO,KAAKF,MAAL,CAAYK,MAAZ,CAAmB,UAACC,OAAD,EAAUF,KAAV,EAAoB;AAC1C,uBAAOE,QAAQC,IAAR,CAAa,YAAM;AACtB,2BAAOH,MAAMI,WAAN,EAAP;AACH,iBAFM,CAAP;AAGH,aAJM,EAIJC,QAAQC,OAAR,EAJI,CAAP;AAKH;;;oCAEW;AACR,mBAAOC,IAAIX,MAAJ,CAAWK,MAAX,CAAkB,UAACC,OAAD,EAAUF,KAAV,EAAoB;AACzC,uBAAOE,QAAQC,IAAR,CAAa,YAAM;AACtB,2BAAOH,MAAMQ,SAAN,EAAP;AACH,iBAFM,CAAP;AAGH,aAJM,EAIJH,QAAQC,OAAR,EAJI,CAAP;AAKH;;;iCAEQX,I,EAAM;AACX,mBAAO,KAAKC,MAAL,CAAYD,IAAZ,CAAP;AACH;;;;;;kBA9CgBJ,Q","file":"Database.js","sourcesContent":["import Table from \"./Table\";\n\nexport default class Database {\n    constructor(sqlite, edm) {\n        if (sqlite == null) {\n            throw new Error(\"Database needs to have a sqlite.\");\n        }\n        if (edm == null) {\n            throw new Error(\"Database needs to have a edm.\");\n        }\n\n        this.name = edm.name;\n        this.edm = edm;\n        this.sqlite = sqlite;\n        this.tables = {};\n\n        this._createTables();\n    }\n\n    _createTables() {\n        let options = {\n            sqlite: this.sqlite,\n            edm: this.edm\n        };\n\n        this.edm.tables.forEach((table) => {\n            this.tables[table.name] = new Table(table.name, options);\n        });\n    }\n\n    createAsync() {\n        return this.tables.reduce((promise, table) => {\n            return promise.then(() => {\n                return table.createAsync();\n            });\n        }, Promise.resolve());\n    }\n\n    dropAsync() {\n        return his.tables.reduce((promise, table) => {\n            return promise.then(() => {\n                return table.dropAsync();\n            });\n        }, Promise.resolve());\n    }\n\n    getTable(name) {\n        return this.tables[name];\n    }\n\n}"]}