{"version":3,"sources":["../../src/sqlite/TableStatementBuilder.js"],"names":["defaultRelationships","oneToOne","oneToMany","TableStatementBuilder","dataTypeMapping","name","replace","table","_escapeName","entity","Error","sqliteEntity","columns","values","filterRelevantColumns","forEach","column","columnName","defaultValue","getDefaultValue","push","toSqliteValue","columnsStatement","join","valuesStatement","Array","length","fill","statement","delta","primaryKeyExpr","primaryKeyValues","columnSet","Object","keys","type","getPrimaryKeys","key","concat","primaryKeysExpr","primaryKeys","primaryKey","sqliteDataType","primaryKeyStatment","isPrimaryKey","isAutoIncrement","columnsDefinition","map","createColumnDefinitionStatement","filter","value","relationships","foreignKeyIndexes","getTablesRelationshipsAsTargets","relationship","createIndexStatement","ofType","withForeignKey","keyIndexes","getTablesRelationshipsAsSources","indexOf","hasKey","primaryKeysIndexes","tableName","tableRelationships","createForeignKeyStatement","assign","columnDefinitionsStatement","createColumnsDefinitionStatement","foreignKeysStatement","createForeignKeysStatement","foreignKeyNames","foreignKey","keyNames","find","Date","getTime"],"mappings":";;;;;;;;AAAA;;;;;;;;AAEA,IAAMA,uBAAuB;AACzBC,cAAU,EADe;AAEzBC,eAAW;AAFc,CAA7B;;IAKqBC,qB;AACjB,qCAAc;AAAA;;AACV,aAAKC,eAAL;AACH;;;;oCAEWC,I,EAAM;AACd,0BAAWA,KAAKC,OAAL,CAAa,KAAb,EAAoB,GAApB,CAAX;AACH;;;gDAEuBC,K,EAAO;AAC3B,6CAA+B,KAAKC,WAAL,CAAiBD,MAAMF,IAAvB,CAA/B;AACH;;;8CAEqBE,K,EAAOE,M,EAAQ;AAAA;;AACjC,gBAAIF,SAAS,IAAb,EAAmB;AACf,sBAAM,IAAIG,KAAJ,CAAU,6DAAV,CAAN;AACH;;AAED,gBAAID,UAAU,IAAd,EAAoB;AAChB,sBAAM,IAAIC,KAAJ,CAAU,8DAAV,CAAN;AACH;;AAED,gBAAMC,eAAe,EAArB;AACA,gBAAMC,UAAU,EAAhB;AACA,gBAAMC,SAAS,EAAf;;AAEA,iBAAKC,qBAAL,CAA2BP,MAAMK,OAAjC,EAA0CG,OAA1C,CAAkD,UAACC,MAAD,EAAY;AAC1D,oBAAIC,aAAaD,OAAOX,IAAxB;AACA,oBAAIa,eAAe,MAAKC,eAAL,CAAqBH,MAArB,CAAnB;;AAEA,oBAAI,OAAOP,OAAOQ,UAAP,CAAP,KAA8B,WAA9B,IAA6CR,OAAOQ,UAAP,MAAuB,IAAxE,EAA8E;AAC1EL,4BAAQQ,IAAR,CAAa,MAAKZ,WAAL,CAAiBS,UAAjB,CAAb;;AAEA,wBAAIR,OAAOQ,UAAP,MAAuB,IAA3B,EAAiC;AAC7BJ,+BAAOO,IAAP,CAAY,MAAKC,aAAL,CAAmBH,YAAnB,CAAZ;AACH,qBAFD,MAEO;AACHL,+BAAOO,IAAP,CAAY,MAAKC,aAAL,CAAmBZ,OAAOQ,UAAP,CAAnB,CAAZ;AACH;AACJ;AACJ,aAbD;;AAeA,gBAAMK,mBAAmBV,QAAQW,IAAR,CAAa,IAAb,CAAzB;AACA,gBAAMC,kBAAkB,IAAIC,KAAJ,CAAUZ,OAAOa,MAAjB,EAAyBC,IAAzB,CAA8B,GAA9B,EAAmCJ,IAAnC,CAAwC,IAAxC,CAAxB;;AAEA,gBAAIV,OAAOa,MAAP,KAAkB,CAAtB,EAAyB;AACrB,uBAAO;AACHE,gDAA0B,KAAKpB,WAAL,CAAiBD,MAAMF,IAAvB,CAA1B,oBADG;AAEHQ,4BAAQA;AAFL,iBAAP;AAIH;;AAED,mBAAO;AACHe,4CAA0B,KAAKpB,WAAL,CAAiBD,MAAMF,IAAvB,CAA1B,UAA2DiB,gBAA3D,kBAAwFE,eAAxF,MADG;AAEHX,wBAAQA;AAFL,aAAP;AAKH;;;8CAEqBN,K,EAAOE,M,EAAQoB,K,EAAO;AAAA;;AACxC,gBAAIhB,SAAS,EAAb;AACA,gBAAMiB,iBAAiB,EAAvB;AACA,gBAAMC,mBAAmB,EAAzB;AACA,gBAAMC,YAAY,EAAlB;AACA,gBAAMpB,UAAUL,MAAMK,OAAtB;;AAEA,gBAAIL,SAAS,IAAb,EAAmB;AACf,sBAAM,IAAIG,KAAJ,CAAU,6DAAV,CAAN;AACH;;AAED,gBAAID,UAAU,IAAd,EAAoB;AAChB,sBAAM,IAAIC,KAAJ,CAAU,8DAAV,CAAN;AACH;;AAED,gBAAImB,SAAS,IAAb,EAAmB;AACf,sBAAM,IAAInB,KAAJ,CAAU,6DAAV,CAAN;AACH;;AAED,gBAAIuB,OAAOC,IAAP,CAAYL,KAAZ,EAAmBH,MAAnB,KAA8B,CAAlC,EAAqC;AACjC,sBAAM,IAAIhB,KAAJ,CAAU,iDAAV,CAAN;AACH;;AAED,iBAAKI,qBAAL,CAA2BF,OAA3B,EAAoCG,OAApC,CAA4C,UAACC,MAAD,EAAY;AACpD,oBAAIC,aAAaD,OAAOX,IAAxB;;AAEA,oBAAI,OAAOwB,MAAMZ,UAAN,CAAP,KAA6B,WAA7B,IAA4C,OAAKb,eAAL,CAAqBY,OAAOmB,IAA5B,KAAqC,IAArF,EAA2F;AACvFH,8BAAUZ,IAAV,CAAe,OAAKZ,WAAL,CAAiBS,UAAjB,IAA+B,MAA9C;AACAJ,2BAAOO,IAAP,CAAY,OAAKC,aAAL,CAAmBQ,MAAMZ,UAAN,CAAnB,CAAZ;AACH;AACJ,aAPD;;AASA,iBAAKmB,cAAL,CAAoBxB,OAApB,EAA6BG,OAA7B,CAAqC,UAACsB,GAAD,EAAS;AAC1CP,+BAAeV,IAAf,CAAoB,OAAKZ,WAAL,CAAiB6B,GAAjB,IAAwB,MAA5C;AACAN,iCAAiBX,IAAjB,CAAsBX,OAAO4B,GAAP,CAAtB;AACH,aAHD;;AAKAxB,qBAASA,OAAOyB,MAAP,CAAcP,gBAAd,CAAT;;AAEA,mBAAO;AACHH,uCAAqB,KAAKpB,WAAL,CAAiBD,MAAMF,IAAvB,CAArB,aAAyD2B,UAAUT,IAAV,CAAe,IAAf,CAAzD,eAAuFO,eAAeP,IAAf,CAAoB,OAApB,CADpF;AAEHV,wBAAQA;AAFL,aAAP;AAIH;;;8CAEqBN,K,EAAOE,M,EAAQ;AAAA;;AACjC,gBAAIF,SAAS,IAAb,EAAmB;AACf,sBAAM,IAAIG,KAAJ,CAAU,6DAAV,CAAN;AACH;;AAED,gBAAID,UAAU,IAAd,EAAoB;AAChB,sBAAM,IAAIC,KAAJ,CAAU,8DAAV,CAAN;AACH;;AAED,gBAAM6B,kBAAkB,EAAxB;AACA,gBAAM1B,SAAS,EAAf;AACA,gBAAM2B,cAAc,KAAKJ,cAAL,CAAoB7B,MAAMK,OAA1B,CAApB;;AAEA4B,wBAAYzB,OAAZ,CAAoB,UAAC0B,UAAD,EAAgB;;AAEhC,oBAAIhC,OAAOgC,UAAP,MAAuB,IAA3B,EAAiC;AAC7BF,oCAAgBnB,IAAhB,CAAqB,OAAKZ,WAAL,CAAiBiC,UAAjB,IAA+B,UAApD;AACH,iBAFD,MAEO;AACHF,oCAAgBnB,IAAhB,CAAqB,OAAKZ,WAAL,CAAiBiC,UAAjB,IAA+B,MAApD;AACA5B,2BAAOO,IAAP,CAAY,OAAKC,aAAL,CAAmBZ,OAAOgC,UAAP,CAAnB,CAAZ;AACH;AAEJ,aATD;;AAWA,mBAAO;AACHb,4CAA0B,KAAKpB,WAAL,CAAiBD,MAAMF,IAAvB,CAA1B,eAAgEkC,gBAAgBhB,IAAhB,CAAqB,OAArB,CAD7D;AAEHV,wBAAQA;AAFL,aAAP;AAIH;;;wDAE+BN,K,EAAOS,M,EAAQ;AAC3C,gBAAM0B,iBAAiB,KAAKtC,eAAL,CAAqBY,OAAOmB,IAA5B,CAAvB;AACA,gBAAMQ,qBAAqB,EAA3B;AACA,gBAAMH,cAAc,KAAKJ,cAAL,CAAoB7B,MAAMK,OAA1B,CAApB;;AAEA,gBAAI8B,kBAAkB,IAAtB,EAA4B;AACxB,oBAAID,aAAa,EAAjB;;AAEA,oBAAIzB,OAAO4B,YAAX,EAAyB;;AAErB,wBAAIJ,YAAYd,MAAZ,KAAuB,CAA3B,EAA8B;AAC1Be,qCAAa,cAAb;AACH;;AAED,wBAAIzB,OAAO6B,eAAX,EAA4B;AACxBJ,sCAAc,gBAAd;AACH;AACJ;;AAED,uBAAU,KAAKjC,WAAL,CAAiBQ,OAAOX,IAAxB,CAAV,UAA2C,KAAKD,eAAL,CAAqBY,OAAOmB,IAA5B,IAAoCM,UAA/E;AAEH,aAhBD,MAgBO;AACH,uBAAO,IAAP;AACH;AACJ;;;yDAEgClC,K,EAAO;AAAA;;AACpC,gBAAMK,UAAUL,MAAMK,OAAtB;AACA,gBAAMkC,oBAAoBlC,QAAQmC,GAAR,CAAY,UAAC/B,MAAD,EAAY;AAC9C,uBAAO,OAAKgC,+BAAL,CAAqCzC,KAArC,EAA4CS,MAA5C,CAAP;AACH,aAFyB,EAEvBiC,MAFuB,CAEhB,UAACC,KAAD,EAAW;AACjB,uBAAOA,SAAS,IAAhB;AACH,aAJyB,EAIvB3B,IAJuB,CAIlB,IAJkB,CAA1B;;AAMA,mBAAOuB,iBAAP;AACH;;;6CAEoBvC,K,EAAOS,M,EAAQ;AAChC,mDAAqC,KAAKR,WAAL,CAAiBQ,MAAjB,CAArC,YAAoE,KAAKR,WAAL,CAAiBD,KAAjB,CAApE,UAAgG,KAAKC,WAAL,CAAiBQ,MAAjB,CAAhG;AACH;;;qDAE4BT,K,EAAO4C,a,EAAe;AAAA;;AAC/C,gBAAMC,oBAAoB,KAAKC,+BAAL,CAAqC9C,KAArC,EAA4C4C,aAA5C,EAA2DJ,GAA3D,CAA+D,UAACO,YAAD,EAAkB;AACvG,uBAAO,OAAKC,oBAAL,CAA0BD,aAAaE,MAAvC,EAA+CF,aAAaG,cAA5D,CAAP;AACH,aAFyB,CAA1B;;AAIA,gBAAMjB,cAAc,KAAKJ,cAAL,CAAoB7B,MAAMK,OAA1B,CAApB;;AAEA,gBAAM8C,aAAa,KAAKC,+BAAL,CAAqCpD,KAArC,EAA4C4C,aAA5C,EAA2DF,MAA3D,CAAkE,UAACK,YAAD,EAAkB;AACnG,uBAAOd,YAAYoB,OAAZ,CAAoBN,aAAaO,MAAjC,MAA6C,CAAC,CAArD;AACH,aAFkB,EAEhBd,GAFgB,CAEZ,UAACO,YAAD,EAAkB;AACrB,uBAAO,OAAKC,oBAAL,CAA0BD,aAAanB,IAAvC,EAA6CmB,aAAaO,MAA1D,CAAP;AACH,aAJkB,CAAnB;;AAMA,gBAAMC,qBAAqBtB,YAAYO,GAAZ,CAAgB,UAAC1C,IAAD,EAAU;AACjD,uBAAO,OAAKkD,oBAAL,CAA0BhD,MAAMF,IAAhC,EAAsCA,IAAtC,CAAP;AACH,aAF0B,CAA3B;;AAIA,mBAAOyD,mBAAmBxB,MAAnB,CAA0Bc,iBAA1B,CAAP;AACH;;;mDAE0B7C,K,EAAO4C,a,EAAe;AAAA;;AAC7C,gBAAMY,YAAYxD,MAAMF,IAAxB;AACA,gBAAM2D,qBAAqB,KAAKX,+BAAL,CAAqC9C,KAArC,EAA4C4C,aAA5C,CAA3B;;AAEA,mBAAOa,mBAAmBjB,GAAnB,CAAuB,UAACO,YAAD,EAAkB;AAC5C,uBAAO,OAAKW,yBAAL,CAA+BX,YAA/B,CAAP;AACH,aAFM,EAEJ/B,IAFI,CAEC,MAFD,CAAP;AAGH;;;kDAEyB+B,Y,EAAc;AACpC,qCAAuB,KAAK9C,WAAL,CAAiB8C,aAAaG,cAA9B,CAAvB,qBAAoF,KAAKjD,WAAL,CAAiB8C,aAAanB,IAA9B,CAApF,UAA4H,KAAK3B,WAAL,CAAiB8C,aAAaO,MAA9B,CAA5H;AACH;;;kDAEyBtD,K,EAAO;AAAA;;AAC7B,gBAAMiC,cAAc,KAAKJ,cAAL,CAAoB7B,MAAMK,OAA1B,EAAmCmC,GAAnC,CAAuC,UAACN,UAAD,EAAgB;AACvE,uBAAO,OAAKjC,WAAL,CAAiBiC,UAAjB,CAAP;AACH,aAFmB,CAApB;;AAIA,gBAAID,YAAYd,MAAZ,KAAuB,CAA3B,EAA8B;AAC1B,uBAAO,EAAP;AACH,aAFD,MAEO;AACH,yCAAuBc,YAAYjB,IAAZ,CAAiB,IAAjB,CAAvB;AACH;AACJ;;;6CAEoBhB,K,EAAO4C,a,EAAe;AACvCA,4BAAgBlB,OAAOiC,MAAP,CAAc,EAAd,EAAkBlE,oBAAlB,EAAwCmD,aAAxC,CAAhB;;AAEA,gBAAMgB,6BAA6B,KAAKC,gCAAL,CAAsC7D,KAAtC,CAAnC;AACA,gBAAM8D,uBAAuB,KAAKC,0BAAL,CAAgC/D,KAAhC,EAAuC4C,aAAvC,CAA7B;;AAEA,gBAAIgB,8BAA8BE,oBAAlC,EAAwD;AACpD,uDAAqC,KAAK7D,WAAL,CAAiBD,MAAMF,IAAvB,CAArC,UAAsE8D,0BAAtE,UAAqGE,oBAArG;AACH,aAFD,MAEO,IAAIF,0BAAJ,EAAgC;AACnC,uDAAqC,KAAK3D,WAAL,CAAiBD,MAAMF,IAAvB,CAArC,UAAsE8D,0BAAtE;AACH,aAFM,MAEA;AACH,uDAAqC,KAAK3D,WAAL,CAAiBD,MAAMF,IAAvB,CAArC;AACH;AAEJ;;;8CAEqBO,O,EAAS;AAAA;;AAC3B,mBAAOA,QAAQqC,MAAR,CAAe,UAACjC,MAAD,EAAY;AAC9B,uBAAO,OAAKZ,eAAL,CAAqBY,OAAOmB,IAA5B,KAAqC,IAA5C;AACH,aAFM,CAAP;AAGH;;;wDAE+B5B,K,EAAO4C,a,EAAe;AAClD,gBAAMoB,kBAAkB,EAAxB;;AAEA,gBAAMtB,SAAS,SAATA,MAAS,CAACK,YAAD,EAAkB;AAC7B,oBAAMkB,aAAalB,aAAaG,cAAhC;;AAEA,oBAAIH,aAAaE,MAAb,KAAwBjD,MAAMF,IAA9B,IAAsCkE,gBAAgBC,UAAhB,KAA+B,IAAzE,EAA+E;AAC3ED,oCAAgBC,UAAhB;AACA,2BAAO,IAAP;AACH;AACD,uBAAO,KAAP;AACH,aARD;;AAUA,gBAAMvE,WAAWkD,cAAclD,QAAd,CAAuBgD,MAAvB,CAA8BA,MAA9B,CAAjB;AACA,gBAAM/C,YAAYiD,cAAcjD,SAAd,CAAwB+C,MAAxB,CAA+BA,MAA/B,CAAlB;;AAEA,mBAAOhD,SAASqC,MAAT,CAAgBpC,SAAhB,CAAP;AACH;;;wDAE+BK,K,EAAO4C,a,EAAe;AAClD,gBAAMsB,WAAW,EAAjB;;AAEA,gBAAMxB,SAAS,SAATA,MAAS,CAACK,YAAD,EAAkB;AAC7B,oBAAMjB,MAAMiB,aAAaO,MAAzB;;AAEA,oBAAIP,aAAanB,IAAb,KAAsB5B,MAAMF,IAA5B,IAAoCoE,SAASpC,GAAT,KAAiB,IAAzD,EAA+D;AAC3DoC,6BAASpC,GAAT;AACA,2BAAO,IAAP;AACH;AACD,uBAAO,KAAP;AACH,aARD;;AAUA,gBAAMpC,WAAWkD,cAAclD,QAAd,CAAuBgD,MAAvB,CAA8BA,MAA9B,CAAjB;AACA,gBAAM/C,YAAYiD,cAAcjD,SAAd,CAAwB+C,MAAxB,CAA+BA,MAA/B,CAAlB;;AAEA,mBAAOhD,SAASqC,MAAT,CAAgBpC,SAAhB,CAAP;AACH;;;kCAESK,K,EAAOF,I,EAAM;AACnB,mBAAOE,MAAMK,OAAN,CAAc8D,IAAd,CAAmB,UAAC1D,MAAD,EAAY;AAClC,uBAAOA,OAAOX,IAAP,KAAgBA,IAAvB;AACH,aAFM,CAAP;AAGH;;;wCAEeW,M,EAAQ;AACpB,mBAAOA,mBAAiBA,OAAOmB,IAAxB,eAAwC,IAA/C;AACH;;;uCAEcvB,O,EAAS;AACpB,mBAAOA,QAAQqC,MAAR,CAAe,UAACjC,MAAD,EAAY;AAC9B,uBAAOA,OAAO4B,YAAd;AACH,aAFM,EAEJG,GAFI,CAEA,UAAC/B,MAAD,EAAY;AACf,uBAAOA,OAAOX,IAAd;AACH,aAJM,CAAP;AAKH;;;sCAEa6C,K,EAAO;AACjB,gBAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC3B,uBAAOA,KAAP;AACH,aAFD,MAEO,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAClC,uBAAOA,KAAP;AACH,aAFM,MAEA,IAAI,OAAOA,KAAP,KAAiB,SAArB,EAAgC;AACnC,uBAAOA,QAAQ,CAAR,GAAY,CAAnB;AACH,aAFM,MAEA,IAAIA,iBAAiByB,IAArB,EAA2B;AAC9B,uBAAOzB,MAAM0B,OAAN,EAAP;AACH,aAFM,MAEA,IAAI1B,SAAS,IAAb,EAAmB;AACtB,uBAAO,IAAP;AACH,aAFM,MAEA;AACH,sBAAM,IAAIxC,KAAJ,CAAU,gBAAV,CAAN;AACH;AACJ;;;;;;kBAvTgBP,qB","file":"TableStatementBuilder.js","sourcesContent":["import dataTypeMapping from \"./dataTypeMapping\";\n\nconst defaultRelationships = {\n    oneToOne: [],\n    oneToMany: []\n}\n\nexport default class TableStatementBuilder {\n    constructor() {\n        this.dataTypeMapping = dataTypeMapping;\n    }\n\n    _escapeName(name) {\n        return `\"${name.replace(/\\\"/g, '\"')}\"`;\n    }\n\n    createDropTableStatment(table) {\n        return `DROP TABLE IF EXISTS ${this._escapeName(table.name)}`;\n    }\n\n    createInsertStatement(table, entity) {\n        if (table == null) {\n            throw new Error(\"Null Argument Exception: table cannot be null or undefined.\");\n        }\n\n        if (entity == null) {\n            throw new Error(\"Null Argument Exception: entity cannot be null or undefined.\");\n        }\n\n        const sqliteEntity = {};\n        const columns = [];\n        const values = [];\n\n        this.filterRelevantColumns(table.columns).forEach((column) => {\n            var columnName = column.name;\n            var defaultValue = this.getDefaultValue(column);\n\n            if (typeof entity[columnName] !== \"undefined\" && entity[columnName] !== null) {\n                columns.push(this._escapeName(columnName));\n\n                if (entity[columnName] === null) {\n                    values.push(this.toSqliteValue(defaultValue));\n                } else {\n                    values.push(this.toSqliteValue(entity[columnName]));\n                }\n            }\n        });\n\n        const columnsStatement = columns.join(\", \");\n        const valuesStatement = new Array(values.length).fill(\"?\").join(\", \");\n\n        if (values.length === 0) {\n            return {\n                statement: `INSERT INTO ${this._escapeName(table.name)} DEFAULT VALUES`,\n                values: values\n            };\n        }\n\n        return {\n            statement: `INSERT INTO ${this._escapeName(table.name)} (${columnsStatement}) VALUES (${valuesStatement})`,\n            values: values\n        };\n\n    }\n\n    createUpdateStatement(table, entity, delta) {\n        let values = [];\n        const primaryKeyExpr = [];\n        const primaryKeyValues = [];\n        const columnSet = [];\n        const columns = table.columns;\n\n        if (table == null) {\n            throw new Error(\"Null Argument Exception: table cannot be null or undefined.\");\n        }\n\n        if (entity == null) {\n            throw new Error(\"Null Argument Exception: entity cannot be null or undefined.\");\n        }\n\n        if (delta == null) {\n            throw new Error(\"Null Argument Exception: delta cannot be null or undefined.\");\n        }\n\n        if (Object.keys(delta).length === 0) {\n            throw new Error(\"Invalid Argument: delta cannot an empty object.\");\n        }\n\n        this.filterRelevantColumns(columns).forEach((column) => {\n            var columnName = column.name;\n\n            if (typeof delta[columnName] !== \"undefined\" && this.dataTypeMapping[column.type] != null) {\n                columnSet.push(this._escapeName(columnName) + \" = ?\");\n                values.push(this.toSqliteValue(delta[columnName]));\n            }\n        });\n\n        this.getPrimaryKeys(columns).forEach((key) => {\n            primaryKeyExpr.push(this._escapeName(key) + \" = ?\");\n            primaryKeyValues.push(entity[key]);\n        });\n\n        values = values.concat(primaryKeyValues);\n\n        return {\n            statement: `UPDATE ${this._escapeName(table.name)} SET ${columnSet.join(\", \")} WHERE ${primaryKeyExpr.join(\" AND \")}`,\n            values: values\n        };\n    }\n\n    createDeleteStatement(table, entity) {\n        if (table == null) {\n            throw new Error(\"Null Argument Exception: table cannot be null or undefined.\");\n        }\n\n        if (entity == null) {\n            throw new Error(\"Null Argument Exception: entity cannot be null or undefined.\");\n        }\n\n        const primaryKeysExpr = [];\n        const values = [];\n        const primaryKeys = this.getPrimaryKeys(table.columns);\n\n        primaryKeys.forEach((primaryKey) => {\n\n            if (entity[primaryKey] === null) {\n                primaryKeysExpr.push(this._escapeName(primaryKey) + \" IS NULL\");\n            } else {\n                primaryKeysExpr.push(this._escapeName(primaryKey) + \" = ?\");\n                values.push(this.toSqliteValue(entity[primaryKey]));\n            }\n\n        });\n\n        return {\n            statement: `DELETE FROM ${this._escapeName(table.name)} WHERE ${primaryKeysExpr.join(\" AND \")}`,\n            values: values\n        };\n    }\n\n    createColumnDefinitionStatement(table, column) {\n        const sqliteDataType = this.dataTypeMapping[column.type];\n        const primaryKeyStatment = \"\";\n        const primaryKeys = this.getPrimaryKeys(table.columns);\n\n        if (sqliteDataType != null) {\n            let primaryKey = \"\";\n\n            if (column.isPrimaryKey) {\n\n                if (primaryKeys.length === 1) {\n                    primaryKey = \" PRIMARY KEY\";\n                }\n\n                if (column.isAutoIncrement) {\n                    primaryKey += \" AUTOINCREMENT\";\n                }\n            }\n\n            return `${this._escapeName(column.name)} ${this.dataTypeMapping[column.type] + primaryKey}`\n\n        } else {\n            return null;\n        }\n    }\n\n    createColumnsDefinitionStatement(table) {\n        const columns = table.columns;\n        const columnsDefinition = columns.map((column) => {\n            return this.createColumnDefinitionStatement(table, column);\n        }).filter((value) => {\n            return value != null;\n        }).join(\", \")\n\n        return columnsDefinition;\n    }\n\n    createIndexStatement(table, column) {\n        return `CREATE INDEX IF NOT EXISTS ${this._escapeName(column)} ON ${this._escapeName(table)} (${this._escapeName(column)})`;\n    }\n\n    createTableIndexesStatements(table, relationships) {\n        const foreignKeyIndexes = this.getTablesRelationshipsAsTargets(table, relationships).map((relationship) => {\n            return this.createIndexStatement(relationship.ofType, relationship.withForeignKey);\n        });\n\n        const primaryKeys = this.getPrimaryKeys(table.columns);\n\n        const keyIndexes = this.getTablesRelationshipsAsSources(table, relationships).filter((relationship) => {\n            return primaryKeys.indexOf(relationship.hasKey) === -1;\n        }).map((relationship) => {\n            return this.createIndexStatement(relationship.type, relationship.hasKey);\n        });\n\n        const primaryKeysIndexes = primaryKeys.map((name) => {\n            return this.createIndexStatement(table.name, name);\n        });\n\n        return primaryKeysIndexes.concat(foreignKeyIndexes);\n    }\n\n    createForeignKeysStatement(table, relationships) {\n        const tableName = table.name;\n        const tableRelationships = this.getTablesRelationshipsAsTargets(table, relationships);\n\n        return tableRelationships.map((relationship) => {\n            return this.createForeignKeyStatement(relationship);\n        }).join(\"/n/t\");\n    }\n\n    createForeignKeyStatement(relationship) {\n        return `FOREIGN KEY (${this._escapeName(relationship.withForeignKey)}) REFERENCES ${this._escapeName(relationship.type)} (${this._escapeName(relationship.hasKey)})`;\n    }\n\n    createPrimaryKeyStatement(table) {\n        const primaryKeys = this.getPrimaryKeys(table.columns).map((primaryKey) => {\n            return this._escapeName(primaryKey);\n        });\n\n        if (primaryKeys.length === 0) {\n            return \"\";\n        } else {\n            return `PRIMARY KEY (${primaryKeys.join(\", \")})`;\n        }\n    }\n\n    createTableStatement(table, relationships) {\n        relationships = Object.assign({}, defaultRelationships, relationships);\n\n        const columnDefinitionsStatement = this.createColumnsDefinitionStatement(table);\n        const foreignKeysStatement = this.createForeignKeysStatement(table, relationships);\n\n        if (columnDefinitionsStatement && foreignKeysStatement) {\n            return `CREATE TABLE IF NOT EXISTS ${this._escapeName(table.name)} (${columnDefinitionsStatement}, ${foreignKeysStatement})`;\n        } else if (columnDefinitionsStatement) {\n            return `CREATE TABLE IF NOT EXISTS ${this._escapeName(table.name)} (${columnDefinitionsStatement})`;\n        } else {\n            return `CREATE TABLE IF NOT EXISTS ${this._escapeName(table.name)}`;\n        }\n\n    }\n\n    filterRelevantColumns(columns) {\n        return columns.filter((column) => {\n            return this.dataTypeMapping[column.type] != null;\n        });\n    }\n\n    getTablesRelationshipsAsTargets(table, relationships) {\n        const foreignKeyNames = {};\n\n        const filter = (relationship) => {\n            const foreignKey = relationship.withForeignKey;\n\n            if (relationship.ofType === table.name && foreignKeyNames[foreignKey] == null) {\n                foreignKeyNames[foreignKey];\n                return true;\n            }\n            return false;\n        }\n\n        const oneToOne = relationships.oneToOne.filter(filter);\n        const oneToMany = relationships.oneToMany.filter(filter);\n\n        return oneToOne.concat(oneToMany);\n    }\n\n    getTablesRelationshipsAsSources(table, relationships) {\n        const keyNames = {};\n\n        const filter = (relationship) => {\n            const key = relationship.hasKey;\n\n            if (relationship.type === table.name && keyNames[key] == null) {\n                keyNames[key];\n                return true;\n            }\n            return false;\n        }\n\n        const oneToOne = relationships.oneToOne.filter(filter);\n        const oneToMany = relationships.oneToMany.filter(filter);\n\n        return oneToOne.concat(oneToMany);\n    }\n\n    getColumn(table, name) {\n        return table.columns.find((column) => {\n            return column.name === name;\n        });\n    }\n\n    getDefaultValue(column) {\n        return column[`default${column.type}Value`] || null;\n    }\n\n    getPrimaryKeys(columns) {\n        return columns.filter((column) => {\n            return column.isPrimaryKey;\n        }).map((column) => {\n            return column.name;\n        });\n    }\n\n    toSqliteValue(value) {\n        if (typeof value === \"string\") {\n            return value;\n        } else if (typeof value === \"number\") {\n            return value;\n        } else if (typeof value === \"boolean\") {\n            return value ? 1 : 0;\n        } else if (value instanceof Date) {\n            return value.getTime();\n        } else if (value == null) {\n            return null;\n        } else {\n            throw new Error(\"Unknown value.\");\n        }\n    }\n}"]}