{"version":3,"sources":["../../src/sqlite/TableStatementBuilder.js"],"names":["defaultRelationships","oneToOne","oneToMany","TableStatementBuilder","dataTypeMapping","tableName","column","sqliteDataType","type","primaryKey","isPrimaryKey","isAutoIncrement","_escapeName","name","Error","replace","columnDefinition","_createColumnDefinition","table","entity","sqliteEntity","columns","values","filterRelevantColumns","forEach","columnName","defaultValue","getDefaultValue","push","toSqliteValue","columnsStatement","join","valuesStatement","Array","length","fill","statement","previousColumn","newColumn","delta","primaryKeyExpr","primaryKeyValues","columnSet","Object","keys","getPrimaryKeys","key","concat","primaryKeysExpr","primaryKeys","columnDefinitions","map","createColumnDefinitionStatement","filter","value","relationships","indexedColumns","foreignKeyIndexes","getTablesRelationshipsAsTargets","relationship","withForeignKey","getTablesRelationshipsAsSources","indexOf","hasKey","isIndexed","createIndexStatement","tableRelationships","createForeignKeyStatement","assign","columnDefinitionsStatement","createColumnsDefinitionStatement","foreignKeyNames","foreignKey","ofType","keyNames","find","Date","getTime"],"mappings":"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","file":"TableStatementBuilder.js","sourcesContent":["import dataTypeMapping from \"./dataTypeMapping\";\n\nconst defaultRelationships = {\n    oneToOne: [],\n    oneToMany: []\n}\n\nexport default class TableStatementBuilder {\n    constructor() {\n        this.dataTypeMapping = dataTypeMapping;\n    }\n\n    _createColumnDefinition(tableName, column) {\n        const sqliteDataType = this.dataTypeMapping[column.type];\n\n        if (sqliteDataType != null) {\n            let primaryKey = \"\";\n            \n            if (column.isPrimaryKey) {\n                primaryKey = \" PRIMARY KEY\";\n\n                if (column.isAutoIncrement) {\n                    primaryKey += \" AUTOINCREMENT\";\n                }\n\n            }\n\n            return `${this._escapeName(column.name)} ${this.dataTypeMapping[column.type] + primaryKey}`\n\n        } else {\n            throw new Error(\"Could not make a column definition.\");\n        }\n    }\n\n    _escapeName(name) {\n        return `\"${name.replace(/\\\"/g, '\"\"')}\"`;\n    }\n\n    createAddColumnStatement(tableName, column) {\n        let columnDefinition = this._createColumnDefinition(tableName, column);\n        return `ALTER TABLE ${tableName} ADD COLUMN ${columnDefinition}`;\n    }\n\n    createDropTableStatment(table) {\n        return `DROP TABLE IF EXISTS ${this._escapeName(table.name)}`;\n    }\n\n    createInsertStatement(table, entity) {\n        if (table == null) {\n            throw new Error(\"Null Argument Exception: table cannot be null or undefined.\");\n        }\n\n        if (entity == null) {\n            throw new Error(\"Null Argument Exception: entity cannot be null or undefined.\");\n        }\n\n        const sqliteEntity = {};\n        const columns = [];\n        const values = [];\n\n        this.filterRelevantColumns(table.columns).forEach((column) => {\n            var columnName = column.name;\n            var defaultValue = this.getDefaultValue(column);\n\n            if (typeof entity[columnName] !== \"undefined\" && entity[columnName] !== null) {\n                columns.push(this._escapeName(columnName));\n\n                if (entity[columnName] === null) {\n                    values.push(this.toSqliteValue(defaultValue));\n                } else {\n                    values.push(this.toSqliteValue(entity[columnName]));\n                }\n            }\n        });\n\n        const columnsStatement = columns.join(\", \");\n        const valuesStatement = new Array(values.length).fill(\"?\").join(\", \");\n\n        if (values.length === 0) {\n            return {\n                statement: `INSERT INTO ${this._escapeName(table.name)} DEFAULT VALUES`,\n                values: values\n            };\n        }\n\n        return {\n            statement: `INSERT INTO ${this._escapeName(table.name)} (${columnsStatement}) VALUES (${valuesStatement})`,\n            values: values\n        };\n\n    }\n\n    createUpdateColumnTransaction(table, previousColumn, newColumn) {\n\n    }\n\n    createUpdateStatement(table, entity, delta) {\n        let values = [];\n        const primaryKeyExpr = [];\n        const primaryKeyValues = [];\n        const columnSet = [];\n        const columns = table.columns;\n\n        if (table == null) {\n            throw new Error(\"Null Argument Exception: table cannot be null or undefined.\");\n        }\n\n        if (entity == null) {\n            throw new Error(\"Null Argument Exception: entity cannot be null or undefined.\");\n        }\n\n        if (delta == null) {\n            throw new Error(\"Null Argument Exception: delta cannot be null or undefined.\");\n        }\n\n        if (Object.keys(delta).length === 0) {\n            throw new Error(\"Invalid Argument: delta cannot an empty object.\");\n        }\n\n        this.filterRelevantColumns(columns).forEach((column) => {\n            var columnName = column.name;\n\n            if (typeof delta[columnName] !== \"undefined\" && this.dataTypeMapping[column.type] != null) {\n                columnSet.push(this._escapeName(columnName) + \" = ?\");\n                values.push(this.toSqliteValue(delta[columnName]));\n            }\n        });\n\n        this.getPrimaryKeys(columns).forEach((key) => {\n            primaryKeyExpr.push(this._escapeName(key) + \" = ?\");\n            primaryKeyValues.push(entity[key]);\n        });\n\n        values = values.concat(primaryKeyValues);\n\n        return {\n            statement: `UPDATE ${this._escapeName(table.name)} SET ${columnSet.join(\", \")} WHERE ${primaryKeyExpr.join(\" AND \")}`,\n            values: values\n        };\n    }\n\n    createDeleteStatement(table, entity) {\n        if (table == null) {\n            throw new Error(\"Null Argument Exception: table cannot be null or undefined.\");\n        }\n\n        if (entity == null) {\n            throw new Error(\"Null Argument Exception: entity cannot be null or undefined.\");\n        }\n\n        const primaryKeysExpr = [];\n        const values = [];\n        const primaryKeys = this.getPrimaryKeys(table.columns);\n\n        primaryKeys.forEach((primaryKey) => {\n\n            if (entity[primaryKey] === null) {\n                primaryKeysExpr.push(this._escapeName(primaryKey) + \" IS NULL\");\n            } else {\n                primaryKeysExpr.push(this._escapeName(primaryKey) + \" = ?\");\n                values.push(this.toSqliteValue(entity[primaryKey]));\n            }\n\n        });\n\n        return {\n            statement: `DELETE FROM ${this._escapeName(table.name)} WHERE ${primaryKeysExpr.join(\" AND \")}`,\n            values: values\n        };\n    }\n\n    createColumnDefinitionStatement(tableName, column) {\n        return this._createColumnDefinition(tableName, column);\n    }\n\n    createColumnsDefinitionStatement(table) {\n        const columns = table.columns;\n        const columnDefinitions = columns.map((column) => {\n            return this.createColumnDefinitionStatement(table.name, column);\n        }).filter((value) => {\n            return value != null;\n        });\n\n        return columnDefinitions.join(\", \");\n    }\n\n    createIndexStatement(table, column) {\n        return `CREATE INDEX IF NOT EXISTS ${this._escapeName(column)} ON ${this._escapeName(table)} (${this._escapeName(column)})`;\n    }\n\n    createTableIndexesStatements(table, relationships) {\n        if (relationships == null) {\n            throw new Error(\"Null Argument Exception: relationships cannot be null or undefined.\");\n        }\n\n        const indexedColumns = {};\n\n        const foreignKeyIndexes = this.getTablesRelationshipsAsTargets(table, relationships).forEach((relationship) => {\n            indexedColumns[relationship.withForeignKey] = true;\n        });\n\n        const primaryKeys = this.getPrimaryKeys(table.columns);\n\n        this.getTablesRelationshipsAsSources(table, relationships).filter((relationship) => {\n            return primaryKeys.indexOf(relationship.hasKey) === -1;\n        }).forEach((relationship) => {\n            return indexedColumns[relationship.hasKey] = true;\n        });\n\n        primaryKeys.forEach((name) => {\n            indexedColumns[name] = true;\n        });\n\n        table.columns.filter((column) => {\n            return column.isIndexed;\n        }).map((column) => {\n            return indexedColumns[column.name]\n        });\n\n        return Object.keys(indexedColumns).map((columnName) => {\n            return this.createIndexStatement(table.name, columnName);\n        });\n\n    }\n\n    createForeignKeysStatement(table, relationships) {\n        const tableName = table.name;\n        const tableRelationships = this.getTablesRelationshipsAsTargets(table, relationships);\n\n        return tableRelationships.map((relationship) => {\n            return this.createForeignKeyStatement(relationship);\n        }).join(\"/n/t\");\n    }\n\n    createForeignKeyStatement(relationship) {\n        return `FOREIGN KEY (${this._escapeName(relationship.withForeignKey)}) REFERENCES ${this._escapeName(relationship.type)} (${this._escapeName(relationship.hasKey)})`;\n    }\n\n    createPrimaryKeyStatement(table) {\n        const primaryKeys = this.getPrimaryKeys(table.columns).map((primaryKey) => {\n            return this._escapeName(primaryKey);\n        });\n\n        if (primaryKeys.length === 0) {\n            return \"\";\n        } else {\n            return `PRIMARY KEY (${primaryKeys.join(\", \")})`;\n        }\n    }\n\n    createTableStatement(table, relationships) {\n        relationships = Object.assign({}, defaultRelationships, relationships);\n\n        const columnDefinitionsStatement = this.createColumnsDefinitionStatement(table);\n\n        if (columnDefinitionsStatement) {\n            return `CREATE TABLE IF NOT EXISTS ${this._escapeName(table.name)} (${columnDefinitionsStatement})`;\n        } else {\n            return `CREATE TABLE IF NOT EXISTS ${this._escapeName(table.name)}`;\n        }\n\n    }\n\n    filterRelevantColumns(columns) {\n        return columns.filter((column) => {\n            return this.dataTypeMapping[column.type] != null;\n        });\n    }\n\n    getTablesRelationshipsAsTargets(table, relationships) {\n        const foreignKeyNames = {};\n\n        const filter = (relationship) => {\n            const foreignKey = relationship.withForeignKey;\n\n            if (relationship.ofType === table.name && foreignKeyNames[foreignKey] == null) {\n                foreignKeyNames[foreignKey];\n                return true;\n            }\n            return false;\n        }\n\n        const oneToOne = relationships.oneToOne.filter(filter);\n        const oneToMany = relationships.oneToMany.filter(filter);\n\n        return oneToOne.concat(oneToMany);\n    }\n\n    getTablesRelationshipsAsSources(table, relationships) {\n        const keyNames = {};\n\n        const filter = (relationship) => {\n            const key = relationship.hasKey;\n\n            if (relationship.type === table.name && keyNames[key] == null) {\n                keyNames[key];\n                return true;\n            }\n            return false;\n        }\n\n        const oneToOne = relationships.oneToOne.filter(filter);\n        const oneToMany = relationships.oneToMany.filter(filter);\n\n        return oneToOne.concat(oneToMany);\n    }\n\n    getColumn(table, name) {\n        return table.columns.find((column) => {\n            return column.name === name;\n        });\n    }\n\n    getDefaultValue(column) {\n        return column[`default${column.type}Value`] || null;\n    }\n\n    getPrimaryKeys(columns) {\n        return columns.filter((column) => {\n            return column.isPrimaryKey;\n        }).map((column) => {\n            return column.name;\n        });\n    }\n\n    toSqliteValue(value) {\n        if (typeof value === \"string\") {\n            return value;\n        } else if (typeof value === \"number\") {\n            return value;\n        } else if (typeof value === \"boolean\") {\n            return value ? 1 : 0;\n        } else if (value instanceof Date) {\n            return value.getTime();\n        } else if (value == null) {\n            return null;\n        } else {\n            throw new Error(\"Unknown value.\");\n        }\n    }\n}"]}