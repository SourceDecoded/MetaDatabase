{"version":3,"sources":["../../src/sqlite/QueryBuilder.js"],"names":["QueryBuilder","edm","columns","ascending","join","length","desceding","value","Infinity","orderBy","accumulator","ASC","DESC","reduce","Array","isArray","type","push","column","_createAscendingExpression","_createDescendingExpression","orderParts","filter","_isNotEmptyFilter","query","tableName","mapping","select","keys","Object","_escapeIdentifier","map","key","visitor","parse","replace","part","parts","_createSelectStatement","where","_createWhereClause","_createOrderByClause","limit","_createLimitClause","take","offset","_createOffsetClause","skip","_createSelectStatementWithCount"],"mappings":"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","file":"QueryBuilder.js","sourcesContent":["import Visitor from \"./Visitor\";\n\nexport class QueryBuilder {\n    constructor(edm) {\n        this.edm = edm;\n    }\n\n    _createAscendingExpression(columns) {\n        let ascending = columns.join(\", \");\n\n        if (ascending.length > 0) {\n            ascending = `${ascending} ASC`;\n        }\n\n        return ascending;\n    }\n\n    _createDescendingExpression(columns) {\n        let desceding = columns.join(\", \");\n\n        if (desceding.length > 0) {\n            desceding = `${desceding} DESC`;\n        }\n\n        return desceding;\n    }\n\n    _createLimitClause(value) {\n        if (value === Infinity) {\n            return `LIMIT -1`;\n        } else if (typeof value === \"number\") {\n            return `LIMIT ${value}`;\n        } else {\n            return \"\";\n        }\n    }\n\n    _createOffsetClause(value) {\n        return `OFFSET ${value}`;\n    }\n\n    _createOrderByClause(orderBy) {\n\n        let accumulator = {\n            ASC: [],\n            DESC: []\n        };\n\n        orderBy.reduce((accumulator, orderBy) => {\n            if (Array.isArray(accumulator[orderBy.type])) {\n                accumulator[orderBy.type].push(orderBy.column);\n            }\n        }, accumulator);\n\n        let ascending = this._createAscendingExpression(accumulator.ASC);\n        let desceding = this._createDescendingExpression(accumulator.DESC);\n\n        orderParts = [\n            ascending,\n            desceding\n        ].filter(this._isNotEmptyFilter).join(\",\");\n\n        return [\n            \"ORDER BY\",\n            orderParts\n        ].filter(this._isNotEmptyFilter).join(\" \");\n    }\n\n    _createSelectStatement(query) {\n        let tableName = query.type;\n        let mapping = query.select;\n        let keys = Object.keys(mapping);\n\n        if (keys.length === 0) {\n            return `SELECT * FROM ${this._escapeIdentifier(tableName)}`;\n        } else {\n            let columns = keys.map((key) => {\n                return `${this._escapeIdentifier(key)} AS ${this._escapeIdentifier(mapping[key])}`;\n            }).join(\", \");\n\n            return `SELECT ${columns} FROM ${this._escapeIdentifier(tableName)}`;\n        }\n    }\n\n    _createSelectStatementWithCount(tableName) {\n        return `SELECT COUNT(*) AS count FROM ${this._escapeIdentifier(tableName)}`;\n    }\n\n    _createWhereClause(query) {\n        let visitor = new Visitor(query.type, this.edm);\n\n        return visitor.parse(query);\n    }\n\n    _escapeIdentifier(value) {\n        if (value == null) {\n            return value;\n        }\n\n        return `\"${value.replace(/\\\"/g, '\"\"')}\"`;\n    }\n\n    _isNotEmptyFilter(part) {\n        return typeof part === \"string\" && part.length > 0;\n    }\n\n    createStatement(query) {\n        let parts = [];\n        let select = this._createSelectStatement(query);\n        let where = this._createWhereClause(query);\n        let orderBy = this._createOrderByClause(query.orderBy);\n        let limit = this._createLimitClause(query.take);\n        let offset = this._createOffsetClause(query.skip);\n\n        parts.push(\n            select,\n            where,\n            orderBy,\n            limit,\n            offset\n        );\n\n        parts = parts.filter(this._isNotEmptyFilter);\n\n        return parts.join(\" \");\n\n    }\n\n    createCountStatement(query) {\n        let parts = [];\n        let select = this._createSelectStatementWithCount(query);\n        let where = this._createWhereClause(query);\n        let orderBy = this._createOrderByClause(query.orderBy);\n        let limit = this._createLimitClause(query.take);\n        let offset = this._createOffsetClause(query.skip);\n\n        parts.push(\n            select,\n            where\n        );\n\n        parts = parts.filter(this._isNotEmptyFilter);\n\n        return parts.join(\" \");\n\n    }\n}"]}