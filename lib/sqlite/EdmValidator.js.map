{"version":3,"sources":["../../src/sqlite/EdmValidator.js"],"names":["EdmValidator","edm","Array","isArray","tables","Error","name","version","label","forEach","table","validateTable","validateRelationships","column","type","relationship","hasKey","hasOne","hasOneLabel","ofType","withKey","withForeignKey","withOne","withOneLabel","hasMany","hasManyLabel","relationships","oneToOne","oneToMany","validateOneToOneRelationship","validateOneToManyRelationship","pluralLabel","primaryKeyColumns","columns","filter","isPrimaryKey","length","validateColumn"],"mappings":"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","file":"EdmValidator.js","sourcesContent":["import dataTypeMapping from \"./dataTypeMapping\";\n\nexport default class EdmValidator {\n    constructor() {\n\n    }\n\n    validate(edm) {\n        if (!Array.isArray(edm.tables)) {\n            throw new Error(\"Edm needs to have at least one table.\");\n        }\n\n        if (edm.name == null) {\n            throw new Error(\"Edm needs to have a name.\");\n        }\n\n        if (edm.version == null) {\n            throw new Error(\"Edm needs to have a version.\");\n        }\n\n        if (edm.label == null) {\n            throw new Error(\"Edm needs to have a label.\");\n        }\n\n        edm.tables.forEach((table) => {\n            this.validateTable(table);\n        });\n\n        this.validateRelationships(edm);\n    }\n\n    validateColumn(column) {\n        if (column.name == null) {\n            throw new Error(\"Column needs to have a name.\");\n        }\n\n        if (column.label == null) {\n            throw new Error(\"Column needs to hava a label.\");\n        }\n\n        if (dataTypeMapping[column.type] == null) {\n            throw new Error(`Unknown Column Type: ${column.type}.`);\n        }\n\n    }\n\n\n    validateOneToOneRelationship(relationship) {\n        if (relationship.type == null) {\n            throw new Error(\"One to one relationships needs to have a type property.\");\n        }\n\n        if (relationship.hasKey == null) {\n            throw new Error(\"One to one relationships needs to have a hasKey property.\");\n        }\n\n        if (relationship.hasOne == null) {\n            throw new Error(\"One to one relationships needs to have a hasOne property.\");\n        }\n\n        if (relationship.hasOneLabel == null) {\n            throw new Error(\"One to one relationships needs to have a hasOneLabel property.\");\n        }\n\n        if (relationship.ofType == null) {\n            throw new Error(\"One to one relationships needs to have a ofType property.\");\n        }\n\n        if (relationship.withKey == null) {\n            throw new Error(\"One to one relationships needs to have a withKey property.\");\n        }\n\n        if (relationship.withForeignKey == null) {\n            throw new Error(\"One to one relationships needs to have a withForeignKey property.\");\n        }\n\n        if (relationship.withOne == null) {\n            throw new Error(\"One to one relationships needs to have a withOne property.\");\n        }\n\n        if (relationship.withOneLabel == null) {\n            throw new Error(\"One to one relationships needs to have a withOneLabel property.\");\n        }\n    }\n\n    validateOneToManyRelationship(relationship) {\n        if (relationship.type == null) {\n            throw new Error(\"One to many relationships needs to have a type property.\");\n        }\n\n        if (relationship.hasKey == null) {\n            throw new Error(\"One to many relationships needs to have a hasKey property.\");\n        }\n\n        if (relationship.hasMany == null) {\n            throw new Error(\"One to many relationships needs to have a hasMany property.\");\n        }\n\n        if (relationship.hasManyLabel == null) {\n            throw new Error(\"One to many relationships needs to have a hasManyLabel property.\");\n        }\n\n        if (relationship.ofType == null) {\n            throw new Error(\"One to many relationships needs to have a ofType property.\");\n        }\n\n        if (relationship.withKey == null) {\n            throw new Error(\"One to many relationships needs to have a withKey property.\");\n        }\n\n        if (relationship.withForeignKey == null) {\n            throw new Error(\"One to many relationships needs to have a withForeignKey property.\");\n        }\n\n        if (relationship.withOne == null) {\n            throw new Error(\"One to many relationships needs to have a withOne property.\");\n        }\n\n        if (relationship.withOneLabel == null) {\n            throw new Error(\"One to many relationships needs to have a withOneLabel property.\");\n        }\n    }\n\n    validateRelationships(edm) {\n        if (edm.relationships == null) {\n            throw new Error(\"Edm needs to have a relationships object.\");\n        }\n\n        if (!Array.isArray(edm.relationships.oneToOne)) {\n            throw new Error(\"Edm needs to have a oneToOne array describing one to one relationships. It can be an empty array.\");\n        }\n\n        if (!Array.isArray(edm.relationships.oneToMany)) {\n            throw new Error(\"Edm needs to have a oneToMany array describing one to many relationships. It can be an empty array.\");\n        }\n\n        edm.relationships.oneToOne.forEach((relationship) => {\n            this.validateOneToOneRelationship(relationship);\n        });\n\n        edm.relationships.oneToMany.forEach((relationship) => {\n            this.validateOneToManyRelationship(relationship);\n        });\n    }\n\n    validateTable(table) {\n        if (table.name == null) {\n            throw new Error(\"Table needs to have a name.\");\n        }\n\n        if (table.label == null) {\n            throw new Error(\"Table needs to have a label.\");\n        }\n\n        if (table.pluralLabel == null) {\n            throw new Error(\"Table needs to have a pluralLabel.\");\n        }\n\n        let primaryKeyColumns = table.columns.filter((column) => {\n            return column.isPrimaryKey;\n        });\n\n        if (primaryKeyColumns.length !== 1) {\n            throw new Error(\"Tables can only have one primary key.\");\n        }\n\n        table.columns.forEach((column) => {\n            this.validateColumn(column);\n        });\n\n    }\n}"]}