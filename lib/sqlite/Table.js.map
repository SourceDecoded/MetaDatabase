{"version":3,"sources":["../../src/sqlite/Table.js"],"names":["Table","name","options","sqliteDatabase","edm","Error","table","_getTable","tableStatementBuilder","provider","obj","JSON","parse","stringify","column","columns","find","isPrimaryKey","tables","entity","sql","createInsertStatement","run","statement","values","then","result","updatedEntity","_clone","_getPrimaryKeyName","stmt","lastID","queryable","tableStatement","createTableStatement","relationships","indexesStatements","createTableIndexesStatements","unshift","exec","join","createDropTableStatement","createDeleteStatement","delta","createUpdateStatement","Object","assign"],"mappings":"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","file":"Table.js","sourcesContent":["import TableStatementBuilder from \"./TableStatementBuilder\";\nimport { Queryable } from \"queryablejs\";\nimport Provider from \"./Provider\";\n\nexport default class Table {\n    constructor(name, options = {}) {\n        this.sqliteDatabase = options.sqliteDatabase;\n        this.edm = options.edm;\n        this.name = name;\n\n        if (this.name == null) {\n            throw new Error(\"The table needs to have a name.\");\n        }\n\n        if (this.sqliteDatabase == null) {\n            throw new Error(\"The table needs to have a sqliteDatabase database.\");\n        }\n\n        if (this.edm == null) {\n            throw new Error(\"The table needs to have a edm.\");\n        }\n\n        this.table = this._getTable(name);\n\n        if (this.table == null) {\n            throw new Error(`Cannot find table called '${name}' with-in ${this.edm.name}.`);\n        }\n\n        this.tableStatementBuilder = new TableStatementBuilder(name, options);\n        this.provider = new Provider(name, {\n            edm: this.edm,\n            sqliteDatabase: this.sqliteDatabase\n        });\n    }\n\n    _clone(obj) {\n        return JSON.parse(JSON.stringify(obj));\n    }\n\n    _getPrimaryKeyName() {\n        var column = this.table.columns.find((column) => {\n            return column.isPrimaryKey;\n        });\n\n        return column && column.name || null;\n    }\n\n    _getTable(name) {\n        return this.edm.tables.find((table) => {\n            return table.name === name;\n        });\n    }\n\n    addEntityAsync(entity) {\n        var sql = this.tableStatementBuilder.createInsertStatement(this.table, entity);\n\n        return this.sqliteDatabase.run(sql.statement, sql.values).then((result) => {\n            let updatedEntity = this._clone(entity);\n\n            updatedEntity[this._getPrimaryKeyName()] = result.stmt.lastID;\n            return updatedEntity;\n        });\n    }\n\n    asQueryable() {\n        let queryable = new Queryable(this.name);\n        queryable.provider = this.provider;\n\n        return queryable;\n    }\n\n    createAsync() {\n        var tableStatement = this.tableStatementBuilder.createTableStatement(this.table, this.edm.relationships);\n        var indexesStatements = this.tableStatementBuilder.createTableIndexesStatements(this.table, this.edm.relationships);\n\n        indexesStatements.unshift(tableStatement);\n\n        return this.sqliteDatabase.exec(indexesStatements.join(\";\"));\n    }\n\n    dropAsync() {\n        var statement = this.tableStatementBuilder.createDropTableStatement(this.table.name);\n\n        return this.sqliteDatabase.run(statement);\n    }\n\n    getQueryProvider() {\n        return this.provider;\n    }\n\n\n    removeEntityAsync(entity) {\n        var sql = this.tableStatementBuilder.createDeleteStatement(this.table, entity);\n\n        return this.sqliteDatabase.run(sql.statement, sql.values).then(() => {\n            return entity;\n        });\n    }\n\n    updateEntityAsync(entity, delta) {\n        var sql = this.tableStatementBuilder.createUpdateStatement(this.table, entity, delta);\n\n        return this.sqliteDatabase.run(sql.statement, sql.values).then((statement) => {\n            return Object.assign({}, entity, delta);\n        });\n    }\n}"]}