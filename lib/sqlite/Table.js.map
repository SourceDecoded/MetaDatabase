{"version":3,"sources":["../../src/sqlite/Table.js"],"names":["Table","name","options","sqlite","edm","Error","table","_getTable","tableStatementBuilder","provider","tables","find","entity","sql","createInsertStatement","run","statement","values","tableStatement","createTableStatement","relationships","indexesStatements","createTableIndexesStatements","unshift","exec","join","createDropTableStatement","createDeleteStatement","delta","createUpdateStatement","queryable"],"mappings":"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","file":"Table.js","sourcesContent":["import TableStatementBuilder from \"./TableStatementBuilder\";\nimport Queryable from \"./../query/Queryable\";\nimport Provider from \"./Provider\";\n\nexport default class Table {\n    constructor(name, options = {}) {\n        this.sqlite = options.sqlite;\n        this.edm = options.edm;\n        this.name = name;\n\n        if (this.name == null) {\n            throw new Error(\"The table needs to have a name.\");\n        }\n\n        if (this.sqlite == null) {\n            throw new Error(\"The table needs to have a sqlite database.\");\n        }\n\n        if (this.edm == null) {\n            throw new Error(\"The table needs to have a edm.\");\n        }\n\n        this.table = this._getTable(name);\n\n        if (this.table == null) {\n            throw new Error(`Cannot find table called '${name}' with-in ${this.edm.name}.`);\n        }\n\n        this.tableStatementBuilder = new TableStatementBuilder(name, options);\n        this.provider = new Provider(name, {\n            edm: this.edm,\n            sqlite: this.sqlite\n        });\n    }\n\n    _getTable(name) {\n        return this.edm.tables.find((table) => {\n            return table.name === name;\n        });\n    }\n\n\n    addEntityAsync(entity) {\n        var sql = this.tableStatementBuilder.createInsertStatement(this.table, entity);\n\n        return this.sqlite.run(sql.statement, sql.values);\n    }\n\n    createAsync() {\n        var tableStatement = this.tableStatementBuilder.createTableStatement(this.table, this.edm.relationships);\n        var indexesStatements = this.tableStatementBuilder.createTableIndexesStatements(this.table, this.edm.relationships);\n\n        indexesStatements.unshift(tableStatement);\n\n        return this.sqlite.exec(indexesStatements.join(\";\"));\n    }\n\n    dropAsync() {\n        var statement = this.tableStatementBuilder.createDropTableStatement(this.table.name);\n\n        return this.sqlite.run(statement);\n    }\n\n    removeEntityAsync(entity) {\n        var sql = this.tableStatementBuilder.createDeleteStatement(this.table.name, entity);\n\n        return this.sqlite.run(sql.statement, sql.values);\n    }\n\n    updateEntityAsync(entity, delta) {\n        var sql = this.tableStatementBuilder.createUpdateStatement(this.table.name, entity, delta);\n\n        return this.sqlite.run(sql.statement, sql.values);\n    }\n\n    asQueryable() {\n        let queryable = new Queryable(this.name);\n        queryable.provider = provider;\n\n        return queryable;\n    }\n\n    getQueryProvider() {\n        return this.provider;\n    }\n\n}"]}