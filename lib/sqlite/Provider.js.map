{"version":3,"sources":["../../src/sqlite/Provider.js"],"names":["Provider","name","options","sqliteDatabase","Error","edm","entityBuilder","queryable","query","getQuery","visitor","statement","createSelectStatement","all","then","results","convert","count","countAsync","c","toArrayAsync","createSelectStatementWithCount","get","result"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;IAEqBA,Q;AACjB,sBAAYC,IAAZ,EAAgC;AAAA,YAAdC,OAAc,uEAAJ,EAAI;;AAAA;;AAC5B,YAAIA,QAAQC,cAAR,IAA0B,IAA9B,EAAoC;AAChC,kBAAM,IAAIC,KAAJ,CAAU,iEAAV,CAAN;AACH;;AAED,YAAIF,QAAQG,GAAR,IAAe,IAAnB,EAAyB;AACrB,kBAAM,IAAID,KAAJ,CAAU,sDAAV,CAAN;AACH;;AAED,aAAKC,GAAL,GAAWH,QAAQG,GAAnB;AACA,aAAKF,cAAL,GAAsBD,QAAQC,cAA9B;AACA,aAAKF,IAAL,GAAYA,IAAZ;;AAEA,aAAKK,aAAL,GAAqB,4BAAkBL,IAAlB,EAAwB,KAAKI,GAA7B,CAArB;AACH;;;;qCAEYE,S,EAAW;AAAA;;AACpB,gBAAIC,QAAQD,UAAUE,QAAV,EAAZ;AACA,gBAAIC,UAAU,sBAAY,KAAKT,IAAjB,EAAuB,KAAKI,GAA5B,CAAd;AACA,gBAAIM,YAAYD,QAAQE,qBAAR,CAA8BJ,KAA9B,CAAhB;;AAEA,mBAAO,KAAKL,cAAL,CAAoBU,GAApB,CAAwBF,SAAxB,EAAmCG,IAAnC,CAAwC,UAACC,OAAD,EAAa;AACxD,uBAAO,MAAKT,aAAL,CAAmBU,OAAnB,CAA2BD,OAA3B,CAAP;AACH,aAFM,CAAP;AAGH;;;8CAEqBR,S,EAAW;AAAA;;AAC7B,gBAAIU,QAAQ,CAAZ;AACA,mBAAO,KAAKC,UAAL,CAAgB,UAACC,CAAD,EAAO;AAC1BF,wBAAQE,CAAR;AACA,uBAAO,OAAKC,YAAL,CAAkBb,SAAlB,CAAP;AACH,aAHM,EAGJO,IAHI,CAGC,UAACC,OAAD,EAAa;AACjB,uBAAO;AACHE,2BAAOA,KADJ;AAEHF,6BAASA;AAFN,iBAAP;AAIH,aARM,CAAP;AASH;;;qCAEY;AACT,gBAAIP,QAAQD,UAAUE,QAAV,EAAZ;AACA,gBAAIC,UAAU,sBAAY,KAAKT,IAAjB,EAAuB,KAAKI,GAA5B,CAAd;AACA,gBAAIM,YAAYD,QAAQW,8BAAR,CAAuCb,KAAvC,CAAhB;;AAEA,mBAAO,KAAKL,cAAL,CAAoBmB,GAApB,CAAwBX,SAAxB,EAAmCG,IAAnC,CAAwC,UAACS,MAAD,EAAY;AACvD,uBAAOA,OAAON,KAAd;AACH,aAFM,CAAP;AAGH;;;;;;kBAhDgBjB,Q","file":"Provider.js","sourcesContent":["import Visitor from \"./Visitor\";\nimport EntityBuilder from \"./EntityBuilder\";\n\nexport default class Provider {\n    constructor(name, options = {}) {\n        if (options.sqliteDatabase == null) {\n            throw new Error(\"Null Argument Exception: sqliteDatabase is required in options.\");\n        }\n\n        if (options.edm == null) {\n            throw new Error(\"Null Argument Exception: edm is required in options.\");\n        }\n\n        this.edm = options.edm;\n        this.sqliteDatabase = options.sqliteDatabase;\n        this.name = name;\n\n        this.entityBuilder = new EntityBuilder(name, this.edm);\n    }\n\n    toArrayAsync(queryable) {\n        let query = queryable.getQuery();\n        let visitor = new Visitor(this.name, this.edm);\n        let statement = visitor.createSelectStatement(query);\n\n        return this.sqliteDatabase.all(statement).then((results) => {\n            return this.entityBuilder.convert(results);\n        });\n    }\n\n    toArrayWithCountAsync(queryable) {\n        let count = 0;\n        return this.countAsync((c) => {\n            count = c;\n            return this.toArrayAsync(queryable);\n        }).then((results) => {\n            return {\n                count: count,\n                results: results\n            }\n        })\n    }\n\n    countAsync() {\n        let query = queryable.getQuery();\n        let visitor = new Visitor(this.name, this.edm);\n        let statement = visitor.createSelectStatementWithCount(query);\n\n        return this.sqliteDatabase.get(statement).then((result) => {\n            return result.count;\n        });\n    }\n}"]}