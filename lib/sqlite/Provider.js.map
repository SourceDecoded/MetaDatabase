{"version":3,"sources":["../../src/sqlite/Provider.js"],"names":["Provider","name","options","sqliteDatabase","Error","edm","queryBuilder","QueryBuilder","queryable","query","getQuery","statement","createStatement","all","count","countAsync","c","toArrayAsync","then","results","createCountStatement","get","result"],"mappings":";;;;;;;;;;IAAqBA,Q;AACjB,sBAAYC,IAAZ,EAAgC;AAAA,YAAdC,OAAc,uEAAJ,EAAI;;AAAA;;AAC5B,YAAIA,QAAQC,cAAR,IAA0B,IAA9B,EAAoC;AAChC,kBAAM,IAAIC,KAAJ,CAAU,iEAAV,CAAN;AACH;;AAED,YAAIF,QAAQG,GAAR,IAAe,IAAnB,EAAyB;AACrB,kBAAM,IAAID,KAAJ,CAAU,sDAAV,CAAN;AACH;;AAED,aAAKC,GAAL,GAAWH,QAAQG,GAAnB;AACA,aAAKF,cAAL,GAAsBD,QAAQC,cAA9B;AACA,aAAKF,IAAL,GAAYA,IAAZ;AACA,aAAKK,YAAL,GAAoB,IAAIC,YAAJ,CAAiB,KAAKF,GAAtB,CAApB;AACH;;;;qCAEYG,S,EAAW;AACpB,gBAAIC,QAAQD,UAAUE,QAAV,EAAZ;AACA,gBAAIC,YAAY,KAAKL,YAAL,CAAkBM,eAAlB,CAAkCH,KAAlC,CAAhB;;AAEA,mBAAO,KAAKN,cAAL,CAAoBU,GAApB,CAAwBF,SAAxB,CAAP;AACH;;;8CAEqBH,S,EAAW;AAAA;;AAC7B,gBAAIM,QAAQ,CAAZ;AACA,mBAAO,KAAKC,UAAL,CAAgB,UAACC,CAAD,EAAO;AAC1BF,wBAAQE,CAAR;AACA,uBAAO,MAAKC,YAAL,CAAkBT,SAAlB,CAAP;AACH,aAHM,EAGJU,IAHI,CAGC,UAACC,OAAD,EAAa;AACjB,uBAAO;AACHL,2BAAOA,KADJ;AAEHK,6BAASA;AAFN,iBAAP;AAIH,aARM,CAAP;AASH;;;mCAEUX,S,EAAW;AAClB,gBAAIC,QAAQD,UAAUE,QAAV,EAAZ;AACA,gBAAIC,YAAY,KAAKL,YAAL,CAAkBc,oBAAlB,CAAuCX,KAAvC,CAAhB;;AAEA,mBAAO,KAAKN,cAAL,CAAoBkB,GAApB,CAAwBV,SAAxB,EAAmCO,IAAnC,CAAwC,UAACI,MAAD,EAAY;AACvD,uBAAOA,OAAOR,KAAd;AACH,aAFM,CAAP;AAGH;;;;;;kBA3CgBd,Q","file":"Provider.js","sourcesContent":["export default class Provider {\n    constructor(name, options = {}) {\n        if (options.sqliteDatabase == null) {\n            throw new Error(\"Null Argument Exception: sqliteDatabase is required in options.\");\n        }\n\n        if (options.edm == null) {\n            throw new Error(\"Null Argument Exception: edm is required in options.\");\n        }\n\n        this.edm = options.edm;\n        this.sqliteDatabase = options.sqliteDatabase;\n        this.name = name;\n        this.queryBuilder = new QueryBuilder(this.edm);\n    }\n\n    toArrayAsync(queryable) {\n        let query = queryable.getQuery();\n        let statement = this.queryBuilder.createStatement(query);\n\n        return this.sqliteDatabase.all(statement);\n    }\n\n    toArrayWithCountAsync(queryable) {\n        let count = 0;\n        return this.countAsync((c) => {\n            count = c;\n            return this.toArrayAsync(queryable);\n        }).then((results) => {\n            return {\n                count: count,\n                results: results\n            }\n        })\n    }\n\n    countAsync(queryable) {\n        let query = queryable.getQuery();\n        let statement = this.queryBuilder.createCountStatement(query);\n\n        return this.sqliteDatabase.get(statement).then((result) => {\n            return result.count;\n        });\n    }\n}"]}