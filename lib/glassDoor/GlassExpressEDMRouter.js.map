{"version":3,"sources":["../../src/glassDoor/GlassExpressEDMRouter.js"],"names":["app","pane","enabled","handler","Router","use","req","res","next","status","send","json","post","params","name","version","commands","body","Array","isArray","migrationRunner","migrateAsync","then","catch","e","message"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;;AAGI,oBAAaA,GAAb,EAAkBC,IAAlB,EAAuB;AAAA;;AACnB,aAAKD,GAAL,GAAWA,GAAX;AACA,aAAKC,IAAL,GAAYA,IAAZ;AACA,aAAKC,OAAL,GAAe,IAAf;AACH;;;;kCAES;AACN,iBAAKA,OAAL,GAAe,KAAf;AACH;;;iCAEQ;AAAA;;AACL,gBAAIC,UAAU,kBAAQC,MAAR,EAAd;;AAEAD,oBAAQE,GAAR,CAAY,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC5B,oBAAI,MAAKN,OAAT,EAAkB;AACdM;AACH,iBAFD,MAEO;AACHD,wBAAIE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,6BAArB;AACH;AACJ,aAND;AAOAP,oBAAQE,GAAR,CAAY,qBAAWM,IAAX,EAAZ;;AAEAR,oBAAQS,IAAR,CAAa,iBAAb,EAAgC,UAACN,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAAA,kCAC1BF,IAAIO,MADsB;AAAA,oBAC3CC,IAD2C,eAC3CA,IAD2C;AAAA,oBACrCC,OADqC,eACrCA,OADqC;;AAEhD,oBAAIC,WAAWV,IAAIW,IAAnB;AACA,oBAAI,CAACC,MAAMC,OAAN,CAAcb,IAAIW,IAAlB,CAAL,EAA8B;AAC1BD,+BAAW,CAACA,QAAD,CAAX;AACH;AACD,sBAAKf,IAAL,CAAUmB,eAAV,CAA0BC,YAA1B,CAAuCL,QAAvC,EAAiDM,IAAjD,CAAsD,YAAM;AACxDf,wBAAIG,IAAJ,CAAS,IAAT;AACH,iBAFD,EAEGa,KAFH,CAES,UAACC,CAAD,EAAO;AACZjB,wBAAIE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBc,EAAEC,OAAvB;AACH,iBAJD;AAKH,aAXD;;AAaA,iBAAKzB,GAAL,CAASK,GAAT,CAAaF,OAAb;AACH","file":"GlassExpressEDMRouter.js","sourcesContent":["import express from \"express\";\nimport bodyParser from \"body-parser\";\n\nexport default class {\n    constructor (app, pane){\n        this.app = app;\n        this.pane = pane;\n        this.enabled = true;\n    }\n\n    dispose() {\n        this.enabled = false;\n    }\n\n    attach() {\n        let handler = express.Router();\n\n        handler.use((req, res, next) => {\n            if (this.enabled) {\n                next();\n            } else {\n                res.status(500).send(\"This API is no longer valid\");\n            }\n        });\n        handler.use(bodyParser.json());\n\n        handler.post(\"/:name/:version\", (req, res, next) => {\n            let {name, version} = req.params;\n            let commands = req.body;\n            if (!Array.isArray(req.body)) {\n                commands = [commands];\n            }\n            this.pane.migrationRunner.migrateAsync(commands).then(() => {\n                res.send('ok');\n            }).catch((e) => {\n                res.status(500).send(e.message);\n            });\n        });\n\n        this.app.use(handler);\n    }\n}"]}