{"version":3,"sources":["../../src/glassDoor/GlassExpressDoor.js"],"names":["options","port","address","apiRoot","edmRoot","glass","panes","entityRouters","mainApp","dataApp","edmApp","use","json","authenticator","_nativeHTTPServer","listen","err","console","log","get","req","res","next","query","q","actionName","params","executeApiActionAsync","then","result","send","catch","error","status","message","post","body","_init","close","pane","edm","name","version","router","attach","myPane","entityRouter","dispose","label","getEdmAsync","addEdmAsync","end","type","JSON","stringify","commands","Array","isArray","migrationRunner","migrateAsync","updateEdmAsync","metaDatabase","refreshTables","e"],"mappings":"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","file":"GlassExpressDoor.js","sourcesContent":["// GlassExpress\n// Implements GlassDoor to expose a GlassDb by HTTP\nimport express from \"express\";\nimport DataRouter from \"./GlassExpressDataRouter\";\nimport bodyParser from \"body-parser\";\nimport GlassGuestAuthenticator from \"./GlassGuestAuthenticator\";\n\nexport default class {\n    constructor(options) {\n        this.port = options.port || \"8888\";\n        this.address = options.address || \"127.0.0.1\";\n        this.apiRoot = options.apiRoot || \"/data\";\n        this.edmRoot = options.edmRoot || \"/edm\";\n        this.glass = options.glass;\n        this.panes = {};\n        this.entityRouters = {};\n        this.mainApp = express();\n        this.dataApp = express();\n        this.edmApp = express();\n        this.edmApp.use(bodyParser.json());\n        this.authenticator = this.glass.authenticator || GlassGuestAuthenticator;\n\n        this._nativeHTTPServer = this.mainApp.listen(this.port, this.address, (err) => {\n            if (!err) {\n                this.mainApp.use(this.apiRoot, this.dataApp);\n                this.mainApp.use(this.edmRoot, this.edmApp);\n                console.log(`ExpressDoor is listening on ${this.address}:${this.port} `);\n                console.log(`Data API mounted at ${this.apiRoot}`);\n                console.log(`EDM API mounted at ${this.edmRoot}`);\n\n                this.mainApp.get('/@\\*', (req, res, next) => {\n                    let options = {\n                        query: req.query.q\n                    };\n                    let actionName = req.params[0];\n                    this.glass.executeApiActionAsync(actionName, options).then((result) => {\n                        res.send(result);\n                    }).catch((error) => {\n                        res.status(404).send({error: error.message});\n                    });\n                });\n\n                this.mainApp.post('/@\\*', (req, res, next) => {\n                    let options = {\n                        query: req.query.q,\n                        body: req.body\n                    };\n                    let actionName = req.params[0];\n                    this.glass.executeApiActionAsync(actionName, options).then((result) => {\n                        res.send(result);\n                    }).catch((error) => {\n                        res.status(404).send({error: error.message});\n                    });\n                });\n\n                this._init();\n            } else {\n                throw err;\n            }\n        });\n    }\n\n    dispose() {\n        if (this._nativeHTTPServer) {\n            this._nativeHTTPServer.close();\n            this._nativeHTTPServer = null;\n        }\n    }\n\n    addPane(pane) {\n        let {name, version} = pane.edm;\n        let router = new DataRouter(this.dataApp, pane, this.authenticator);\n        this.entityRouters[name + version] = router;\n        router.attach();\n\n        this.panes[name + version] = pane;\n    }\n\n    removePane(pane) {\n        let {name, version} = pane.edm;\n        let myPane = this.panes[name + version];\n        let entityRouter = this.entityRouters[name + version];\n\n        entityRouter.dispose();\n\n        this.panes[name + version] = null;\n        this.entityRouters[name + version] = null;\n    }\n\n    _init() {\n\n        // Set up Express handlers for dealing with EDMs\n        // add a new EDM\n        this.edmApp.post(\"/\", (req, res, next) => {\n            let {name, version, label} = req.body;\n            label = label || name;\n            if(!name || !version) {\n                res.status(500).send(\"Name and version required\");\n            } else {\n                this.glass.getEdmAsync(name, version).then((edm) => {\n                    if (edm) {\n                        res.status(500).send(\"EDM with that name and version already exists\");\n                    } else {\n                        this.glass.addEdmAsync(name, version, label).then(()=> {\n                            res.status(200).end();\n                        });\n                    }\n                });\n            }\n        });\n\n        // get an EDM\n        this.edmApp.get(\"/:name/:version\", (req, res, next) => {\n            let {name, version} = req.params;\n            this.glass.getEdmAsync(name, version).then((edm) => {\n                res.type(\"json\").send(JSON.stringify(edm));\n            });\n        });\n        \n        // Let's not implement delete yet, we will need to have some\n        // kind of premission set up around all this at some point\n\n        // run commands on an EDM\n        this.edmApp.post(\"/:name/:version\", (req, res, next) => {\n            let {name, version} = req.params;\n            let commands = req.body;\n\n            let pane = this.panes[name+version];\n            if (!pane) {\n                res.status(404).send(`EDM ${name} version ${version} not found`);\n            }\n\n            if (!Array.isArray(req.body)) {\n                commands = [commands];\n            }\n\n            pane.migrationRunner.migrateAsync(commands).then(() => {\n                return this.glass.updateEdmAsync(pane.edm);\n            }).then(() => {\n                pane.metaDatabase.refreshTables();\n                res.send('ok');\n            }).catch((e) => {\n                res.status(500).send(e.message);\n            });\n        });\n\n    }\n\n}"]}