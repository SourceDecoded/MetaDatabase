{"version":3,"sources":["../../src/glassDoor/GlassExpressDoor.js"],"names":["options","port","address","apiRoot","edmRoot","glass","panes","entityRouters","edmRouters","mainApp","dataApp","edmApp","use","json","_nativeHTTPServer","listen","err","console","log","_init","close","pane","router","edm","name","version","attach","edmRouter","GlassExpressEdmRouter","myPane","entityRouter","dispose","post","req","res","next","body","status","send","getEdmAsync","then","addEdmAsync","end","get","params","type"],"mappings":"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","file":"GlassExpressDoor.js","sourcesContent":["// GlassExpress\n// Implements GlassDoor to expose a GlassDb by HTTP\nimport express from \"express\";\nimport DataRouter from \"./GlassExpressDataRouter\";\nimport EDMApp from \"./GlassExpressEDMRouter\";\nimport bodyParser from \"body-parser\";\n\nexport default class {\n    constructor(options) {\n        this.port = options.port || \"8888\";\n        this.address = options.address || \"127.0.0.1\";\n        this.apiRoot = options.apiRoot || \"/api\";\n        this.edmRoot = options.edmRoot || \"/edm\";\n        this.glass = options.glass;\n        this.panes = {};\n        this.entityRouters = {};\n        this.edmRouters = {};\n\n        this.mainApp = express();\n        this.dataApp = express();\n        this.edmApp = express();\n        this.edmApp.use(bodyParser.json());\n\n        this._nativeHTTPServer = this.mainApp.listen(this.port, this.address, (err) => {\n            if (!err) {\n                this.mainApp.use(this.apiRoot, this.dataApp);\n                this.mainApp.use(this.edmRoot, this.edmApp);\n                console.log(`ExpressDoor is listening on ${this.port}:${this.address} `);\n                console.log(`Data API mounted at ${this.apiRoot}`);\n                console.log(`EDM API mounted at ${this.edmRoot}`);\n                this._init();\n            } else {\n                throw err;\n            }\n        });\n    }\n\n    dispose() {\n        if (this._nativeHTTPServer) {\n            this._nativeHTTPServer.close();\n            this._nativeHTTPServer = null;\n        }\n    }\n\n    addPane(pane) {\n        let router = new DataRouter(this.dataApp, pane);\n        this.entityRouters[edm.name + edm.version] = router;\n        router.attach();\n\n        let edmRouter = new GlassExpressEdmRouter(this.edmApp, pane);\n        this.edmRouters[edm.name + edm.version] = edmRouter;\n        edmRouter.attach();\n\n        this.panes[pane.edm.name + pane.edm.version] = pane;\n    }\n\n    removePane(pane) {\n        let {name, version} = pane.edm;\n        let myPane = this.panes[name + version];\n        let edmRouter = this.edmRouters[name + version];\n        let entityRouter = this.entityRouters[name + version];\n\n        edmRouter.dispose();\n        entityRouter.dispose();\n\n        this.panes[name + version] = null;\n        this.edmRouters[name + version] = null;\n        this.entityRouters[name + version] = null;\n    }\n\n    _init() {\n\n        // Set up Express handlers for dealing with EDMs\n        // add a new EDM\n        this.edmApp.post(\"/\", (req, res, next) => {\n            let {name, version} = req.body;\n            if(!name || !version) {\n                res.status(500).send(\"Name and version required\");\n            }\n            this.glass.getEdmAsync(name, version).then((edm) => {\n                if (edm) {\n                    res.status(500).send(\"EDM with that name and version already exists\");\n                } else {\n                    this.glass.addEdmAsync(name, version).then(()=> {\n                        res.status(200).end();\n                    });\n                }\n            });\n        });\n\n        // get an EDM\n        this.edmApp.get(\"/:name/:version\", (req, res, next) => {\n            let {name, version} = req.params;\n            this.glass.getEdmAsync(name, version).then((edm) => {\n                res.type(\"json\").send(edm.json);\n            });\n        });\n        \n        // Let's not implement delete yet, we will need to have some\n        // kind of premission set up around all this at some point\n    }\n\n}"]}