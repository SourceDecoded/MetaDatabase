{"version":3,"sources":["../../src/glassDoor/GlassExpressDoor.js"],"names":["options","port","address","apiRoot","edmRoot","glass","panes","entityRouters","mainApp","dataApp","edmApp","use","json","_nativeHTTPServer","listen","err","console","log","_init","close","pane","edm","name","version","router","attach","myPane","entityRouter","dispose","post","req","res","next","body","label","status","send","getEdmAsync","then","addEdmAsync","end","get","params","type","JSON","stringify","commands","Array","isArray","migrationRunner","migrateAsync","updateEdmAsync","catch","e","message"],"mappings":";;;;;;qjBAAA;AACA;;;AACA;;;;AACA;;;;AACA;;;;;;;;;AAGI,oBAAYA,OAAZ,EAAqB;AAAA;;AAAA;;AACjB,aAAKC,IAAL,GAAYD,QAAQC,IAAR,IAAgB,MAA5B;AACA,aAAKC,OAAL,GAAeF,QAAQE,OAAR,IAAmB,WAAlC;AACA,aAAKC,OAAL,GAAeH,QAAQG,OAAR,IAAmB,MAAlC;AACA,aAAKC,OAAL,GAAeJ,QAAQI,OAAR,IAAmB,MAAlC;AACA,aAAKC,KAAL,GAAaL,QAAQK,KAArB;AACA,aAAKC,KAAL,GAAa,EAAb;AACA,aAAKC,aAAL,GAAqB,EAArB;AACA,aAAKC,OAAL,GAAe,wBAAf;AACA,aAAKC,OAAL,GAAe,wBAAf;AACA,aAAKC,MAAL,GAAc,wBAAd;AACA,aAAKA,MAAL,CAAYC,GAAZ,CAAgB,qBAAWC,IAAX,EAAhB;;AAEA,aAAKC,iBAAL,GAAyB,KAAKL,OAAL,CAAaM,MAAb,CAAoB,KAAKb,IAAzB,EAA+B,KAAKC,OAApC,EAA6C,UAACa,GAAD,EAAS;AAC3E,gBAAI,CAACA,GAAL,EAAU;AACN,sBAAKP,OAAL,CAAaG,GAAb,CAAiB,MAAKR,OAAtB,EAA+B,MAAKM,OAApC;AACA,sBAAKD,OAAL,CAAaG,GAAb,CAAiB,MAAKP,OAAtB,EAA+B,MAAKM,MAApC;AACAM,wBAAQC,GAAR,kCAA2C,MAAKf,OAAhD,SAA2D,MAAKD,IAAhE;AACAe,wBAAQC,GAAR,0BAAmC,MAAKd,OAAxC;AACAa,wBAAQC,GAAR,yBAAkC,MAAKb,OAAvC;AACA,sBAAKc,KAAL;AACH,aAPD,MAOO;AACH,sBAAMH,GAAN;AACH;AACJ,SAXwB,CAAzB;AAYH;;;;kCAES;AACN,gBAAI,KAAKF,iBAAT,EAA4B;AACxB,qBAAKA,iBAAL,CAAuBM,KAAvB;AACA,qBAAKN,iBAAL,GAAyB,IAAzB;AACH;AACJ;;;gCAEOO,I,EAAM;AAAA,4BACYA,KAAKC,GADjB;AAAA,gBACLC,IADK,aACLA,IADK;AAAA,gBACCC,OADD,aACCA,OADD;;AAEV,gBAAIC,SAAS,qCAAe,KAAKf,OAApB,EAA6BW,IAA7B,CAAb;AACA,iBAAKb,aAAL,CAAmBe,OAAOC,OAA1B,IAAqCC,MAArC;AACAA,mBAAOC,MAAP;;AAEA,iBAAKnB,KAAL,CAAWgB,OAAOC,OAAlB,IAA6BH,IAA7B;AACH;;;mCAEUA,I,EAAM;AAAA,6BACSA,KAAKC,GADd;AAAA,gBACRC,IADQ,cACRA,IADQ;AAAA,gBACFC,OADE,cACFA,OADE;;AAEb,gBAAIG,SAAS,KAAKpB,KAAL,CAAWgB,OAAOC,OAAlB,CAAb;AACA,gBAAII,eAAe,KAAKpB,aAAL,CAAmBe,OAAOC,OAA1B,CAAnB;;AAEAI,yBAAaC,OAAb;;AAEA,iBAAKtB,KAAL,CAAWgB,OAAOC,OAAlB,IAA6B,IAA7B;AACA,iBAAKhB,aAAL,CAAmBe,OAAOC,OAA1B,IAAqC,IAArC;AACH;;;gCAEO;AAAA;;AAEJ;AACA;AACA,iBAAKb,MAAL,CAAYmB,IAAZ,CAAiB,GAAjB,EAAsB,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAAA,gCACTF,IAAIG,IADK;AAAA,oBACjCX,IADiC,aACjCA,IADiC;AAAA,oBAC3BC,OAD2B,aAC3BA,OAD2B;AAAA,oBAClBW,KADkB,aAClBA,KADkB;;AAEtC,oBAAG,CAACZ,IAAD,IAAS,CAACC,OAAb,EAAsB;AAClBQ,wBAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,2BAArB;AACH,iBAFD,MAEO;AACH,2BAAK/B,KAAL,CAAWgC,WAAX,CAAuBf,IAAvB,EAA6BC,OAA7B,EAAsCe,IAAtC,CAA2C,UAACjB,GAAD,EAAS;AAChD,4BAAIA,GAAJ,EAAS;AACLU,gCAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,+CAArB;AACH,yBAFD,MAEO;AACH,mCAAK/B,KAAL,CAAWkC,WAAX,CAAuBjB,IAAvB,EAA6BC,OAA7B,EAAsCW,KAAtC,EAA6CI,IAA7C,CAAkD,YAAK;AACnDP,oCAAII,MAAJ,CAAW,GAAX,EAAgBK,GAAhB;AACH,6BAFD;AAGH;AACJ,qBARD;AASH;AACJ,aAfD;;AAiBA;AACA,iBAAK9B,MAAL,CAAY+B,GAAZ,CAAgB,iBAAhB,EAAmC,UAACX,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAAA,kCAC7BF,IAAIY,MADyB;AAAA,oBAC9CpB,IAD8C,eAC9CA,IAD8C;AAAA,oBACxCC,OADwC,eACxCA,OADwC;;AAEnD,uBAAKlB,KAAL,CAAWgC,WAAX,CAAuBf,IAAvB,EAA6BC,OAA7B,EAAsCe,IAAtC,CAA2C,UAACjB,GAAD,EAAS;AAChDU,wBAAIY,IAAJ,CAAS,MAAT,EAAiBP,IAAjB,CAAsBQ,KAAKC,SAAL,CAAexB,GAAf,CAAtB;AACH,iBAFD;AAGH,aALD;;AAOA;AACA;;AAEA;AACA,iBAAKX,MAAL,CAAYmB,IAAZ,CAAiB,iBAAjB,EAAoC,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAAA,mCAC9BF,IAAIY,MAD0B;AAAA,oBAC/CpB,IAD+C,gBAC/CA,IAD+C;AAAA,oBACzCC,OADyC,gBACzCA,OADyC;;AAEpD,oBAAIuB,WAAWhB,IAAIG,IAAnB;;AAEA,oBAAIb,OAAO,OAAKd,KAAL,CAAWgB,OAAKC,OAAhB,CAAX;AACA,oBAAI,CAACH,IAAL,EAAW;AACPW,wBAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,UAA4Bd,IAA5B,iBAA4CC,OAA5C;AACH;;AAED,oBAAI,CAACwB,MAAMC,OAAN,CAAclB,IAAIG,IAAlB,CAAL,EAA8B;AAC1Ba,+BAAW,CAACA,QAAD,CAAX;AACH;;AAED1B,qBAAK6B,eAAL,CAAqBC,YAArB,CAAkCJ,QAAlC,EAA4CR,IAA5C,CAAiD,YAAM;AACnD,2BAAO,OAAKjC,KAAL,CAAW8C,cAAX,CAA0B/B,KAAKC,GAA/B,CAAP;AACH,iBAFD,EAEGiB,IAFH,CAEQ,YAAM;AACVP,wBAAIK,IAAJ,CAAS,IAAT;AACH,iBAJD,EAIGgB,KAJH,CAIS,UAACC,CAAD,EAAO;AACZtB,wBAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBiB,EAAEC,OAAvB;AACH,iBAND;AAOH,aApBD;AAsBH","file":"GlassExpressDoor.js","sourcesContent":["// GlassExpress\n// Implements GlassDoor to expose a GlassDb by HTTP\nimport express from \"express\";\nimport DataRouter from \"./GlassExpressDataRouter\";\nimport bodyParser from \"body-parser\";\n\nexport default class {\n    constructor(options) {\n        this.port = options.port || \"8888\";\n        this.address = options.address || \"127.0.0.1\";\n        this.apiRoot = options.apiRoot || \"/api\";\n        this.edmRoot = options.edmRoot || \"/edm\";\n        this.glass = options.glass;\n        this.panes = {};\n        this.entityRouters = {};\n        this.mainApp = express();\n        this.dataApp = express();\n        this.edmApp = express();\n        this.edmApp.use(bodyParser.json());\n\n        this._nativeHTTPServer = this.mainApp.listen(this.port, this.address, (err) => {\n            if (!err) {\n                this.mainApp.use(this.apiRoot, this.dataApp);\n                this.mainApp.use(this.edmRoot, this.edmApp);\n                console.log(`ExpressDoor is listening on ${this.address}:${this.port} `);\n                console.log(`Data API mounted at ${this.apiRoot}`);\n                console.log(`EDM API mounted at ${this.edmRoot}`);\n                this._init();\n            } else {\n                throw err;\n            }\n        });\n    }\n\n    dispose() {\n        if (this._nativeHTTPServer) {\n            this._nativeHTTPServer.close();\n            this._nativeHTTPServer = null;\n        }\n    }\n\n    addPane(pane) {\n        let {name, version} = pane.edm;\n        let router = new DataRouter(this.dataApp, pane);\n        this.entityRouters[name + version] = router;\n        router.attach();\n\n        this.panes[name + version] = pane;\n    }\n\n    removePane(pane) {\n        let {name, version} = pane.edm;\n        let myPane = this.panes[name + version];\n        let entityRouter = this.entityRouters[name + version];\n\n        entityRouter.dispose();\n\n        this.panes[name + version] = null;\n        this.entityRouters[name + version] = null;\n    }\n\n    _init() {\n\n        // Set up Express handlers for dealing with EDMs\n        // add a new EDM\n        this.edmApp.post(\"/\", (req, res, next) => {\n            let {name, version, label} = req.body;\n            if(!name || !version) {\n                res.status(500).send(\"Name and version required\");\n            } else {\n                this.glass.getEdmAsync(name, version).then((edm) => {\n                    if (edm) {\n                        res.status(500).send(\"EDM with that name and version already exists\");\n                    } else {\n                        this.glass.addEdmAsync(name, version, label).then(()=> {\n                            res.status(200).end();\n                        });\n                    }\n                });\n            }\n        });\n\n        // get an EDM\n        this.edmApp.get(\"/:name/:version\", (req, res, next) => {\n            let {name, version} = req.params;\n            this.glass.getEdmAsync(name, version).then((edm) => {\n                res.type(\"json\").send(JSON.stringify(edm));\n            });\n        });\n        \n        // Let's not implement delete yet, we will need to have some\n        // kind of premission set up around all this at some point\n\n        // run commands on an EDM\n        this.edmApp.post(\"/:name/:version\", (req, res, next) => {\n            let {name, version} = req.params;\n            let commands = req.body;\n\n            let pane = this.panes[name+version];\n            if (!pane) {\n                res.status(404).send(`EDM ${name} version ${version} not found`);\n            }\n\n            if (!Array.isArray(req.body)) {\n                commands = [commands];\n            }\n\n            pane.migrationRunner.migrateAsync(commands).then(() => {\n                return this.glass.updateEdmAsync(pane.edm);\n            }).then(() => {\n                res.send('ok');\n            }).catch((e) => {\n                res.status(500).send(e.message);\n            });\n        });\n\n    }\n\n}"]}