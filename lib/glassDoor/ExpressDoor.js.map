{"version":3,"sources":["../../src/glassDoor/ExpressDoor.js"],"names":["options","port","address","apiRoot","edmRoot","glass","panes","entityRouters","mainApp","dataApp","edmApp","listen","err","use","console","log","_init","forEach","pane","router","edm","name","attach"],"mappings":";;;;;;qjBAAA;AACA;;;AACA;;;;AACA;;;;;;;;;AAGI,oBAAYA,OAAZ,EAAqB;AAAA;;AAAA;;AACjB,aAAKC,IAAL,GAAYD,QAAQC,IAAR,IAAgB,MAA5B;AACA,aAAKC,OAAL,GAAeF,QAAQE,OAAR,IAAmB,WAAlC;AACA,aAAKC,OAAL,GAAeH,QAAQG,OAAR,IAAmB,MAAlC;AACA,aAAKC,OAAL,GAAeJ,QAAQI,OAAR,IAAmB,MAAlC;AACA,aAAKC,KAAL,GAAaL,QAAQK,KAArB;AACA,aAAKC,KAAL,GAAa,KAAKD,KAAL,CAAWC,KAAxB;AACA,aAAKC,aAAL,GAAqB,EAArB;;AAEA,aAAKC,OAAL,GAAe,wBAAf;AACA,aAAKC,OAAL,GAAe,wBAAf;AACA,aAAKC,MAAL,GAAc,wBAAd;;AAEAF,gBAAQG,MAAR,CAAe,KAAKV,IAApB,EAA0B,KAAKC,OAA/B,EAAwC,UAACU,GAAD,EAAS;AAC7C,gBAAI,CAACA,GAAL,EAAU;AACN,sBAAKJ,OAAL,CAAaK,GAAb,CAAiB,MAAKV,OAAtB,EAA+B,MAAKM,OAApC;AACA,sBAAKD,OAAL,CAAaK,GAAb,CAAiB,MAAKT,OAAtB,EAA+B,MAAKM,MAApC;AACAI,wBAAQC,GAAR,kCAA2C,MAAKd,IAAhD,SAAwD,MAAKC,OAA7D;AACAY,wBAAQC,GAAR,0BAAmC,MAAKZ,OAAxC;AACAW,wBAAQC,GAAR,yBAAkC,MAAKX,OAAvC;AACAY;AACH,aAPD,MAOO;AACH,sBAAMJ,GAAN;AACH;AACJ,SAXD;AAYH;;;;gCAEO;AAAA;;AACJ,iBAAKN,KAAL,CAAWW,OAAX,CAAmB,UAACC,IAAD,EAAU;AACzB,oBAAIC,SAAS,iCAAW,OAAKV,OAAhB,EAAyBS,IAAzB,CAAb;AACA,uBAAKX,aAAL,CAAmBa,IAAIC,IAAvB,IAA+BF,MAA/B;AACAA,uBAAOG,MAAP;AACH,aAJD;;AAMA;AACH","file":"ExpressDoor.js","sourcesContent":["// GlassExpress\n// Implements GlassDoor to expose a GlassDb by HTTP\nimport express from \"express\";\nimport Router from \"./GlassExpressRouter\";\n\nexport default class {\n    constructor(options) {\n        this.port = options.port || \"8888\";\n        this.address = options.address || \"127.0.0.1\";\n        this.apiRoot = options.apiRoot || \"/api\";\n        this.edmRoot = options.edmRoot || \"/edm\";\n        this.glass = options.glass;\n        this.panes = this.glass.panes;\n        this.entityRouters = {};\n\n        this.mainApp = express();\n        this.dataApp = express();\n        this.edmApp = express();\n\n        mainApp.listen(this.port, this.address, (err) => {\n            if (!err) {\n                this.mainApp.use(this.apiRoot, this.dataApp);\n                this.mainApp.use(this.edmRoot, this.edmApp);\n                console.log(`ExpressDoor is listening on ${this.port}:${this.address} `);\n                console.log(`Data API mounted at ${this.apiRoot}`);\n                console.log(`EDM API mounted at ${this.edmRoot}`);\n                _init();\n            } else {\n                throw err;\n            }\n        });\n    }\n\n    _init() {\n        this.panes.forEach((pane) => {\n            let router = new Router(this.dataApp, pane);\n            this.entityRouters[edm.name] = router;\n            router.attach();\n        });\n\n        // TODO: build the /edm endpoint once we know how it should work\n    }\n\n}"]}