{"version":3,"sources":["../../src/glassDoor/GlassExpressDataRouter.js"],"names":["app","pane","authenticator","enabled","handler","Router","use","req","res","next","status","send","header","get","text","json","method","authenticateAsync","metaDatabase","then","user","catch","error","stack","param","tableName","table","getTable","message","developerMessage","id","intId","parseInt","getEntityByIdAsync","result","entity","e","name","handleAdd","_parseDates","params","addEntityAsync","handleQuery","query","queryable","fromJson","finalQueryable","asQueryable","merge","resultPromise","count","countAsync","withCount","toArrayWithCountAsync","toArrayAsync","actionName","options","q","executeEdmActionAsync","post","body","executeTableActionAsync","executeEntityActionAsync","fileType","set","getFileWriteStreamByIdAsync","stream","patch","updateEntityAsync","busboy","on","fieldname","file","filename","encoding","mimetype","data","write","end","delete","removeEntityAsync","removeFileByIdAsync","edm","version","tables","filter","columns","column","type","forEach","timestamp","Date","parse","isNaN"],"mappings":"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","file":"GlassExpressDataRouter.js","sourcesContent":["import express from \"express\";\nimport bodyParser from \"body-parser\";\nimport busboy from \"connect-busboy\";\nimport { Queryable } from \"queryablejs\";\nimport Guest from \"../user/Guest\";\nimport Admin from \"../user/Admin\";\nimport User from \"../user/User\";\nimport conditional from \"express-conditional-middleware\";\n\nexport default class {\n    constructor(app, pane, authenticator) {\n        this.enabled = true;\n        this.pane = pane;\n        this.app = app;\n        this.authenticator = authenticator;\n    }\n\n    // NOTE: sub-apps and routers can not be removed from an Express app stack,\n    // so we wrap the router and use some middleware to short-circuit\n    // requests to things we wish we could remove.\n    dispose() {\n        this.enabled = false;\n    }\n\n    attach() {\n        let handler = express.Router();\n        handler.use((req, res, next) => {\n            if (this.enabled) {\n                next();\n            } else {\n                res.status(500).send(\"This API is no longer valid\");\n                next();\n            }\n        });\n\n        handler.use((req, res, next) => {\n            res.header(\"Access-Control-Allow-Origin\", \"*\");\n            res.header(\"Access-Control-Allow-Methods\", \"GET, PATCH, POST, DELETE\");\n            res.header(\"Access-Control-Allow-Headers\", \"X-Query, Access-Control, Authorization, Content-Type\");\n            next();\n        });\n\n        handler.use(conditional(\n            (req, res, next) => {\n                return (req.get(\"X-Query\"));\n            }, bodyParser.text({\n                \"type\":\"application/json\"\n            }), bodyParser.json()\n        ));\n\n        handler.use(busboy());\n\n        handler.use((req, res, next) => {\n            if (!(req.method === \"OPTIONS\")) {\n                this.authenticator.authenticateAsync(req, this.pane.metaDatabase).then((user) => {\n                    req.user = user;\n                    next();\n                }).catch((error) => {\n                    res.status(403).send({\n                        \"error\":\"Forbidden\",\n                        \"developerError\":error.stack\n                    });\n\n                });\n            } else {\n                next();\n            }\n        });\n\n        handler.param(\"table\", (req, res, next, tableName) => {\n            let table = this.pane.metaDatabase.getTable(tableName);\n            if (table) {\n                req.table = table;\n                next();\n            } else {\n                res.status(500).send({\n                    message: `Unknown table: ${tableName}`,\n                    developerMessage: null\n                });\n            }\n        });\n\n        handler.param(\"id\", (req, res, next, id) => {\n            let intId = parseInt(id, 10);\n\n            req.table.getEntityByIdAsync(req.user, id).then((result) => {\n                req.entity = result;\n                next();\n            }).catch((e) => {\n                res.status(404).send({\n                    message: `Could not find id:${id} on ${req.table.name}`,\n                    developerMessage: e.stack\n                });\n            });\n        });\n\n        let handleAdd = (entity, req, res, next) => {\n            this._parseDates(entity, req.params.table);\n\n            req.table.addEntityAsync(req.user, entity).then((result) => {\n                res.status(201).send(result);\n            }).catch((e) => {\n                res.status(500).send({\n                    message: `Add failed on ${req.table.name}`,\n                    developerMessage: e.stack\n                });\n            });\n        }\n\n        let handleQuery = (query, req, res, next) => {\n            var queryable = new Queryable(req.table.name);\n            if (query) {\n                queryable = Queryable.fromJson(query);\n            }\n            let finalQueryable = req.table.asQueryable(req.user).merge(queryable);\n\n            let resultPromise;\n            if (req.query.count) {\n                resultPromise = finalQueryable.countAsync().then((count) => {\n                    return { count: count };\n                });\n            } else if (req.query.withCount) {\n                resultPromise = finalQueryable.toArrayWithCountAsync();\n            } else {\n                resultPromise = finalQueryable.toArrayAsync();\n            }\n\n            resultPromise.then((result) => {\n                res.send(result);\n            }).catch((e) => {\n                res.status(500).send({\n                    message: `Could not query \"${query}\" on ${req.table.name}`,\n                    developerMessage: e.stack\n                });\n            });\n        }\n\n        // GET EDM action\n        handler.get('/@\\*', (req, res, next) => {\n            let actionName = req.params[0];\n            let options = {};\n            options.query = req.query.q;\n            options.user = req.user;\n            this.pane.executeEdmActionAsync(actionName, options).then((result) => {\n                res.send(result);\n            }).catch((error) => {\n                res.status(404).send({\n                    \"error\": error.message,\n                    \"actionScope\": \"edm\",\n                    \"actionName\": actionName\n                });\n            });\n        });\n\n        // POST EDM action\n        handler.post('/@\\*', (req, res, next) => {\n            let actionName = req.params[0];\n            let options = {};\n            options.query = req.query.q;\n            options.body = req.body;\n            options.user = req.user;\n            this.pane.executeEdmActionAsync(actionName, options).then((result) => {\n                res.send(result);\n            }).catch((error) => {\n                res.status(404).send({\n                    \"error\": error.message,\n                    \"actionName\": actionName\n                });\n            });\n        });\n\n        // GET table action\n        handler.get(\"/:table/@\\*\", (req, res, next) => {\n            let actionName = req.params[0];\n            let options = {};\n            options.query = req.query.q;\n            options.user = req.user;\n            this.pane.executeTableActionAsync(req.params.table, actionName, options).then((result) => {\n                res.send(result);\n            }).catch((error) => {\n                res.status(404).send({\n                    \"error\": error.message,\n                    \"actionName\": actionName,\n                    \"actionScope\": \"table\",\n                    \"table\": req.params.table\n                });\n            });\n        });\n\n        // POST table action\n        handler.post(\"/:table/@\\*\", (req, res, next) => {\n            let actionName = req.params[0];\n            let options = {};\n            options.query = req.query.q;\n            options.user = req.user;\n            options.body = req.body;\n            this.pane.executeTableActionAsync(req.params.table, actionName, options).then((result) => {\n                res.send(result);\n            }).catch((error) => {\n                res.status(404).send({\n                    \"error\": error.message,\n                    \"actionName\": actionName,\n                    \"actionScope\": \"table\",\n                    \"table\": req.params.table\n                });\n            });\n        });\n\n        // GET entity action\n        handler.get(\"/:table/:id/@\\*\", (req, res, next) => {\n            let actionName = req.params[0];\n            let options = {};\n            options.query = req.query.q;\n            options.user = req.user;\n            options.entity = req.entity;\n            this.pane.executeEntityActionAsync(req.params.table, actionName, options).then((result) => {\n                res.send(result);\n            }).catch((error) => {\n                res.status(404).send({\n                    \"error\": error.message,\n                    \"actionName\": actionName,\n                    \"actionScope\": \"entity\",\n                    \"table\": req.params.table\n                });\n            });\n        });\n\n        // POST entity action\n        handler.post(\"/:table/:id/@\\*\", (req, res, next) => {\n            let actionName = req.params[0];\n            let options = {};\n            options.query = req.query.q;\n            options.user = req.user;\n            options.body = req.body;\n            options.entity = req.entity;\n            this.pane.executeEntityActionAsync(req.params.table, actionName, options).then((result) => {\n                res.send(result);\n            }).catch((error) => {\n                res.status(404).send({\n                    \"error\": error.message,\n                    \"actionName\": actionName,\n                    \"actionScope\": \"entity\",\n                    \"table\": req.params.table\n                });\n            });\n        });\n\n        // GET by ID\n        handler.get(\"/:table/:id\", (req, res, next) => {\n            res.send(req.entity);\n            next();\n        });\n\n        // GET query\n        handler.get(\"/:table\", (req, res, next) => {\n            handleQuery(req.query.q, req, res, next);\n        });\n\n        // GET file\n        // TODO: what about MIME types and whatnot?\n        handler.get(\"/:table/:id/file\", (req, res, next) => {\n            // by convention, we can have a \"fileType\" property on any\n            // entity that wants to make such known to a client.\n            if (req.entity.fileType) {\n                res.set(req.entity.fileType);\n            }\n            req.table.getFileWriteStreamByIdAsync(req.user, req.params.id).then((stream) => {\n                res.send(stream);\n            }).catch((e) => {\n                res.status(500).send({\n                    message: `Failed to get file for ${req.params.id} on ${req.table.name}`,\n                    developerMessage: e.stack\n                });\n            });\n        });\n\n        // POST new or query\n        handler.post(\"/:table\", (req, res, next) => {\n            // cleverness award\n            (req.get(\"X-Query\") ? handleQuery : handleAdd)(req.body, req, res, next);\n        });\n\n        // PATCH update\n        handler.patch(\"/:table/:id\", (req, res, next) => {\n            this._parseDates(req.body, req.params.table);\n            req.table.updateEntityAsync(req.user, req.entity, req.body).then((result) => {\n                res.send(result);\n            }).catch((e) => {\n                res.status(500).send({\n                    message: `Failed to update id:${id} on ${req.table.name}`,\n                    developerMessage: e.stack\n                });\n            });\n        });\n\n        // POST file\n        handler.post(\"/:table/:id/file\", (req, res, next) => {\n            if (!req.busboy) {\n                res.status(500).send(\"No file found\");\n            }\n            req.table.getFileWriteStreamByIdAsync(req.user, req.params.id).then((stream) => {\n                req.busboy.on('file', (fieldname, file, filename, encoding, mimetype) => {\n                    file.on('data', (data) => {\n                        stream.write(data);\n                    });\n                    file.on('end', () => {\n                        stream.end();\n                        res.status(200).end();\n                    });\n                });\n            }).catch((e) => {\n                res.status(500).send({\n                    message: `Failed upload file for id:${id} on ${req.table.name}`,\n                    developerMessage: e.stack\n                });\n            });\n        });\n\n        // DELETE entity\n        handler.delete(\"/:table/:id\", (req, res, next) => {\n            req.table.removeEntityAsync(req.user, req.entity).then((result) => {\n                res.status(200).end();\n            }).catch((e) => {\n                res.status(500).send({\n                    message: `Failed to delete id:${id} on ${req.table.name}`,\n                    developerMessage: e.stack\n                });\n            });\n        });\n\n        // DELETE file\n        handler.delete(\"/:table/:id/file\", (req, res, next) => {\n            req.table.removeFileByIdAsync(req.user, req.params.id).then((result) => {\n                res.status(200).end();\n            }).catch((e) => {\n                res.status(500).send({\n                    message: `Failed to delete file for id:${id} on ${req.table.name}`,\n                    developerMessage: e.stack\n                });\n            });\n        });\n\n        this.app.use(`/${this.pane.edm.name}/${this.pane.edm.version}`, handler);\n    }\n\n    _parseDates(entity, tableName) {\n        this.pane.edm.tables.filter((table) => {\n            return table.name === tableName;\n        })[0].columns.filter((column) => {\n            return column.type === \"Date\";\n        }).forEach((column) => {\n            let timestamp = Date.parse(entity[column.name]);\n            if (! isNaN(timestamp)) {\n                entity[column.name] = new Date(timestamp);\n            }\n        });\n\n    }\n\n\n}"]}