{"version":3,"sources":["../../src/glassDoor/GlassExpressDataRouter.js"],"names":["app","pane","enabled","handler","Router","use","req","res","next","status","send","get","json","user","param","model","table","metaDatabase","getTable","message","developerMessage","id","intId","parseInt","getEntityByIdAsync","then","result","entity","catch","e","name","stack","handleAdd","addEntityAsync","handleQuery","query","queryable","fromJson","asQueryable","merge","toArrayAsync","q","fileType","set","getFileWriteStreamByIdAsync","params","stream","post","body","updateEntityAsync","busboy","on","fieldname","file","filename","encoding","mimetype","data","write","end","delete","removeEntityAsync","removeFileByIdAsync","edm","version"],"mappings":"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","file":"GlassExpressDataRouter.js","sourcesContent":["import express from \"express\";\nimport bodyParser from \"body-parser\";\nimport busboy from \"connect-busboy\";\nimport { Queryable } from \"queryablejs\";\nimport Guest from \"../user/Guest\";\nimport Admin from \"../user/Admin\";\nimport User from \"../user/User\";\nimport conditional from \"express-conditional-middleware\";\n\nexport default class {\n    constructor(app, pane){\n        this.enabled = true;\n        this.pane = pane;\n        this.app = app;\n    }\n\n    // NOTE: sub-apps and routers can not be removed from an Express app stack,\n    // so we wrap the router and use some middleware to short-circuit\n    // requests to things we wish we could remove.\n    dispose() {\n        this.enabled = false;\n    }\n\n    attach() {\n        let handler = express.Router();\n        handler.use((req, res, next) => {\n            if (this.enabled) {\n                next();\n            } else {\n                res.status(500).send(\"This API is no longer valid\");\n                next();\n            }\n        });\n\n        handler.use(conditional( (req, res, next) => {\n            return !(req.get(\"X-Query\"));\n        }, bodyParser.json()\n        ));\n\n        handler.use(busboy());\n\n        handler.use((req, res, next) => {\n            // add the user to req\n            // TODO: actually add the user to req\n            req.user = new Guest();\n            next();\n        });\n\n        handler.param(\"model\", (req, res, next, model) => {\n            let table = this.pane.metaDatabase.getTable(model);\n            if (table) {\n                req.table = table;\n                next();\n            } else {\n                res.status(500).send({\n                    message:`Unknown model: ${model}`,\n                    developerMessage:null\n                });\n            }\n        });\n\n        handler.param(\"id\", (req, res, next, id) => {\n            let intId = parseInt(id, 10);\n\n            req.table.getEntityByIdAsync(req.user, id).then((result) => {\n                req.entity = result;\n                next();\n            }).catch((e) => {\n                res.status(404).send({\n                    message:`Could not find id:${id} on ${req.table.name}`,\n                    developerMessage: e.stack\n                });              \n            });\n        });\n\n        let handleAdd = function(entity, req, res, next) {\n            req.table.addEntityAsync(req.user, entity).then((result) => {\n                res.status(201).send(result);\n            }).catch((e) => {\n                res.status(500).send({\n                    message:`Add failed on ${req.table.name}`,\n                    developerMessage: e.stack\n                });\n            });\n        }\n\n        let handleQuery = function(query, req, res, next) {\n            var queryable = new Queryable(req.table.name);\n            if (query) {\n                queryable = Queryable.fromJson(query);\n            }\n            req.table.asQueryable(req.user).merge(queryable).toArrayAsync().then((result) => {\n                res.send(result);\n            }).catch((e) => {\n                res.status(500).send({\n                    message:`Could not query \"${query}\" on ${req.table.name}`,\n                    developerMessage: e.stack\n                });\n            });\n        }\n\n        // GET by ID\n        handler.get(\"/:model/:id\", (req, res, next) => {\n            res.send(req.entity);\n            next();\n        });\n        \n        // GET query\n        handler.get(\"/:model\", (req, res, next) => {\n            handleQuery(req.query.q, req, res, next);\n        });\n\n        // GET file\n        // TODO: what about MIME types and whatnot?\n        handler.get(\"/:model/:id/file\", (req, res, next) => {\n            // by convention, we can have a \"fileType\" property on any\n            // entity that wants to make such known to a client.\n            if (req.entity.fileType) {\n                res.set(req.entity.fileType);\n            }            \n            req.table.getFileWriteStreamByIdAsync(req.user, req.params.id).then((stream) => {\n                res.send(stream);\n            }).catch((e) => {\n                res.status(500).send({\n                    message: `Failed to get file for ${req.params.id} on ${req.table.name}`,\n                    developerMessage: e.stack\n                });\n            });\n        });\n\n        // POST new or query\n        handler.post(\"/:model\", (req, res, next) => {\n            // cleverness award\n            (req.get(\"X-Query\") ? handleQuery : handleAdd)(req.body, req, res, next);\n        });\n\n        // POST update\n        handler.post(\"/:model/:id\", (req, res, next) => {\n            req.table.updateEntityAsync(req.user, req.entity, req.body).then((result) => {\n                res.send(result);\n            }).catch((e) => {\n                res.status(500).send({\n                    message:`Failed to update id:${id} on ${req.table.name}`,\n                    developerMessage: e.stack\n                });\n            });\n        });\n\n        // POST file\n        handler.post(\"/:model/:id/file\", (req, res, next) => {\n            if (!req.busboy) {\n                res.status(500).send(\"No file found\");\n            }\n            req.table.getFileWriteStreamByIdAsync(req.user, req.params.id).then((stream) => {\n                req.busboy.on('file', (fieldname, file, filename, encoding, mimetype) => {\n                    file.on('data', (data) => {\n                        stream.write(data);\n                    });\n                    file.on('end', () => {\n                        stream.end();\n                        res.status(200).end();\n                    });\n                });\n            }).catch((e) => {\n                res.status(500).send({\n                    message:`Failed upload file for id:${id} on ${req.table.name}`,\n                    developerMessage: e.stack\n                });\n            });\n        });\n\n        // DELETE entity\n        handler.delete(\"/:model/:id\", (req, res, next) => {\n            req.table.removeEntityAsync(req.user, req.entity).then((result) => {\n                res.status(200).end();\n            }).catch((e) => {\n                res.status(500).send({\n                    message:`Failed to delete id:${id} on ${req.table.name}`,\n                    developerMessage: e.stack\n                });\n            });\n        });\n\n        // DELETE file\n        handler.delete(\"/:model/:id/file\", (req, res, next) => {\n            req.table.removeFileByIdAsync(req.user, req.params.id).then((result) => {\n                res.status(200).end();\n            }).catch((e) => {\n                res.status(500).send({\n                    message:`Failed to delete file for id:${id} on ${req.table.name}`,\n                    developerMessage: e.stack\n                });\n            });\n        });\n\n        this.app.use(`/${this.pane.edm.name}/${this.pane.edm.version}`, handler);\n    }\n\n\n}"]}