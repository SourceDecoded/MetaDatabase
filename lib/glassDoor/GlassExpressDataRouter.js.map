{"version":3,"sources":["../../src/glassDoor/GlassExpressDataRouter.js"],"names":["app","pane","authenticator","enabled","handler","Router","use","req","res","next","status","send","get","json","authenticateAsync","then","user","catch","error","stack","param","tableName","table","metaDatabase","getTable","message","developerMessage","id","intId","parseInt","getEntityByIdAsync","result","entity","e","name","handleAdd","addEntityAsync","handleQuery","query","queryable","fromJson","finalQueryable","asQueryable","merge","resultPromise","count","countAsync","withCount","toArrayWithCountAsync","toArrayAsync","actionName","params","options","q","executeEdmActionAsync","post","body","executeTableActionAsync","executeEntityActionAsync","fileType","set","getFileWriteStreamByIdAsync","stream","updateEntityAsync","busboy","on","fieldname","file","filename","encoding","mimetype","data","write","end","delete","removeEntityAsync","removeFileByIdAsync","edm","version"],"mappings":"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","file":"GlassExpressDataRouter.js","sourcesContent":["import express from \"express\";\nimport bodyParser from \"body-parser\";\nimport busboy from \"connect-busboy\";\nimport { Queryable } from \"queryablejs\";\nimport Guest from \"../user/Guest\";\nimport Admin from \"../user/Admin\";\nimport User from \"../user/User\";\nimport conditional from \"express-conditional-middleware\";\n\nexport default class {\n    constructor(app, pane, authenticator){\n        this.enabled = true;\n        this.pane = pane;\n        this.app = app;\n        this.authenticator = authenticator;\n    }\n\n    // NOTE: sub-apps and routers can not be removed from an Express app stack,\n    // so we wrap the router and use some middleware to short-circuit\n    // requests to things we wish we could remove.\n    dispose() {\n        this.enabled = false;\n    }\n\n    attach() {\n        let handler = express.Router();\n        handler.use((req, res, next) => {\n            if (this.enabled) {\n                next();\n            } else {\n                res.status(500).send(\"This API is no longer valid\");\n                next();\n            }\n        });\n\n        handler.use(conditional( (req, res, next) => {\n            return !(req.get(\"X-Query\"));\n        }, bodyParser.json()\n        ));\n\n        handler.use(busboy());\n\n        handler.use((req, res, next) => {\n            this.authenticator.authenticateAsync(req).then((user) => {\n                req.user = user;\n                next();\n            }).catch((error) => {\n                res.status(403).send({\n                    \"error\":\"Forbidden\",\n                    \"developerError\":error.stack\n                });\n            });\n        });\n\n        handler.param(\"table\", (req, res, next, tableName) => {\n            let table = this.pane.metaDatabase.getTable(tableName);\n            if (table) {\n                req.table = table;\n                next();\n            } else {\n                res.status(500).send({\n                    message:`Unknown table: ${tableName}`,\n                    developerMessage:null\n                });\n            }\n        });\n\n        handler.param(\"id\", (req, res, next, id) => {\n            let intId = parseInt(id, 10);\n\n            req.table.getEntityByIdAsync(req.user, id).then((result) => {\n                req.entity = result;\n                next();\n            }).catch((e) => {\n                res.status(404).send({\n                    message:`Could not find id:${id} on ${req.table.name}`,\n                    developerMessage: e.stack\n                });              \n            });\n        });\n\n        let handleAdd = function(entity, req, res, next) {\n            req.table.addEntityAsync(req.user, entity).then((result) => {\n                res.status(201).send(result);\n            }).catch((e) => {\n                res.status(500).send({\n                    message:`Add failed on ${req.table.name}`,\n                    developerMessage: e.stack\n                });\n            });\n        }\n\n        let handleQuery = function(query, req, res, next) {\n            var queryable = new Queryable(req.table.name);\n            if (query) {\n                queryable = Queryable.fromJson(query);\n            }\n            let finalQueryable = req.table.asQueryable(req.user).merge(queryable);\n\n            let resultPromise;\n            if (req.query.count) {\n                resultPromise = finalQueryable.countAsync().then((count) => {\n                    return {count:count};\n                });\n            } else if (req.query.withCount) {\n                resultPromise = finalQueryable.toArrayWithCountAsync();\n            } else {\n                resultPromise = finalQueryable.toArrayAsync();\n            }\n\n            resultPromise.then((result) => {\n                res.send(result);\n            }).catch((e) => {\n                res.status(500).send({\n                    message:`Could not query \"${query}\" on ${req.table.name}`,\n                    developerMessage: e.stack\n                });\n            });\n        }\n\n        // GET EDM action\n        handler.get('/@\\*', (req, res, next) => {\n            let actionName = req.params[0];\n            let options = {};\n            options.query = req.query.q;\n            options.user = req.user;\n            this.pane.executeEdmActionAsync(actionName, options).then((result) => {\n                res.send(result);\n            }).catch((error) => {\n                res.status(404).send({\n                    \"error\":error.message,\n                    \"actionScope\":\"edm\",\n                    \"actionName\":actionName\n                });\n            });\n        });\n\n        // POST EDM action\n        handler.post('/@\\*', (req, res, next) => {\n            let actionName = req.params[0];\n            let options = {};\n            options.query = req.query.q;\n            options.body = req.body;\n            options.user = req.user;\n            this.pane.executeEdmActionAsync(actionName, options).then((result) => {\n                res.send(result);\n            }).catch((error) => {\n                res.status(404).send({\n                    \"error\":error.message,\n                    \"actionName\":actionName\n                });\n            });\n        });\n\n        // GET table action\n        handler.get(\"/:table/@\\*\", (req, res, next) => {\n            let actionName = req.params[0];\n            let options = {};\n            options.query = req.query.q;\n            options.user = req.user;\n            this.pane.executeTableActionAsync(req.params.table, actionName, options).then((result) => {\n                res.send(result);\n            }).catch((error) => {\n                res.status(404).send({\n                    \"error\":error.message,\n                    \"actionName\":actionName,\n                    \"actionScope\":\"table\",\n                    \"table\":req.params.table\n                });\n            });\n        });\n\n        // POST table action\n        handler.post(\"/:table/@\\*\", (req, res, next) => {\n            let actionName = req.params[0];\n            let options = {};\n            options.query = req.query.q;\n            options.user = req.user;\n            options.body = req.body;\n            this.pane.executeTableActionAsync(req.params.table, actionName, options).then((result) => {\n                res.send(result);\n            }).catch((error) => {\n                res.status(404).send({\n                    \"error\":error.message,\n                    \"actionName\":actionName,\n                    \"actionScope\":\"table\",\n                    \"table\":req.params.table\n                });\n            });\n        });\n\n        // GET entity action\n        handler.get(\"/:table/:id/@\\*\", (req, res, next) => {\n            let actionName = req.params[0];\n            let options = {};\n            options.query = req.query.q;\n            options.user = req.user;\n            options.entity = req.entity;\n            this.pane.executeEntityActionAsync(req.params.table, actionName, options).then((result) => {\n                res.send(result);\n            }).catch((error) => {\n                res.status(404).send({\n                    \"error\":error.message,\n                    \"actionName\":actionName,\n                    \"actionScope\":\"entity\",\n                    \"table\":req.params.table\n                });\n            });\n        });\n\n        // POST entity action\n        handler.post(\"/:table/:id/@\\*\", (req, res, next) => {\n            let actionName = req.params[0];\n            let options = {};\n            options.query = req.query.q;\n            options.user = req.user;\n            options.body = req.body;\n            options.entity = req.entity;\n            this.pane.executeEntityActionAsync(req.params.table, actionName, options).then((result) => {\n                res.send(result);\n            }).catch((error) => {\n                res.status(404).send({\n                    \"error\":error.message,\n                    \"actionName\":actionName,\n                    \"actionScope\":\"entity\",\n                    \"table\":req.params.table\n                });\n            });\n        });\n\n        // GET by ID\n        handler.get(\"/:table/:id\", (req, res, next) => {\n            res.send(req.entity);\n            next();\n        });\n        \n        // GET query\n        handler.get(\"/:table\", (req, res, next) => {\n            handleQuery(req.query.q, req, res, next);\n        });\n\n        // GET file\n        // TODO: what about MIME types and whatnot?\n        handler.get(\"/:table/:id/file\", (req, res, next) => {\n            // by convention, we can have a \"fileType\" property on any\n            // entity that wants to make such known to a client.\n            if (req.entity.fileType) {\n                res.set(req.entity.fileType);\n            }            \n            req.table.getFileWriteStreamByIdAsync(req.user, req.params.id).then((stream) => {\n                res.send(stream);\n            }).catch((e) => {\n                res.status(500).send({\n                    message: `Failed to get file for ${req.params.id} on ${req.table.name}`,\n                    developerMessage: e.stack\n                });\n            });\n        });\n\n        // POST new or query\n        handler.post(\"/:table\", (req, res, next) => {\n            // cleverness award\n            (req.get(\"X-Query\") ? handleQuery : handleAdd)(req.body, req, res, next);\n        });\n\n        // POST update\n        handler.post(\"/:table/:id\", (req, res, next) => {\n            req.table.updateEntityAsync(req.user, req.entity, req.body).then((result) => {\n                res.send(result);\n            }).catch((e) => {\n                res.status(500).send({\n                    message:`Failed to update id:${id} on ${req.table.name}`,\n                    developerMessage: e.stack\n                });\n            });\n        });\n\n        // POST file\n        handler.post(\"/:table/:id/file\", (req, res, next) => {\n            if (!req.busboy) {\n                res.status(500).send(\"No file found\");\n            }\n            req.table.getFileWriteStreamByIdAsync(req.user, req.params.id).then((stream) => {\n                req.busboy.on('file', (fieldname, file, filename, encoding, mimetype) => {\n                    file.on('data', (data) => {\n                        stream.write(data);\n                    });\n                    file.on('end', () => {\n                        stream.end();\n                        res.status(200).end();\n                    });\n                });\n            }).catch((e) => {\n                res.status(500).send({\n                    message:`Failed upload file for id:${id} on ${req.table.name}`,\n                    developerMessage: e.stack\n                });\n            });\n        });\n\n        // DELETE entity\n        handler.delete(\"/:table/:id\", (req, res, next) => {\n            req.table.removeEntityAsync(req.user, req.entity).then((result) => {\n                res.status(200).end();\n            }).catch((e) => {\n                res.status(500).send({\n                    message:`Failed to delete id:${id} on ${req.table.name}`,\n                    developerMessage: e.stack\n                });\n            });\n        });\n\n        // DELETE file\n        handler.delete(\"/:table/:id/file\", (req, res, next) => {\n            req.table.removeFileByIdAsync(req.user, req.params.id).then((result) => {\n                res.status(200).end();\n            }).catch((e) => {\n                res.status(500).send({\n                    message:`Failed to delete file for id:${id} on ${req.table.name}`,\n                    developerMessage: e.stack\n                });\n            });\n        });\n\n        this.app.use(`/${this.pane.edm.name}/${this.pane.edm.version}`, handler);\n    }\n\n\n}"]}