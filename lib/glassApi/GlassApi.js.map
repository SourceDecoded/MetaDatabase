{"version":3,"sources":["../../src/glassApi/GlassApi.js"],"names":["supportedDrivers","supportedFilesystems","supportedDoors","options","glassPanes","glassDoors","authenticator","decorators","actions","dbDriver","Error","Object","keys","indexOf","name","_driver","forEach","action","registerAction","getEdmListAsync","then","edms","_buildPanesAsync","_openDoorsAsync","doors","emit","catch","error","door","dispose","key","version","getEdmAsync","label","addEdmAsync","edm","_buildPaneAsync","pane","map","addPane","thePane","Promise","reject","deleteEdmAsync","newEdm","updateEdmAsync","scope","api","match","table","entity","actionName","executeAsync","reduce","previous","current","resolve","getDatabaseForEdmAsync","db","fileSystem","assign","metaOptions","database","metaDatabase","paneOptions","migrationRunner","migrator","getMigrator","doorsConfig","length","console","warn","doorConfig","push"],"mappings":"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","file":"GlassApi.js","sourcesContent":["// GlassDb\n// Manages a set of GlassPanes\nimport GlassPane from \"../glassPane/GlassPane\";\nimport MigrationRunner from \"../migration/Runner\";\nimport MetaDatabase from \"../meta/Database\";\nimport MsSqlDriver from \"../dbDriver/MsSqlDriver\";\nimport SqliteDriver from \"../dbDriver/SqliteDriver\";\nimport ExpressDoor from \"../glassDoor/GlassExpressDoor\";\nimport EventEmitter from \"events\";\n\nlet supportedDrivers = {\n    \"sqlite\": SqliteDriver,\n    \"mssql\": MsSqlDriver\n};\n\nlet supportedFilesystems = {};\n\nlet supportedDoors = {\n    \"express\": ExpressDoor\n};\n\n/*\n{\n    \"dbDriver\": {\n        \"name\": \"mssql\" || \"sqlite\",\n        \"options\": {(driver-specific options)}\n    },\n    \"fileSystem\": {\n        \"name\": \"fsDriverName\",\n        \"options\": {(fs driver-specific options)}\n    },\n    \"doors\": [\n        {\n            \"name\": \"express\",\n            \"options\": {\n                \"address\":\"0.0.0.0\",\n                \"port\":\"9000\"\n            }\n        }\n    ],\n    \"authenticator\": (iAuthenticator),\n    \"actions\":[\n        {\n            \"name\":\"actionName\",\n            \"scope\": \"api\" || \"edm\" || \"table\" || \"entity\",\n            \"match\": {\n                \"edm\":\"edmName\",\n                \"version\":\"versionString\" || \"*\",\n                \"table\":\"post\"\n            },\n            \"executeAsync\":(actionOptions)\n        }\n    ]\n}\n\nactionOptions {\n    \"metaDatabase\": metaDatabase || undefined,\n    \"edm\":edm || undefined,\n    \"tableName\": \"name\" || undefined,\n    \"entity\": entity || undefined,\n    \"body\": requestBody || undefined,\n    \"query\": requestQuery || undefined,\n    \"user\": user\n}\n*/\n\nexport default class extends EventEmitter {\n    constructor(options = {}) {\n        super();\n        this.glassPanes = {};\n        this.glassDoors = [];\n        this.authenticator =  options.authenticator;\n        this.decorators = options.decorators || [];\n        this.actions = {\"api\":{}, \"edm\":{}, \"table\":{}, \"entity\":{}};\n\n        if (!options.dbDriver) {\n            throw new Error(\"Need dbDriver info\");\n        }\n\n        let dbDriver = options.dbDriver;\n\n        if (Object.keys(supportedDrivers).indexOf(dbDriver.name) === -1) {\n            throw new Error(`Unsupported dbDriver: ${dbDriver.name}`);\n        }\n        \n        this._driver = new supportedDrivers[dbDriver.name](dbDriver.options);\n\n        if (options.actions) {\n            options.actions.forEach((action) => {\n                this.registerAction(action);\n            });\n        }\n        \n        this._driver.getEdmListAsync().then((edms) => {\n            return this._buildPanesAsync(edms);\n        }).then(() => {\n            return this._openDoorsAsync(options.doors);\n        }).then(() => {\n            this.emit(\"ready\");\n        }).catch((error) => {\n            this.emit(\"error\", error);\n        });\n    }\n\n    dispose() {\n        this.glassDoors.forEach((door) => {\n            if (typeof door.dispose === \"function\") {\n                door.dispose();\n            }\n        });\n        \n        Object.keys(this.glassPanes).forEach((key) => {\n            this.glassPanes[key].dispose();\n        });\n    }\n\n    getEdmAsync(name, version) {\n        return this._driver.getEdmAsync(name, version);\n    }\n\n    addEdmAsync(name, version, label) {\n        return this._driver.addEdmAsync(name, version, label).then(() => {\n            return this._driver.getEdmAsync(name, version);\n        }).then((edm) => {\n            return this._buildPaneAsync(edm);\n        }).then((pane) => {\n            Object.keys(this.glassDoors).map((key) => this.glassDoors[key]).forEach((door) => {\n                door.addPane(pane);\n            });\n        });\n    }\n\n    deleteEdmAsync(name, version) {\n        let thePane = this.glassPanes[name + version];\n        if (!thePane) {\n            return Promise.reject(`Not an active EDM: ${name} ${version}`);\n        }\n        return this._driver.deleteEdmAsync(name, version).then(() => {\n            this.glassPanes[name + version].dispose();\n            delete this.glassPanes[name + version];\n        });\n    }\n\n    updateEdmAsync(newEdm) {\n        let {name, version} = newEdm;\n        let thePane = this.glassPanes[name + version];\n        if (!thePane) {\n            return Promise.reject(`Not an active EDM: ${name} ${version}`);\n        }\n        return this._driver.updateEdmAsync(newEdm);\n    }\n\n    registerAction(action) {\n        if (action.scope === \"api\") {\n            this.actions.api[action.name] = action;\n        } else if (action.scope === \"edm\") {\n            this.actions.edm[action.match.edm] = this.actions.edm[action.match.edm] || {};\n            this.actions.edm[action.match.edm][action.match.version] = this.actions.edm[action.match.edm][action.match.version] || {};\n            this.actions.edm[action.match.edm][action.match.version][action.name] = action;\n        } else if (action.scope === \"table\") {\n            this.actions.table[action.match.edm] = this.actions.table[action.match.edm] || {};\n            this.actions.table[action.match.edm][action.match.version] = this.actions.table[action.match.edm][action.match.version] || {};\n            this.actions.table[action.match.edm][action.match.version][action.match.table] = this.actions.table[action.match.edm][action.match.version][action.match.table] || {};\n            this.actions.table[action.match.edm][action.match.version][action.match.table][action.name] = action;\n        } else if (action.scope === \"entity\") {\n            this.actions.entity[action.match.edm] = this.actions.table[action.match.edm] || {};\n            this.actions.entity[action.match.edm][action.match.version] = this.actions.entity[action.match.edm][action.match.version] || {};\n            this.actions.entity[action.match.edm][action.match.version][action.match.table] = this.actions.entity[action.match.edm][action.match.version][action.match.table] || {};\n            this.actions.entity[action.match.edm][action.match.version][action.match.table][action.name] = action;\n        }\n    }\n\n    executeApiActionAsync(actionName, options) {\n        if (!this.actions.api[actionName]) {\n            return Promise.reject(\"API action not found: \" + actionName);\n        }\n        return this.actions.api[actionName].executeAsync(options);\n    }\n\n    _buildPanesAsync(edms) {\n        return edms.reduce((previous, current) => {\n            return previous.then(() => {\n                return this._buildPaneAsync(current);\n            });\n        }, Promise.resolve());\n    }\n\n    _buildPaneAsync(edm) {\n        return this._driver.getDatabaseForEdmAsync(edm).then((db) => {\n            // TODO: instantiate filesystem\n            let fileSystem = {};\n\n            let actions = {\"edm\":{}, \"table\":{}, \"entity\":{}};\n\n            if (this.actions.edm[edm.name] && this.actions.edm[edm.name][edm.version]) {\n                Object.assign(actions.edm, this.actions.edm[edm.name][edm.version]);\n            }\n            if (this.actions.edm[edm.name] && this.actions.edm[edm.name][\"*\"]) {\n                Object.assign(actions.edm, this.actions.edm[edm.name][\"*\"]);\n            }\n\n            if (this.actions.table[edm.name] && this.actions.table[edm.name][edm.version]) {\n                Object.assign(actions.table, this.actions.table[edm.name][edm.version]);\n            }\n            if (this.actions.table[edm.name] && this.actions.table[edm.name][\"*\"]) {\n                Object.assign(actions.table, this.actions.table[edm.name][\"*\"]);\n            }\n\n            if (this.actions.entity[edm.name] && this.actions.entity[edm.name][edm.version]) {\n                Object.assign(actions.entity, this.actions.entity[edm.name][edm.version]);\n            }\n            if (this.actions.entity[edm.name] && this.actions.entity[edm.name][\"*\"]) {\n                Object.assign(actions.entity, this.actions.entity[edm.name][\"*\"]);\n            }\n\n            let metaOptions = {\n                database: db,\n                decorators: this.decorators,\n                fileSystem: fileSystem\n            };\n\n            let metaDatabase = new MetaDatabase(metaOptions);\n\n            let paneOptions = {\n                metaDatabase: metaDatabase,\n                migrationRunner: new MigrationRunner({edm:edm, migrator: db.getMigrator()}),\n                edm: edm,\n                actions: actions\n            };\n\n            let pane = new GlassPane(paneOptions);\n            this.glassPanes[edm.name + edm.version] = pane;\n            return pane; \n        });\n    }\n\n    _openDoorsAsync(doorsConfig = []) {\n        if (doorsConfig.length === 0) {\n            console.warn(\"GlassDB is running, but there is no way to access it. Include one or more doors in the options.\");\n        }\n        doorsConfig.forEach((doorConfig) => {\n            doorConfig.options['glass'] = this;\n            let door = new supportedDoors[doorConfig.name](doorConfig.options);\n            Object.keys(this.glassPanes).map((key) => this.glassPanes[key]).forEach((pane) => {\n                door.addPane(pane);\n            });\n            this.glassDoors.push(door);\n        });\n    }\n\n}"]}