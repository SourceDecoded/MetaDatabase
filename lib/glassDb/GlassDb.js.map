{"version":3,"sources":["../../src/glassDb/GlassDb.js"],"names":["supportedDrivers","supportedFilesystems","supportedDoors","options","glassPanes","glassDoors","dbDriver","Error","Object","keys","find","name","driver","require","getEdmListAsync","then","edms","_buildPanesAsync","_openDoorsAsync","doors","reduce","previous","current","getDatabaseForEdmAsync","db","decorators","fileSystem","metaOptions","database","metaDatabase","paneOptions","migrationRunner","migrator","getMigrator","edm","version","Promise","resolve","doorsConfig","length","console","warn","forEach","doorConfig","door","push"],"mappings":";;;;;;qjBAAA;AACA;;;AACA;;;;AACA;;;;AACA;;;;;;;;AAEAA,mBAAmB;AACf,cAAU,0BADK;AAEf,aAAS;AAFM,CAAnB;;AAKAC,uBAAuB,EAAvB;;AAEAC,iBAAiB;AACb,eAAW;AADE,CAAjB;;AAIA;;;;;;;;;;;;;;;;;;;;;;;AAuBI,sBAA0B;AAAA,YAAdC,OAAc,uEAAJ,EAAI;;AAAA;;AACtB,aAAKC,UAAL,GAAkB,EAAlB;AACA,aAAKC,UAAL,GAAkB,EAAlB;;AAEA,YAAI,CAACF,QAAQG,QAAb,EAAuB;AACnB,kBAAM,IAAIC,KAAJ,CAAU,oBAAV,CAAN;AACH;;AAED,YAAID,WAAWH,QAAQG,QAAvB;;AAEA,YAAIE,OAAOC,IAAP,CAAYT,gBAAZ,EAA8BU,IAA9B,CAAmCJ,SAASK,IAA5C,MAAsD,CAAC,CAA3D,EAA8D;AAC1D,kBAAM,IAAIJ,KAAJ,4BAAmCD,SAASK,IAA5C,CAAN;AACH;;AAED,YAAIC,SAAS,IAAIC,OAAJ,CAAYb,iBAAiBM,SAASK,IAA1B,CAAZ,EAA6CL,SAASH,OAAtD,CAAb;;AAEAS,eAAOE,eAAP,GAAyBC,IAAzB,CAA8B,UAACC,IAAD,EAAU;AACpC,mBAAOC,iBAAiBD,IAAjB,CAAP;AACH,SAFD,EAEGD,IAFH,CAEQ,YAAM;AACV,mBAAOG,gBAAgBf,QAAQgB,KAAxB,CAAP;AACH,SAJD;AAMH;;;;yCAEgBH,I,EAAM;AAAA;;AACnB,mBAAOA,KAAKI,MAAL,CAAY,UAACC,QAAD,EAAWC,OAAX,EAAuB;AACtC,uBAAOD,SAASN,IAAT,CAAc,YAAM;AACvB,2BAAOH,OAAOW,sBAAP,CAA8BD,OAA9B,EAAuCP,IAAvC,CAA4C,UAACS,EAAD,EAAQ;AACvD;AACA,4BAAIC,aAAa,EAAjB;;AAEA;AACA,4BAAIC,aAAa,EAAjB;;AAEA,4BAAIC,cAAc;AACdC,sCAAUJ,EADI;AAEdC,wCAAYA,UAFE;AAGdC,wCAAYA;AAHE,yBAAlB;;AAMA,4BAAIG,eAAe,uBAAiBF,WAAjB,CAAnB;;AAEA,4BAAIG,cAAc;AACdD,0CAAcA,YADA;AAEdE,6CAAiB,qBAAoB,EAACC,UAASpB,OAAOqB,WAAP,EAAV,EAApB,CAFH;AAGdC,iCAAKZ;AAHS,yBAAlB;AAKA,8BAAKlB,UAAL,CAAgB8B,IAAIvB,IAAJ,GAAWuB,IAAIC,OAA/B,IAA0C,wBAAcL,WAAd,CAA1C;AACH,qBArBM,CAAP;AAsBH,iBAvBM,CAAP;AAwBH,aAzBM,EAyBJM,QAAQC,OAAR,EAzBI,CAAP;AA0BH;;;wCAEeC,W,EAAa;AAAA;;AACzB,gBAAIA,YAAYC,MAAZ,KAAuB,CAA3B,EAA8B;AAC1BC,wBAAQC,IAAR,CAAa,gGAAb;AACH;AACDH,wBAAYI,OAAZ,CAAoB,UAACC,UAAD,EAAgB;AAChCA,2BAAWxC,OAAX,CAAmB,OAAnB;AACA,oBAAIyC,OAAO,IAAI/B,OAAJ,CAAYX,eAAe0C,KAAKjC,IAApB,CAAZ,EAAuCiC,KAAKzC,OAA5C,CAAX;AACA,uBAAKE,UAAL,CAAgBwC,IAAhB,CAAqBD,IAArB;AACH,aAJD;AAKH","file":"GlassDb.js","sourcesContent":["// GlassDb\n// Manages a set of GlassPanes\nimport GlassPane from \"../glassPane/GlassPane\";\nimport MigrationRunner from \"../migration/Runner\";\nimport MetaDatabase from \"../meta/Database\";\n\nsupportedDrivers = {\n    \"sqlite\": \"../dbDriver/SqliteDriver\",\n    \"mssql\": \"../dbDriver/MsSqlDriver\"\n};\n\nsupportedFilesystems = {};\n\nsupportedDoors = {\n    \"express\": \"../glassDoor/ExpressDoor\"\n};\n\n/*\n{\n    \"dbDriver\": {\n        \"name\": \"mssql\" || \"sqlite\",\n        \"options\": {(driver-specific options)}\n    },\n    \"fileSystem\": {\n        \"name\": \"fsDriverName\",\n        \"options\": {(fs driver-specific options)}\n    }\n    \"doors\": [\n        {\n            \"name\": \"express\",\n            \"options\": {\n                \"address\":\"0.0.0.0\",\n                \"port\":\"9000\"\n            }\n        }\n    ]\n}\n*/\n\nexport default class {\n    constructor(options = {}) {\n        this.glassPanes = {};\n        this.glassDoors = [];\n\n        if (!options.dbDriver) {\n            throw new Error(\"Need dbDriver info\");\n        }\n\n        let dbDriver = options.dbDriver;\n\n        if (Object.keys(supportedDrivers).find(dbDriver.name) === -1) {\n            throw new Error(`Unsupported dbDriver: ${dbDriver.name}`);\n        }\n        \n        let driver = new require(supportedDrivers[dbDriver.name])(dbDriver.options);\n\n        driver.getEdmListAsync().then((edms) => {\n            return _buildPanesAsync(edms);\n        }).then(() => {\n            return _openDoorsAsync(options.doors);\n        });\n        \n    }\n\n    _buildPanesAsync(edms) {\n        return edms.reduce((previous, current) => {\n            return previous.then(() => {\n                return driver.getDatabaseForEdmAsync(current).then((db) => {\n                    // TODO: instantiate decorators\n                    let decorators = [];\n\n                    // TODO: instantiate filesystem\n                    let fileSystem = {};\n\n                    let metaOptions = {\n                        database: db,\n                        decorators: decorators,\n                        fileSystem: fileSystem\n                    };\n\n                    let metaDatabase = new MetaDatabase(metaOptions);\n\n                    let paneOptions = {\n                        metaDatabase: metaDatabase,\n                        migrationRunner: new MigrationRunner({migrator:driver.getMigrator()}),\n                        edm: current\n                    };\n                    this.glassPanes[edm.name + edm.version] = new GlassPane(paneOptions);\n                });\n            });\n        }, Promise.resolve());\n    }\n\n    _openDoorsAsync(doorsConfig) {\n        if (doorsConfig.length === 0) {\n            console.warn(\"GlassDB is running, but there is no way to access it. Include one or more doors in the options\");\n        }\n        doorsConfig.forEach((doorConfig) => {\n            doorConfig.options['glass'] = this;\n            let door = new require(supportedDoors[door.name])(door.options);\n            this.glassDoors.push(door);\n        });\n    }\n\n}"]}