{"version":3,"sources":["../../src/glassDb/GlassDb.js"],"names":["supportedDrivers","supportedFilesystems","supportedDoors","options","glassPanes","glassDoors","dbDriver","Error","Object","keys","indexOf","name","_driver","getEdmListAsync","then","edms","_buildPanesAsync","_openDoorsAsync","doors","forEach","door","dispose","key","version","getEdmAsync","label","addEdmAsync","edm","_buildPaneAsync","pane","map","addPane","thePane","Promise","reject","deleteEdmAsync","reduce","previous","current","resolve","getDatabaseForEdmAsync","db","decorators","fileSystem","metaOptions","database","metaDatabase","paneOptions","migrationRunner","migrator","getMigrator","doorsConfig","length","console","warn","doorConfig","push"],"mappings":"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","file":"GlassDb.js","sourcesContent":["// GlassDb\n// Manages a set of GlassPanes\nimport GlassPane from \"../glassPane/GlassPane\";\nimport MigrationRunner from \"../migration/Runner\";\nimport MetaDatabase from \"../meta/Database\";\nimport MsSqlDriver from \"../dbDriver/MsSqlDriver\";\nimport SqliteDriver from \"../dbDriver/SqliteDriver\";\nimport ExpressDoor from \"../glassDoor/GlassExpressDoor\";\n\nlet supportedDrivers = {\n    \"sqlite\": SqliteDriver,\n    \"mssql\": MsSqlDriver\n};\n\nlet supportedFilesystems = {};\n\nlet supportedDoors = {\n    \"express\": ExpressDoor\n};\n\n/*\n{\n    \"dbDriver\": {\n        \"name\": \"mssql\" || \"sqlite\",\n        \"options\": {(driver-specific options)}\n    },\n    \"fileSystem\": {\n        \"name\": \"fsDriverName\",\n        \"options\": {(fs driver-specific options)}\n    },\n    \"doors\": [\n        {\n            \"name\": \"express\",\n            \"options\": {\n                \"address\":\"0.0.0.0\",\n                \"port\":\"9000\"\n            }\n        }\n    ]\n}\n*/\n\nexport default class {\n    constructor(options = {}) {\n        this.glassPanes = {};\n        this.glassDoors = [];\n\n        if (!options.dbDriver) {\n            throw new Error(\"Need dbDriver info\");\n        }\n\n        let dbDriver = options.dbDriver;\n\n        if (Object.keys(supportedDrivers).indexOf(dbDriver.name) === -1) {\n            throw new Error(`Unsupported dbDriver: ${dbDriver.name}`);\n        }\n        \n        this._driver = new supportedDrivers[dbDriver.name](dbDriver.options);\n\n        this._driver.getEdmListAsync().then((edms) => {\n            return this._buildPanesAsync(edms);\n        }).then(() => {\n            return this._openDoorsAsync(options.doors);\n        });\n    }\n\n    dispose() {\n        this.glassDoors.forEach((door) => {\n            if (typeof door.dispose === \"function\") {\n                door.dispose();\n            }\n        });\n        \n        Object.keys(this.glassPanes).forEach((key) => {\n            this.glassPanes[key].dispose();\n        });\n    }\n\n    getEdmAsync(name, version) {\n        return this._driver.getEdmAsync(name, version);\n    }\n\n    addEdmAsync(name, version, label) {\n        return this._driver.addEdmAsync(name, version, label).then(() => {\n            return this._driver.getEdmAsync(name, version);\n        }).then((edm) => {\n            return this._buildPaneAsync(edm);\n        }).then((pane) => {\n            Object.keys(this.glassDoors).map((key) => this.glassDoors[key]).forEach((door) => {\n                door.addPane(pane);\n            });\n        });\n    }\n\n    deleteEdmAsync(name, version) {\n        let thePane = this.glassPanes[name + version];\n        if (!thePane) {\n            return Promise.reject(`Not an active EDM: ${name} ${version}`);\n        }\n        return this._driver.deleteEdmAsync(name, version).then(() => {\n            this.glassPanes[name + version].dispose();\n            delete this.glassPanes[name + version];\n        });\n    }\n\n    _buildPanesAsync(edms) {\n        return edms.reduce((previous, current) => {\n            return previous.then(() => {\n                return this._buildPaneAsync(current);\n            });\n        }, Promise.resolve());\n    }\n\n    _buildPaneAsync(edm) {\n        return this._driver.getDatabaseForEdmAsync(edm).then((db) => {\n            // TODO: instantiate decorators\n            let decorators = [];\n\n            // TODO: instantiate filesystem\n            let fileSystem = {};\n\n            let metaOptions = {\n                database: db,\n                decorators: decorators,\n                fileSystem: fileSystem\n            };\n\n            let metaDatabase = new MetaDatabase(metaOptions);\n\n            let paneOptions = {\n                metaDatabase: metaDatabase,\n                migrationRunner: new MigrationRunner({edm:edm, migrator:this._driver.getMigrator()}),\n                edm: edm\n            };\n\n            let pane = new GlassPane(paneOptions);\n            this.glassPanes[edm.name + edm.version] = pane;\n            return pane; \n        });\n    }\n\n    _openDoorsAsync(doorsConfig) {\n        if (doorsConfig.length === 0) {\n            console.warn(\"GlassDB is running, but there is no way to access it. Include one or more doors in the options.\");\n        }\n        doorsConfig.forEach((doorConfig) => {\n            doorConfig.options['glass'] = this;\n            let door = new supportedDoors[doorConfig.name](doorConfig.options);\n            Object.keys(this.glassPanes).map((key) => this.glassPanes[key]).forEach((pane) => {\n                door.addPane(pane);\n            });\n            this.glassDoors.push(door);\n        });\n    }\n\n}"]}