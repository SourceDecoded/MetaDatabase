{"version":3,"sources":["../../src/dbDriver/MsSqlDriver.js"],"names":["generateEdmCreateSql","options","edmSchema","edmTable","generateGetEdmsQuery","user","Error","password","server","edmDb","dataSchema","dataDb","_edmPoolPromse","connect","database","_dataPoolPromise","_verifyEdmTableAsync","then","pool","query","result","recordset","edm","getDataDbAsync","mssqlDatabase","schema","Promise","resolve","reject","length","catch","err","getEdmDbAsync","_checkEdmDbExistsAsync","exists"],"mappings":";;;;;;qjBAAA;;;AACA;;;;AACA;;;;AACA;;;;;;;;AAEA,IAAIA,uBAAuB,SAAvBA,oBAAuB,CAASC,OAAT,EAAkB;AACzC,6BAAuBA,QAAQC,SAA/B,SAA4CD,QAAQE,QAApD;AAUH,CAXD;;AAaA,IAAIC,uBAAuB,SAAvBA,oBAAuB,CAASH,OAAT,EAAkB;AACzC,kEACOA,QAAQC,SADf,SAC4BD,QAAQE,QADpC;AAEH,CAHD;;;AAOI,sBAA0B;AAAA,YAAdF,OAAc,uEAAJ,EAAI;;AAAA;;AACtB,YAAI,CAACA,QAAQI,IAAb,EAAmB;AACf,kBAAM,IAAIC,KAAJ,CAAU,6BAAV,CAAN;AACH;AACD,YAAI,CAACL,QAAQM,QAAb,EAAuB;AACnB,kBAAM,IAAID,KAAJ,CAAU,iCAAV,CAAN;AACH;AACD,YAAI,CAACL,QAAQO,MAAb,EAAqB;AACjB,kBAAM,IAAIF,KAAJ,CAAU,+BAAV,CAAN;AACH;;AAEDL,gBAAQQ,KAAR,GAAgBR,QAAQQ,KAAR,IAAiB,WAAjC;AACAR,gBAAQC,SAAR,GAAoBD,QAAQC,SAAR,IAAqB,KAAzC;AACAD,gBAAQE,QAAR,GAAmBF,QAAQE,QAAR,IAAoB,KAAvC;AACAF,gBAAQS,UAAR,GAAqBT,QAAQS,UAAR,IAAsB,KAA3C;AACAT,gBAAQU,MAAR,GAAiBV,QAAQU,MAAR,IAAkB,YAAnC;;AAEA,aAAKV,OAAL,GAAeA,OAAf;;AAEA,aAAKW,cAAL,GAAsB,gBAAMC,OAAN,CAAc;AAChCR,kBAAMJ,QAAQI,IADkB;AAEhCE,sBAAUN,QAAQM,QAFc;AAGhCC,oBAAQP,QAAQO,MAHgB;AAIhCM,sBAAUb,QAAQQ;AAJc,SAAd,CAAtB;;AAOA,aAAKM,gBAAL,GAAwB,gBAAMF,OAAN,CAAc;AAClCR,kBAAMJ,QAAQI,IADoB;AAElCE,sBAAUN,QAAQM,QAFgB;AAGlCC,oBAAQP,QAAQO,MAHkB;AAIlCM,sBAAUb,QAAQQ;AAJgB,SAAd,CAAxB;AAMH;;;;wCAEe;AACZ,mBAAO,KAAKG,cAAZ;AACH;;;yCAEgB;AACb,mBAAO,KAAKG,gBAAZ;AACH;;;0CAEiB;AAAA;;AACd,mBAAOC,uBAAuBC,IAAvB,CAA4B,UAACC,IAAD,EAAU;AACzC,uBAAOA,KAAKC,KAAL,CAAWf,qBAAqB,MAAKH,OAA1B,CAAX,CAAP;AACH,aAFM,EAEJgB,IAFI,CAEC,UAACG,MAAD,EAAY;AAChB,uBAAOA,OAAOC,SAAd;AACH,aAJM,CAAP;AAKH;;;+CAEsBC,G,EAAK;AAAA;;AACxB,mBAAO,KAAKC,cAAL,GAAsBN,IAAtB,CAA2B,UAACC,IAAD,EAAU;AACxC,uBAAO,uBAAkB;AACrBI,yBAAKA,GADgB;AAErBE,mCAAeN,IAFM;AAGrBO,4BAAQ,OAAKxB,OAAL,CAAawB;AAHA,iBAAlB,CAAP;AAKH,aANM,CAAP;AAOH;;;sCAEa;AACV,mBAAO,wBAAP;AACH;;;+CAEsBP,I,EAAM;AAAA;;AACzB,mBAAO,IAAIQ,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCV,qBAAKC,KAAL,iFACuB,OAAKlB,OAAL,CAAaC,SADpC,yCAEoB,OAAKD,OAAL,CAAaE,QAFjC,EAE6Cc,IAF7C,CAEkD,UAACG,MAAD,EAAY;AAC1D,wBAAIA,OAAOS,MAAP,KAAkB,CAAtB,EAAyB;AACrBF,gCAAQ,IAAR;AACH,qBAFD,MAEO;AACHA,gCAAQ,KAAR;AACH;AACJ,iBARD,EAQGG,KARH,CAQS,UAACC,GAAD,EAAS;AACdH,2BAAOG,GAAP;AACH,iBAVD;AAWH,aAZM,CAAP;AAaH;;;+CAEsB;AAAA;;AACnB,mBAAO,KAAKC,aAAL,GAAqBf,IAArB,CAA0B,UAACC,IAAD,EAAU;AACvC,uBAAKe,sBAAL,CAA4Bf,IAA5B,EAAkCD,IAAlC,CAAuC,UAACiB,MAAD,EAAY;AAC/C,wBAAIA,MAAJ,EAAY;AACR,+BAAOhB,IAAP;AACH,qBAFD,MAEO;AACH,+BAAOA,KAAKC,KAAL,CAAWnB,qBAAqB,OAAKC,OAA1B,CAAX,EAA+CgB,IAA/C,CAAoD,YAAM;AAC7D,mCAAOC,IAAP;AACH,yBAFM,CAAP;AAGH;AACJ,iBARD;AASH,aAVM,CAAP;AAWH","file":"MsSqlDriver.js","sourcesContent":["// SqlServerDriver.js\nimport mssql from \"mssql\";\nimport MsSqlDatabase from \"../mssql/Database\";\nimport MsSqlMigrator  from \"../mssql/Migrator\";\n\nlet generateEdmCreateSql = function(options) {\n    return `CREATE TABLE ${options.edmSchema}.${options.edmTable}(\n        [id] [int] IDENTITY(1,1) NOT NULL,\n        [json] [text] NOT NULL,\n        [name] [varchar](100) NOT NULL,\n        [version] [int],\n     CONSTRAINT [PK_edm.edm] PRIMARY KEY CLUSTERED \n    (\n        [id] ASC\n    )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]\n    ) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]`;\n}\n\nlet generateGetEdmsQuery = function(options) {\n    return `SELECT [id], [json], [name], [version] \n    FROM ${options.edmSchema}.${options.edmTable}`;\n}\n\nexport default class {\n\n    constructor(options = {}) {\n        if (!options.user) {\n            throw new Error(\"MsSqlDriver requires a user\");\n        }\n        if (!options.password) {\n            throw new Error(\"MsSqlDriver requires a password\");\n        }\n        if (!options.server) {\n            throw new Error(\"MsSqlDriver requires a server\");\n        }\n\n        options.edmDb = options.edmDb || \"GLASS_edm\";\n        options.edmSchema = options.edmSchema || \"dbo\";\n        options.edmTable = options.edmTable || \"edm\";\n        options.dataSchema = options.dataSchema || \"dbo\";\n        options.dataDb = options.dataDb || \"GLASS_data\";\n\n        this.options = options;\n\n        this._edmPoolPromse = mssql.connect({\n            user: options.user,\n            password: options.password,\n            server: options.server,\n            database: options.edmDb\n        });\n\n        this._dataPoolPromise = mssql.connect({\n            user: options.user,\n            password: options.password,\n            server: options.server,\n            database: options.edmDb\n        });\n    }\n\n    getEdmDbAsync() {\n        return this._edmPoolPromse;\n    }\n\n    getDataDbAsync() {\n        return this._dataPoolPromise;\n    }\n\n    getEdmListAsync() {\n        return _verifyEdmTableAsync().then((pool) => {\n            return pool.query(generateGetEdmsQuery(this.options));\n        }).then((result) => {\n            return result.recordset;\n        });\n    }\n\n    getDatabaseForEdmAsync(edm) {\n        return this.getDataDbAsync().then((pool) => {\n            return new MsSqlDatabase({\n                edm: edm,\n                mssqlDatabase: pool,\n                schema: this.options.schema\n            });\n        });\n    }\n\n    getMigrator() {\n        return new MsSqlMigrator();\n    }\n\n    _checkEdmDbExistsAsync(pool) {\n        return new Promise((resolve, reject) => {\n            pool.query(`SELECT * FROM INFORMATION_SCHEMA.TABLES \n            WHERE TABLE_SCHEMA = ${this.options.edmSchema} \n            AND  TABLE_NAME = ${this.options.edmTable}`).then((result) => {\n                if (result.length === 1) {\n                    resolve(true);\n                } else {\n                    resolve(false);\n                }\n            }).catch((err) => {\n                reject(err);\n            });\n        });\n    }\n\n    _verifyEdmTableAsync() {\n        return this.getEdmDbAsync().then((pool) => {\n            this._checkEdmDbExistsAsync(pool).then((exists) => {\n                if (exists) {\n                    return pool;\n                } else {\n                    return pool.query(generateEdmCreateSql(this.options)).then(() => {\n                        return pool;\n                    });\n                }\n            });\n        });\n    }\n}"]}