{"version":3,"sources":["../../src/dbDriver/MsSqlDriver.js"],"names":["generateEdmCreateSql","options","edmSchema","edmTable","generateGetEdmsQuery","user","Error","password","server","edmDb","dataSchema","dataDb","_edmPool","ConnectionPool","database","on","e","console","error","_edmPoolPromise","connect","_dataPool","_dataPoolPromise","then","_verifyEdmTableAsync","pool","request","query","result","recordset","name","version","_getEdmDbAsync","newEdm","JSON","stringify","edm","getDataDbAsync","connectionPool","schema","getEdmDbAsync","close","Promise","resolve","reject","q","length","catch","err","_checkEdmDbExistsAsync","exists"],"mappings":"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","file":"MsSqlDriver.js","sourcesContent":["// SqlServerDriver.js\nimport mssql from \"mssql\";\nimport MsSqlDatabase from \"../mssql/Database\";\nimport MsSqlMigrator  from \"../mssql/Migrator\";\nimport Edm from \"../edm/Edm\";\n\nlet generateEdmCreateSql = function(options) {\n    return `CREATE TABLE ${options.edmSchema}.${options.edmTable}(\n        [id] [int] IDENTITY(1,1) NOT NULL,\n        [json] [text] NOT NULL,\n        [name] [varchar](100) NOT NULL,\n        [version] [varchar](10),\n     CONSTRAINT [PK_edm.edm] PRIMARY KEY CLUSTERED \n    (\n        [id] ASC\n    )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]\n    ) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]`;\n}\n\nlet generateGetEdmsQuery = function(options) {\n    return `SELECT [id], [json], [name], [version] \n    FROM ${options.edmSchema}.${options.edmTable}`;\n}\n\nexport default class {\n\n    constructor(options = {}) {\n        if (!options.user) {\n            throw new Error(\"MsSqlDriver requires a user\");\n        }\n        if (!options.password) {\n            throw new Error(\"MsSqlDriver requires a password\");\n        }\n        if (!options.server) {\n            throw new Error(\"MsSqlDriver requires a server\");\n        }\n\n        options.edmDb = options.edmDb || \"GLASS_edm\";\n        options.edmSchema = options.edmSchema || \"dbo\";\n        options.edmTable = options.edmTable || \"edm\";\n        options.dataSchema = options.dataSchema || \"dbo\";\n        options.dataDb = options.dataDb || \"GLASS_data\";\n\n        this.options = options;\n\n        this._edmPool = new mssql.ConnectionPool({\n            user: options.user,\n            password: options.password,\n            server: options.server,\n            database: options.edmDb\n        });\n        this._edmPool.on(\"error\", (e) => {\n            console.error(e);\n        });\n        this._edmPoolPromise = this._edmPool.connect();\n\n        this._dataPool = new mssql.ConnectionPool({\n            user: options.user,\n            password: options.password,\n            server: options.server,\n            database: options.dataDb\n        });\n        this._dataPool.on(\"error\", (e) => {\n            console.error(e);\n        });\n        this._dataPoolPromise = this._dataPool.connect();\n\n    }\n\n    getEdmDbAsync() {\n        return this._edmPoolPromise.then(() => this._edmPool);\n    }\n\n    getDataDbAsync() {\n        return this._dataPoolPromise.then(() => this._dataPool);\n    }\n\n    getEdmListAsync() {\n        return this._verifyEdmTableAsync().then((pool) => {\n            return pool.request().query(generateGetEdmsQuery(this.options));\n        }).then((result) => {\n            return result.recordset;\n        });\n    }\n\n    getEdmAsync(name, version) {\n        return this._getEdmDbAsync().then((pool) => {\n            return pool.request().query(`SELECT * FROM [${this.options.edmSchema}].[${this.options.edmTable}] WHERE\n            [version]=${version} AND [name]='${name}'`).then((result) => {\n                return result.recordset[0];\n            });\n        });\n    };\n\n    addEdmAsync(name, version) {\n        var newEdm = new Edm();\n        return this._getEdmDbAsync().then((pool) => {\n            return pool.request().query(`INSERT INTO [${this.options.edmSchema}].[${this.options.edmTable}] \n            (name, version, json) VALUES ('${name}', '${version}', '${JSON.stringify(newEdm)}')`).then((result) => {\n                return;\n            });\n        });\n    };\n\n    deleteEdmAsync(name, version) {\n        return this._getEdmDbAsync().then((pool) => {\n            return pool.request().query(`DELETE FROM [${this.options.edmSchema}].[${this.options.edmTable}]\n            WHERE [version]=${version} AND [name]='${name}'`).then(() => {\n                return;\n            });\n        });\n    };\n\n    getDatabaseForEdmAsync(edm) {\n        return this.getDataDbAsync().then((pool) => {\n            return new MsSqlDatabase({\n                edm: edm,\n                connectionPool: pool,\n                schema: this.options.dataSchema\n            });\n        });\n    }\n\n    getMigrator() {\n        return new MsSqlMigrator(this._edmPoolPromise);\n    }\n\n    dispose() {\n        this.getEdmDbAsync().then((pool) => {\n            pool.close();\n        });\n        this.getDataDbAsync().then((pool) => {\n            pool.close();\n        });\n    }\n\n    _checkEdmDbExistsAsync(pool) {\n        return new Promise((resolve, reject) => {\n            let q = `SELECT * FROM INFORMATION_SCHEMA.TABLES \n            WHERE TABLE_SCHEMA = '${this.options.edmSchema}' \n            AND TABLE_NAME = '${this.options.edmTable}'`;\n            pool.request().query(q).then((result) => {\n                if (result.recordset.length === 1) {\n                    resolve(true);\n                } else {\n                    resolve(false);\n                }\n            }).catch((err) => {\n                reject(err);\n            });\n        });\n    }\n\n    _verifyEdmTableAsync() {\n        return this.getEdmDbAsync().then((pool) => {\n            return this._checkEdmDbExistsAsync(pool).then((exists) => {\n                if (exists) {\n                    return pool;\n                } else {\n                    let q = generateEdmCreateSql(this.options);\n                    return pool.request().query(q).then(() => {\n                        return pool;\n                    });\n                }\n            });\n        });\n    }\n}"]}