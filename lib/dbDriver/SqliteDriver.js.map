{"version":3,"sources":["../../src/dbDriver/SqliteDriver.js"],"names":["generateCreateSql","options","path","Error","edmDb","dataDb","_edmDbPromise","_dataDbPromise","_storageMode","_storageModes","open","resolve","console","warn","getEdmDbAsync","getDataDbAsync","edm","then","db","sqliteDatabase","_verifyEdmTableAsync","all","run"],"mappings":";;;;;;qjBAAA;;;AACA;;;;AACA;;;;AACA;;;;;;;;AAEAA,oBAAoB,6BAAU;AAC1B;AAKH,CAND;;;AAUI,sBAA0B;AAAA,YAAdC,OAAc,uEAAJ,EAAI;;AAAA;;AACtB,YAAI,OAAOA,QAAQC,IAAf,KAAwB,QAA5B,EAAsC;AAClC,kBAAM,IAAIC,KAAJ,CAAU,8CAAV,CAAN;AACH;;AAEDF,gBAAQG,KAAR,GAAgBH,QAAQG,KAAR,IAAiB,kBAAjC;AACAH,gBAAQI,MAAR,GAAiBJ,QAAQI,MAAR,IAAkB,cAAnC;;AAEA,aAAKC,aAAL,GAAqB,IAArB;AACA,aAAKC,cAAL,GAAsB,IAAtB;;AAEA,aAAKC,YAAL,GAAoB,MAApB;AACA,aAAKC,aAAL,GAAqB;AACjB,oBAAQ;AACJ,iCAAiB,yBAAU;AACvB,2BAAO,iBAAOC,IAAP,CAAY,eAAKC,OAAL,CAAaV,QAAQC,IAArB,EAA2BD,QAAQG,KAAnC,CAAZ,CAAP;AACH,iBAHG;AAIJ,kCAAkB,0BAAU;AACxB,2BAAO,iBAAOM,IAAP,CAAY,eAAKC,OAAL,CAAaV,QAAQC,IAArB,EAA2BD,QAAQI,MAAnC,CAAZ,CAAP;AACH;AANG,aADS;AASjB,sBAAU;AACN,iCAAiB,yBAAU;AACvB,2BAAO,iBAAOK,IAAP,CAAY,UAAZ,CAAP;AACH,iBAHK;AAIN,kCAAkB,0BAAU;AACxB,2BAAO,iBAAOA,IAAP,CAAY,UAAZ,CAAP;AACH;AANK;AATO,SAArB;;AAmBA,YAAIT,QAAQC,IAAR,KAAiB,UAArB,EAAiC;AAC7BU,oBAAQC,IAAR,CAAa,4DAAb;AACH;AAEJ;;;;wCAEe;AACZ,gBAAI,CAAC,KAAKP,aAAV,EAAyB;AACrB,qBAAKA,aAAL,GAAqB,KAAKG,aAAL,CAAmB,KAAKD,YAAxB,EAAsCM,aAAtC,EAArB;AACH;AACD,mBAAO,KAAKR,aAAZ;AACH;;;yCAEgB;AACb,gBAAI,CAAC,KAAKC,cAAV,EAA0B;AACtB,qBAAKA,cAAL,GAAsB,KAAKE,aAAL,CAAmB,KAAKD,YAAxB,EAAsCO,cAAtC,EAAtB;AACH;AACD,mBAAO,KAAKR,cAAZ;AACH;;;+CAEsBS,G,EAAI;AACvB,mBAAO,KAAKD,cAAL,GAAsBE,IAAtB,CAA2B,UAACC,EAAD,EAAQ;AACtC,uBAAO,uBAAmB;AACtBF,yBAAKA,GADiB;AAEtBG,oCAAgBD;AAFM,iBAAnB,CAAP;AAIH,aALM,CAAP;AAMH;;;0CAEiB;AACd,mBAAOE,uBAAuBH,IAAvB,CAA4B,UAACC,EAAD,EAAQ;AACvC,uBAAOA,GAAGG,GAAH,qBAAP;AACH,aAFM,CAAP;AAGH;;;+CAEsB;AACnB,mBAAO,KAAKP,aAAL,GAAqBG,IAArB,CAA0B,UAACC,EAAD,EAAQ;AACrC,uBAAOA,GAAGI,GAAH,CAAOtB,mBAAP,EAA4BiB,IAA5B,CAAiC,YAAM;AAC1C,2BAAOC,EAAP;AACH,iBAFM,CAAP;AAGH,aAJM,CAAP;AAKH","file":"SqliteDriver.js","sourcesContent":["// SqliteDriver.js\nimport sqlite from \"sqlite\";\nimport path from \"path\";\nimport SqliteDatabase from \"../sqlite/Database\";\n\ngenerateCreateSql = function(){\n    return `CREATE TABLE IF NOT EXISTS edm \n    (\"id\" INT PRIMARY KEY AUTOINCREMENT,\n     \"json\" TEXT,\n     \"name\" TEXT,\n     \"version\" INT)`\n};\n\nexport default class {\n\n    constructor(options = {}) {\n        if (typeof options.path !== \"string\") {\n            throw new Error(\"SqliteDriver needs a path to the data folder\");\n        }\n\n        options.edmDb = options.edmDb || \"glassEDM.sqlite3\";\n        options.dataDb = options.dataDb || \"data.sqlite3\";\n\n        this._edmDbPromise = null;\n        this._dataDbPromise = null;\n\n        this._storageMode = \"file\";\n        this._storageModes = {\n            \"file\": {\n                \"getEdmDbAsync\": function(){\n                    return sqlite.open(path.resolve(options.path, options.edmDb));\n                },\n                \"getDataDbAsync\": function(){\n                    return sqlite.open(path.resolve(options.path, options.dataDb));\n                }\n            },\n            \"memory\": {\n                \"getEdmDbAsync\": function(){\n                    return sqlite.open(\":memory:\");\n                },\n                \"getDataDbAsync\": function(){\n                    return sqlite.open(\":memory:\");\n                }\n            }\n        };\n\n        if (options.path === \":memory:\") {\n            console.warn(\"SQLite using an in-memory databases, data will not persist\");\n        }\n\n    }\n\n    getEdmDbAsync() {\n        if (!this._edmDbPromise) {\n            this._edmDbPromise = this._storageModes[this._storageMode].getEdmDbAsync();\n        }\n        return this._edmDbPromise;\n    }\n\n    getDataDbAsync() {\n        if (!this._dataDbPromise) {\n            this._dataDbPromise = this._storageModes[this._storageMode].getDataDbAsync();\n        }\n        return this._dataDbPromise;\n    }\n\n    getDatabaseForEdmAsync(edm){\n        return this.getDataDbAsync().then((db) => {\n            return new SqliteDatabase({\n                edm: edm,\n                sqliteDatabase: db\n            });\n        });\n    }\n\n    getEdmListAsync() {\n        return _verifyEdmTableAsync().then((db) => {\n            return db.all(`SELECT * FROM edm`);\n        });\n    }\n\n    _verifyEdmTableAsync() {\n        return this.getEdmDbAsync().then((db) => {\n            return db.run(generateCreateSql()).then(() => {\n                return db;\n            });\n        });\n    }\n\n}"]}