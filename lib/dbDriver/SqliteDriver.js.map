{"version":3,"sources":["../../src/dbDriver/SqliteDriver.js"],"names":["generateCreateSql","options","storageMode","path","Error","edmDb","dataDb","_edmDbPromise","_dataDbPromise","_storageMode","_storageModes","getEdmDbAsync","open","resolve","getDataDbAsync","console","warn","name","version","edm","then","db","sqliteDatabase","_verifyEdmTableAsync","all","close","run"],"mappings":"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","file":"SqliteDriver.js","sourcesContent":["// SqliteDriver.js\nimport sqlite from \"sqlite\";\nimport path from \"path\";\nimport SqliteDatabase from \"../sqlite/Database\";\n\nlet generateCreateSql = function(){\n    return `CREATE TABLE IF NOT EXISTS edm \n    (\"id\" INTEGER PRIMARY KEY AUTOINCREMENT,\n     \"json\" TEXT,\n     \"name\" TEXT,\n     \"version\" INTEGER)`\n};\n\n/*\n{\n    storageMode: [\"file\" || \"memory\"]\n    path: \"path/to/data/dir/if/file\",\n    edmDb: \"filenameIfFileMode.sqlite\",\n    dataDb: \"filenameIfFileMode.sqlite\"\n}\n*/\n\nexport default class {\n\n    constructor(options = {}) {\n\n        if (options.storageMode === \"file\" && typeof options.path !== \"string\") {\n            throw new Error(\"SqliteDriver needs a path to the data folder\");\n        }\n\n        options.edmDb = options.edmDb || \"glassEDM.sqlite3\";\n        options.dataDb = options.dataDb || \"data.sqlite3\";\n        options.storageMode = options.storageMode || \"memory\";\n\n        this._edmDbPromise = null;\n        this._dataDbPromise = null;\n\n        this._storageMode = options.storageMode;\n        this._storageModes = {\n            \"file\": {\n                getEdmDbAsync:() => {\n                    return sqlite.open(path.resolve(options.path, options.edmDb));\n                },\n                getDataDbAsync:() => {\n                    return sqlite.open(path.resolve(options.path, options.dataDb));\n                }\n            },\n            \"memory\": {\n                \"getEdmDbAsync\"(){\n                    return sqlite.open(\":memory:\");\n                },\n                \"getDataDbAsync\"(){\n                    return sqlite.open(\":memory:\");\n                }\n            }\n        };\n\n        if (options.path === \":memory:\") {\n            console.warn(\"SQLite using an in-memory databases, data will not persist\");\n        }\n\n    }\n\n    getEdmDbAsync() {\n        if (!this._edmDbPromise) {\n            this._edmDbPromise = this._storageModes[this._storageMode].getEdmDbAsync();\n        }\n        return this._edmDbPromise;\n    }\n\n    getDataDbAsync() {\n        if (!this._dataDbPromise) {\n            this._dataDbPromise = this._storageModes[this._storageMode].getDataDbAsync();\n        }\n        return this._dataDbPromise;\n    }\n\n    getEdmAsync(name, version) {};\n\n    addEdmAsync(name, version) {};\n\n    deleteEdmAsync(name, version) {};\n\n    getDatabaseForEdmAsync(edm){\n        return this.getDataDbAsync().then((db) => {\n            return new SqliteDatabase({\n                edm: edm,\n                sqliteDatabase: db\n            });\n        });\n    }\n\n    getEdmListAsync() {\n        return this._verifyEdmTableAsync().then((db) => {\n            return db.all(`SELECT * FROM edm`);\n        });\n    }\n\n    dispose() {\n        this.getEdmDbAsync().then((db) => {\n            db.close();\n        });\n        this.getDataDbAsync().then((db) => {\n            db.close();\n        });\n    }\n\n    _verifyEdmTableAsync() {\n        return this.getEdmDbAsync().then((db) => {\n            return db.run(generateCreateSql()).then(() => {\n                return db;\n            });\n        });\n    }\n\n}"]}