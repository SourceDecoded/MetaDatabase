{"version":3,"sources":["../src/MetaDatabase.js"],"names":["MetaDatabase","decorators","sqlite","databasePath","edm","fileSystem","Array","isArray","Error","name","version","tables","readyPromise","_initializeAsync","path","open","then","sqliteDatabase","database","decoratedEdm","JSON","parse","stringify","isInitialized","Promise","resolve","_invokeOnDecoratorsAsync","_initializeEdmAsync","databasePromise","_createDatabaseAsync","newDatabase","createAsync","reduce","promise","decorator","getTables","forEach","table","methodName","args","value","apply","Object","keys","map"],"mappings":"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","file":"MetaDatabase.js","sourcesContent":["import Database from \"./sqlite/Database\";\nimport MetaTable from \"./MetaTable\";\nimport path from \"path\";\nimport fileSystem from \"fs\";\n\nexport default class MetaDatabase {\n\n    constructor({\n        decorators = [],\n        sqlite = null,\n        databasePath = null,\n        edm = null,\n        fileSystem = null\n         } = {}) {\n        if (!Array.isArray(decorators)) {\n            throw new Error(\"Invalid Argument: decorators needs to be an array.\");\n        }\n\n        if (sqlite == null) {\n            throw new Error(\"Null Argument Exception: MetaDatabase needs to have a sqlite.\");\n        }\n\n        if (databasePath == null) {\n            throw new Error(\"Null Argument Exception: MetaDatabase needs to have a databasePath.\");\n        }\n\n        if (edm == null) {\n            throw new Error(\"Null Argument Exception: MetaDatabase needs to have a edm.\");\n        }\n\n        if (fileSystem == null) {\n            throw new Error(\"Null Argument Exception: MetaDatabase needs to have a fileSystem.\");\n        }\n\n        this.decorators = decorators;\n        this.databasePath = databasePath;\n        this.sqlite = sqlite;\n        this.edm = edm;\n        this.name = this.edm.name;\n        this.version = this.edm.version;\n        this.fileSystem = fileSystem;\n        this.tables = {};\n        this.readyPromise = null;\n\n        this._initializeAsync();\n    }\n\n    _createDatabaseAsync(edm) {\n        let path = this.databasePath;\n\n        return this.sqlite.open(path).then((sqliteDatabase) => {\n            var database = new Database({\n                edm: edm,\n                sqliteDatabase: sqliteDatabase\n            });\n\n            return database;\n        });\n    }\n\n    _initializeEdmAsync(edm) {\n        let decoratedEdm = JSON.parse(JSON.stringify(edm));\n\n        if (edm.isInitialized) {\n            this.edm = this.decoratedEdm;\n            return Promise.resolve(decoratedEdm);\n        } else {\n            return this._invokeOnDecoratorsAsync(\"prepareEdmAsync\", [decoratedEdm]).then(() => decoratedEdm);\n        }\n    }\n\n    _initializeAsync() {\n        if (this.readyPromise == null) {\n            let database = null;\n\n            return this.readyPromise = this._initializeEdmAsync(this.edm).then((edm) => {\n                this.edm = edm;\n                let databasePromise = this._createDatabaseAsync(edm);\n\n                if (!edm.isInitialized) {\n                    databasePromise = databasePromise.then((newDatabase) => {\n                        database = newDatabase;\n                        return newDatabase.createAsync();\n                    }).then(() => {\n                        this.edm.isInitialized = true;\n                    })\n                }\n\n                return databasePromise;\n            }).then(() => {\n\n                return this.decorators.reduce((promise, decorator) => {\n                    return promise.then(() => {\n                        return this._invokeOnDecoratorsAsync(\"activatedAsync\", [this]);\n                    })\n                }, Promise.resolve());\n                \n            }).then(() => {\n\n                database.getTables().forEach((table) => {\n                    this.tables[table.name] = new MetaTable({\n                        table: table,\n                        decorators: this.decorators,\n                        fileSystem: this.fileSystem\n                    });\n                });\n\n            });\n        }\n\n        return this.readyPromise;\n    }\n\n    _invokeOnDecoratorsAsync(methodName, args) {\n        return this.decorators.reduce((promise, decorator) => {\n            return promise.then(() => {\n                if (typeof decorator[methodName] === \"function\") {\n                    let value = decorator[methodName].apply(decorator, args);\n                    if (!(value instanceof Promise)) {\n                        return Promise.resolve(value);\n                    }\n                    return value;\n                }\n            });\n\n        }, Promise.resolve());\n    }\n\n    getTableAsync(name) {\n        return this.readyPromise.then(() => {\n            return this.tables[name] || null;\n        });\n    }\n\n    getTablesAsync() {\n        return this.readyPromise.then(() => {\n            return Object.keys(this.tables).map((name) => {\n                return this.tables[name];\n            });\n        });\n    }\n\n    initializeAsync() {\n        return this.readyPromise;\n    }\n\n}"]}