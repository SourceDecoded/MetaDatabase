{"version":3,"sources":["../src/MetaDatabase.js"],"names":["MetaDatabase","decorators","sqlite","databasePath","edm","Array","isArray","Error","name","version","tables","readyPromise","_initializeAsync","path","open","then","sqliteDatabase","database","decoratedEdm","JSON","parse","stringify","isInitialized","Promise","resolve","_invokeOnDecoratorsAsync","_initializeEdmAsync","databasePromise","_createDatabaseAsync","newDatabase","createAsync","getTables","forEach","table","methodName","args","reduce","promise","decorator","value","apply","Object","keys","map"],"mappings":"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","file":"MetaDatabase.js","sourcesContent":["import Database from \"./sqlite/Database\";\nimport MetaTable from \"./MetaTable\";\nimport path from \"path\";\nimport fileSystem from \"fs\";\n\nexport default class MetaDatabase {\n\n    constructor({ decorators = [], sqlite = null, databasePath = null, edm = null } = {}) {\n        if (!Array.isArray(decorators)) {\n            throw new Error(\"Invalid Argument: decorators needs to be an array.\");\n        }\n\n        if (sqlite == null) {\n            throw new Error(\"Null Argument Exception: MetaDatabase needs to have a sqlite.\");\n        }\n\n        if (databasePath == null) {\n            throw new Error(\"Null Argument Exception: MetaDatabase needs to have a databasePath.\");\n        }\n\n        if (edm == null) {\n            throw new Error(\"Null Argument Exception: MetaDatabase needs to have a edm.\");\n        }\n\n        this.decorators = decorators;\n        this.databasePath = databasePath;\n        this.sqlite = sqlite;\n        this.edm = edm;\n        this.name = this.edm.name;\n        this.version = this.edm.version;\n        this.tables = {};\n        this.readyPromise = null;\n\n        this._initializeAsync();\n    }\n\n    _createDatabaseAsync(edm) {\n        let path = this.databasePath;\n\n        return this.sqlite.open(path).then((sqliteDatabase) => {\n            var database = new Database({\n                edm: edm,\n                sqliteDatabase: sqliteDatabase\n            });\n\n            return database;\n        });\n    }\n\n    _initializeEdmAsync(edm) {\n        let decoratedEdm = JSON.parse(JSON.stringify(edm));\n\n        if (edm.isInitialized) {\n            this.edm = this.decoratedEdm;\n            return Promise.resolve(decoratedEdm);\n        } else {\n            return this._invokeOnDecoratorsAsync(\"prepareEdmAsync\", [decoratedEdm]).then(() => decoratedEdm);\n        }\n    }\n\n    _initializeAsync() {\n        if (this.readyPromise == null) {\n            let database = null;\n\n            return this.readyPromise = this._initializeEdmAsync(this.edm).then((edm) => {\n                this.edm = edm;\n                let databasePromise = this._createDatabaseAsync(edm);\n\n                if (!edm.isInitialized) {\n                    databasePromise = databasePromise.then((newDatabase) => {\n                        database = newDatabase;\n                        return newDatabase.createAsync();\n                    }).then(() => {\n                        this.edm.isInitialized = true;\n                    })\n                }\n\n                return databasePromise;\n            }).then(() => {\n\n                database.getTables().forEach((table) => {\n                    this.tables[table.name] = new MetaTable({\n                        table: table,\n                        decorators: this.decorators\n                    });\n                });\n\n            });\n        }\n\n        return this.readyPromise;\n    }\n\n    _invokeOnDecoratorsAsync(methodName, args) {\n        return this.decorators.reduce((promise, decorator) => {\n            return promise.then(() => {\n                if (typeof decorator[methodName] === \"function\") {\n                    let value = decorator[methodName].apply(decorator, args);\n                    if (!(value instanceof Promise)) {\n                        return Promise.resolve(value);\n                    }\n                    return value;\n                }\n            });\n\n        }, Promise.resolve());\n    }\n\n    getTableAsync(name) {\n        return this.readyPromise.then(() => {\n            return this.tables[name] || null;\n        })\n    }\n\n    getTablesAsync() {\n        return this.readyPromise.then(() => {\n            return Object.keys(this.tables).map((name) => {\n                return this.tables[name];\n            });\n        });\n    }\n\n    initializeAsync() {\n        return this.readyPromise;\n    }\n\n}"]}