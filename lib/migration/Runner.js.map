{"version":3,"sources":["../../src/migration/Runner.js"],"names":["defaultOptions","edm","history","migrator","decorators","Runner","options","Object","assign","edmValidator","edmMigrator","_executeCommandAsync","bind","_revertCommandAsync","_validateOptions","promise","command","index","actionName","execute","action","migratorCommand","consequentialCommands","then","_validateCommand","Error","name","reduce","decorator","_invokeMethodAsyncWithRecovery","Array","isArray","length","migrateAsync","Promise","resolve","apply","commands","catch","error","executionError","message","stack","obj","methodName","args","result","revert","id","validate","_validateEdm","_validateMigrator","reverseCommands","slice","reverse","modifiedError"],"mappings":"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","file":"Runner.js","sourcesContent":["import Validator from \"./../edm/Validator\";\nimport Migrator from \"./../edm/Migrator\";\n\nconst defaultOptions = {\n    edm: null,\n    history: [],\n    migrator: null,\n    decorators: []\n};\n\nexport default class Runner {\n    constructor(options) {\n        options = Object.assign({}, defaultOptions, options);\n\n        this.edm = options.edm;\n        this.migrator = options.migrator;\n        this.edmValidator = new Validator();\n        this.edmMigrator = new Migrator();\n        this.decorators = options.decorators;\n\n        this._executeCommandAsync = this._executeCommandAsync.bind(this);\n        this._revertCommandAsync = this._revertCommandAsync.bind(this);\n\n        this._validateOptions(options);\n\n    }\n\n    _executeCommandAsync(promise, command, index) {\n        let actionName = `${command.execute.action}Async`;\n        let options = command.execute.options;\n        let edm = this.edm;\n        let migratorCommand = this.migrator[actionName];\n        var consequentialCommands;\n\n        return promise.then(() => {\n\n            this._validateCommand(command);\n\n            if (typeof migratorCommand !== \"function\") {\n                throw new Error(`'${this.migrator.name}' migrator doesn't support this command. ${actionName}`);\n            }\n\n            return this.decorators.reduce((promise, decorator) => {\n\n                return promise.then(() => {\n                    return this._invokeMethodAsyncWithRecovery(decorator, actionName, [edm, options])\n                }).then((consequentialCommands) => {\n\n                    if (Array.isArray(consequentialCommands) && consequentialCommands.length > 0) {\n                        return this.migrateAsync(consequentialCommands);\n                    }\n\n                });\n\n            }, Promise.resolve());\n\n        }).then(() => {\n            return migratorCommand.apply(this.migrator, [edm, options]);\n        }).then((commands) => {\n            consequentialCommands = commands;\n            return this.edmMigrator[actionName](edm, options);\n        }).then(() => {\n            if (Array.isArray(consequentialCommands) && consequentialCommands.length > 0) {\n                return this.migrateAsync(consequentialCommands);\n            }\n        }).catch((error) => {\n            let executionError = new Error(error.message);\n            executionError.stack = error.stack;\n            executionError.index = index;\n\n            throw executionError;\n        });\n    }\n\n    _invokeMethodAsyncWithRecovery(obj, methodName, args) {\n        if (obj && typeof obj[methodName] === \"function\") {\n            let result;\n\n            try {\n                result = obj[methodName].apply(obj, args);\n            } catch (error) {\n                result = null;\n            }\n\n            if (!(result instanceof Promise)) {\n                result = Promise.resolve(result);\n            }\n\n            return result.catch((error) => {\n                return null;\n            });\n        }\n\n        return Promise.resolve();\n    }\n\n    _revertCommandAsync(promise, command) {\n        let edm = this.edm;\n        let actionName = `${command.revert.action}Async`;\n        let migratorCommand = this.migrator[actionName];\n\n        return promise.then(() => {\n            if (typeof migratorCommand !== \"function\") {\n                throw new Error(`Migrator doesn't support this command. ${actionName}`);\n            }\n\n            return migratorCommand.apply(this.migrator, [edm, command.revert.options]);\n        }).then(() => {\n            return this.edmMigrator[actionName](edm, command.revert.options);\n        });\n    }\n\n    _validateCommand(command) {\n        if (typeof command.id !== \"string\") {\n            throw new Error(\"Commands require an id.\");\n        }\n\n        if (command.execute == null) {\n            throw new Error(\"Commands require an execute object.\");\n        }\n\n        if (typeof command.execute.action !== \"string\") {\n            throw new Error(\"Commands require an execute object with an command property of type string.\");\n        }\n\n        if (command.revert == null) {\n            throw new Error(\"Commands require an revert object.\");\n        }\n\n        if (typeof command.revert.action !== \"string\") {\n            throw new Error(\"Commands require an revert object with an command property of type string.\");\n        }\n    }\n\n    _validateEdm(edm) {\n        this.edmValidator.validate(edm);\n    }\n\n    _validateOptions(options) {\n        this._validateEdm(options.edm);\n        this._validateMigrator(options.migrator);\n    }\n\n    _validateMigrator(migrator) {\n        if (typeof migrator.name !== \"string\") {\n            throw new Error(\"Illegal Argument: Migrators need a name property.\");\n        }\n    }\n\n    migrateAsync(commands) {\n        return commands.reduce(this._executeCommandAsync, Promise.resolve()).catch((error) => {\n            let index = error.index;\n\n            let reverseCommands = commands.slice(0, index).reverse();\n\n            return reverseCommands.reduce(this._revertCommandAsync, Promise.resolve()).catch((error) => {\n                let modifiedError = Error(\"Failed to revert commands on a failed migration. Current edm state is corrupted.\");\n                modifiedError.stack = error.stack;\n\n                throw modifiedError;\n            }).then(() => {\n                let modifiedError = new Error(\"Failed Migration. Successfully reverted commands.\");\n                modifiedError.stack = error.stack;\n\n                throw modifiedError;\n            });\n\n        });\n    }\n}"]}