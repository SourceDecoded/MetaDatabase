{"version":3,"sources":["../../src/migration/Runner.js"],"names":["defaultOptions","edm","history","migrator","Runner","options","Object","assign","_validateOptions","edmValidator","_executeCommandAsync","bind","_revertCommandAsync","_recoverMigrationAsync","promise","command","index","then","_validateCommand","commandName","execute","migratorCommand","Error","name","apply","consequentialCommands","Array","isArray","length","migrateAsync","catch","error","executionError","message","stack","commands","reverseCommands","slice","reverse","reduce","Promise","resolve","modifiedError","revert","id","validate","forEach","_validateEdm","_validateHistory","_validateMigrator"],"mappings":"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","file":"Runner.js","sourcesContent":["import Validator from \"./../edm/Validator\";\n\nconst defaultOptions = {\n    edm: null,\n    history: [],\n    migrator: null\n};\n\nexport default class Runner {\n    constructor(options) {\n        Object.assign({}, defaultOptions, options);\n\n        this._validateOptions(options);\n\n        this.edm = options.edm;\n        this.migrator = options.migrator;\n        this.edmValidator = new Validator();\n\n        this._executeCommandAsync = this._executeCommandAsync.bind(this);\n        this._revertCommandAsync = this._revertCommandAsync.bind(this);\n        this._recoverMigrationAsync = this._recoverMigrationAsync.bind(this);\n    }\n\n    _executeCommandAsync(promise, command, index) {\n        return promise.then(() => {\n            this._validateCommand(command);\n\n            let commandName = command.execute.action;\n            let migratorCommand = this.migrator[commandName + \"Async\"];\n\n            if (typeof migratorCommand !== \"function\") {\n                throw new Error(`'${this.migrator.name}' migrator doesn't support this command. ${commandName}`);\n            }\n\n            return migratorCommand.apply(this.migrator, [edm, command.execute.options]);\n\n\n        }).then((consequentialCommands) => {\n            if (Array.isArray(consequentialCommands) && consequentialCommands.length > 0) {\n                return this.migrateAsync(consequentialCommands);\n            }\n        }).catch((error) => {\n            let executionError = new Error(error.message);\n            executionError.stack = error.stack;\n            executionError.index = index;\n\n            throw executionError;\n        });\n    }\n\n    _recoverMigrationAsync(error) {\n        let index = commands.length - error.index;\n\n        let reverseCommands = commands.slice().reverse();\n\n        return reverseCommands.reduce(this._revertCommandAsync, Promise.resolve()).catch((error) => {\n            let modifiedError = Error(\"Failed to revert commands on a failed migration.\");\n            modifiedError.stack = error.stack;\n\n            throw modifiedError;\n        }).then(() => {\n            let modifiedError = new Error(\"Failed Migration. Successfully reverted commands.\");\n            modifiedError.stack = error.stack;\n\n            throw modifiedError;\n        });\n\n    }\n\n    _revertCommandAsync(promise, command) {\n        return promise.then(() => {\n            let commandName = command.revert.action;\n            let migratorCommand = this.migrator[commandName + \"Async\"];\n\n            if (typeof migratorCommand !== \"function\") {\n                throw new Error(`Migrator doesn't support this command. ${commandName}`);\n            }\n\n            return migratorCommand.apply(this.migrator, [edm, command.revert.options]);\n        });\n    }\n\n    _validateCommand(command) {\n        if (typeof command.id !== \"string\") {\n            throw new Error(\"Commands require an id.\");\n        }\n\n        if (command.execute == null) {\n            throw new Error(\"Commands require an execute object.\");\n        }\n\n        if (typeof commands.execute.action !== \"string\") {\n            throw new Error(\"Commands require an execute object with an command property of type string.\");\n        }\n\n        if (command.revert == null) {\n            throw new Error(\"Commands require an revert object.\");\n        }\n\n        if (typeof commands.revert.action !== \"string\") {\n            throw new Error(\"Commands require an revert object with an command property of type string.\");\n        }\n    }\n\n    _validateEdm(edm) {\n        this.edmValidator.validate(edm);\n    }\n\n    _validateHistory(history) {\n        history.forEach((command) => {\n            this._validateCommand(command);\n        });\n    }\n\n    _validateOptions(options) {\n        this._validateEdm(options.edm);\n        this._validateHistory(options.history);\n        this._validateMigrator(options.migrator);\n    }\n\n    _validateMigrator(migrator) {\n        if (typeof migrator.name !== \"string\") {\n            throw new Error(\"Illegal Argument: Migrators need a name property.\");\n        }\n    }\n\n    /*\n        All commands return an array of other commands.\n    */\n    migrateAsync(commands) {\n        return commands.reduce(this._executeCommandAsync, Promise.resolve()).catch(this._recoverMigrationAsync);\n    }\n}"]}