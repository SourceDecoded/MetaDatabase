{"version":3,"sources":["../../src/migration/Runner.js"],"names":["defaultOptions","edm","history","migrator","Runner","options","Object","assign","_validateOptions","edmValidator","_executeActionAsync","bind","_revertActionAsync","_recoverMigrationAsync","promise","action","index","then","_validateAction","actionName","execute","migratorAction","Error","name","apply","consequentialActions","Array","isArray","length","migrateAsync","catch","error","executionError","message","stack","actions","reverseActions","slice","reverse","reduce","Promise","resolve","modifiedError","revert","id","validate","forEach","_validateEdm","_validateHistory","_validateMigrator"],"mappings":"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","file":"Runner.js","sourcesContent":["import Validator from \"./../edm/Validator\";\n\nconst defaultOptions = {\n    edm: null,\n    history: [],\n    migrator: null\n};\n\nexport default class Runner {\n    constructor(options) {\n        Object.assign({}, defaultOptions, options);\n\n        this._validateOptions(options);\n\n        this.edm = options.edm;\n        this.migrator = options.migrator;\n        this.edmValidator = new Validator();\n\n        this._executeActionAsync = this._executeActionAsync.bind(this);\n        this._revertActionAsync = this._revertActionAsync.bind(this);\n        this._recoverMigrationAsync = this._recoverMigrationAsync.bind(this);\n    }\n\n    _executeActionAsync(promise, action, index) {\n        return promise.then(() => {\n            this._validateAction(action);\n\n            let actionName = action.execute.action;\n            let migratorAction = this.migrator[actionName];\n\n            if (typeof migratorAction !== \"function\") {\n                throw new Error(`'${this.migrator.name}' migrator doesn't support this action. ${actionName}`);\n            }\n\n            return migratorAction.apply(this.migrator, [edm, action.execute.options]);\n\n\n        }).then((consequentialActions) => {\n            if (Array.isArray(consequentialActions) && consequentialActions.length > 0) {\n                return this.migrateAsync(consequentialActions);\n            }\n        }).catch((error) => {\n            let executionError = new Error(error.message);\n            executionError.stack = error.stack;\n            executionError.index = index;\n\n            throw executionError;\n        });\n    }\n\n    _recoverMigrationAsync(error) {\n        let index = actions.length - error.index;\n\n        let reverseActions = actions.slice().reverse();\n\n        return reverseActions.reduce(this._revertActionAsync, Promise.resolve()).catch((error) => {\n            let modifiedError = Error(\"Failed to revert actions on a failed migration.\");\n            modifiedError.stack = error.stack;\n\n            throw modifiedError;\n        }).then(() => {\n            let modifiedError = new Error(\"Failed Migration. Successfully reverted actions.\");\n            modifiedError.stack = error.stack;\n\n            throw modifiedError;\n        });\n\n    }\n\n    _revertActionAsync(promise, action) {\n        return promise.then(() => {\n            let actionName = action.revert.action;\n            let migratorAction = this.migrator[actionName];\n\n            if (typeof migratorAction !== \"function\") {\n                throw new Error(`Migrator doesn't support this action. ${actionName}`);\n            }\n\n            return migratorAction.apply(this.migrator, [edm, action.revert.options]);\n        });\n    }\n\n    _validateAction(action) {\n        if (typeof action.id !== \"string\") {\n            throw new Error(\"Actions require an id.\");\n        }\n\n        if (action.execute == null) {\n            throw new Error(\"Actions require an execute object.\");\n        }\n\n        if (typeof actions.execute.action !== \"string\") {\n            throw new Error(\"Actions require an execute object with an action property of type string.\");\n        }\n\n        if (action.revert == null) {\n            throw new Error(\"Actions require an revert object.\");\n        }\n\n        if (typeof actions.revert.action !== \"string\") {\n            throw new Error(\"Actions require an revert object with an action property of type string.\");\n        }\n    }\n\n    _validateEdm(edm) {\n        this.edmValidator.validate(edm);\n    }\n\n    _validateHistory(history) {\n        history.forEach((action) => {\n            this._validateAction(action);\n        });\n    }\n\n    _validateOptions(options) {\n        this._validateEdm(options.edm);\n        this._validateHistory(options.history);\n        this._validateMigrator(options.migrator);\n    }\n\n    _validateMigrator(migrator) {\n        if (typeof migrator.name !== \"string\") {\n            throw new Error(\"Illegal Argument: Migrators need a name property.\");\n        }\n    }\n\n    /*\n        All actions return an array of other actions.\n    */\n    migrateAsync(actions) {\n        return actions.reduce(this._executeActionAsync, Promise.resolve()).catch(this._recoverMigrationAsync);\n    }\n}"]}