{"version":3,"sources":["../../src/migration/CommandBuilder.js"],"names":["CommandBuilder","edmValidator","tableName","column","validateColumn","command","options","execute","action","revert","decorator","validateDecorator","relationship","validateOneToOneRelationship","validateOneToManyRelationship","table","validateTableDescriptors","name","Error","oldColumn","newColumn","oldDecorator","newDecorator","oldOneToOneRelationship","newOneToOneRelationship","oldOneToManyRelationship","newOneToManyRelationship","oldTable","newTable","edm","commands","tables","reduce","accumulator","tableTemplate","Object","assign","columns","push","createAddTableCommand","forEach","createAddColumnCommand","relationships","oneToOne","createAddOneToOneRelationshipCommand","oneToMany","createAddOneToManyRelationshipCommand"],"mappings":"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","file":"CommandBuilder.js","sourcesContent":["import Command from \"./../migration/Command\";\nimport Validator from \"./../edm/Validator\";\n\nexport default class CommandBuilder {\n    constructor() {\n        this.edmValidator = new Validator();\n    }\n\n    createAddColumnCommand(tableName, column) {\n        this.edmValidator.validateColumn(column);\n\n        let command = new Command();\n        let options = {\n            tableName: tableName,\n            column: column\n        };;\n\n        command.execute.action = \"addColumn\";\n        command.execute.options = options;\n\n        command.revert.action = \"removeColumn\";\n        command.revert.options = options;\n\n        return command;\n    }\n\n    createAddDecoratorCommand(tableName, decorator) {\n        this.edmValidator.validateDecorator(decorator);\n\n        let command = new Command();\n        let options = {\n            tableName: tableName,\n            decorator: decorator\n        };\n\n        command.execute.action = \"addDecorator\";\n        command.execute.options = options;\n\n        command.revert.action = \"removeDecorator\";\n        command.revert.options = options;\n\n        return command;\n    }\n\n    createAddOneToOneRelationshipCommand(relationship) {\n        this.edmValidator.validateOneToOneRelationship(relationship);\n\n        let command = new Command();\n        let options = {\n            relationship: relationship\n        };\n\n        command.execute.action = \"addOneToOneRelationship\";\n        command.execute.options = options;\n\n        command.revert.action = \"removeOneToOneRelationship\";\n        command.revert.options = options;\n\n        return command;\n    }\n\n    createAddOneToManyRelationshipCommand(relationship) {\n        this.edmValidator.validateOneToManyRelationship(relationship);\n\n        let command = new Command();\n        let options = {\n            relationship: relationship\n        };\n\n        command.execute.action = \"addOneToManyRelationship\";\n        command.execute.options = options;\n\n        command.revert.action = \"removeOneToManyRelationship\";\n        command.revert.options = options;\n\n        return command;\n    }\n\n    createAddTableCommand(table) {\n        this.edmValidator.validateTableDescriptors(table);\n\n        let command = new Command();\n        let options = table;\n\n        command.execute.action = \"addTable\";\n        command.execute.options = options;\n\n        command.revert.action = \"removeTable\";\n        command.revert.options = options;\n\n        return command;\n    }\n\n    createRemoveColumnCommand(tableName, column) {\n        this.edmValidator.validateColumn(column);\n\n        let command = new Command();\n        let options = {\n            tableName: tableName,\n            column: column\n        };\n\n        command.execute.action = \"removeColumn\";\n        command.execute.options = options\n\n        command.revert.action = \"addColumn\";\n        command.revert.options = options;\n\n        return command;\n    }\n\n    createRemoveDecoratorCommand(tableName, decorator) {\n        this.edmValidator.validateDecorator(decorator);\n\n        let command = new Command();\n        let options = {\n            tableName: tableName,\n            decorator: decorator\n        };\n\n        if (typeof options.name != \"string\") {\n            throw new Error(\"Decorators need to have a name.\");\n        }\n\n        command.execute.action = \"removeDecorator\";\n        command.execute.options = options;\n\n        command.revert.action = \"addDecorator\";\n        command.revert.options = options;\n\n        return command;\n    }\n\n    createRemoveOneToOneRelationshipCommand(relationship) {\n        this.edmValidator.validateOneToOneRelationship(relationship);\n\n        let command = new Command();\n        let options = {\n            relationship: relationship\n        };\n\n        command.execute.action = \"removeOneToOneRelationship\";\n        command.execute.options = options;\n\n        command.revert.action = \"addOneToOneRelationship\";\n        command.revert.options = options;\n\n        return command;\n    }\n\n    createRemoveOneToManyRelationshipCommand(relationship) {\n        this.edmValidator.validateOneToManyRelationship(relationship);\n\n        let command = new Command();\n        let options = {\n            relationship: relationship\n        };\n\n        command.execute.action = \"removeOneToManyRelationship\";\n        command.execute.options = options;\n\n        command.revert.action = \"addOneToManyRelationship\";\n        command.revert.options = options;\n\n        return command;\n    }\n\n    createRemoveTableCommand(table) {\n        this.edmValidator.validateTableDescriptors(table);\n\n        let command = new Command();\n        let options = table;\n\n        command.execute.action = \"removeTable\";\n        command.execute.options = options;\n\n        command.revert.action = \"addTable\";\n        command.revert.options = options;\n\n        return command;\n    }\n\n    createUpdateColumnCommand(tableName, oldColumn, newColumn) {\n        this.edmValidator.validateColumn(oldColumn);\n        this.edmValidator.validateColumn(newColumn);\n\n        let command = new Command();\n\n        command.execute.action = \"updateColumn\";\n        command.execute.options = {\n            tableName: tableName,\n            column: newColumn\n        }\n\n        command.revert.action = \"updateColumn\";\n        command.revert.options = {\n            tableName: tableName,\n            column: oldColumn\n        };\n\n        return command;\n    }\n\n    createUpdateDecoratorCommand(tableName, oldDecorator, newDecorator) {\n        this.edmValidator.validateDecorator(oldDecorator);\n        this.edmValidator.validateDecorator(newDecorator);\n\n        let command = new Command();\n\n        command.execute.action = \"updateDecorator\";\n        command.execute.options = {\n            tableName: tableName,\n            decorator: newDecorator\n        };\n\n        command.revert.action = \"updateDecorator\";\n        command.revert.options = {\n            tableName: tableName,\n            decorator: oldDecorator\n        };;\n\n        return command;\n    }\n\n    createUpdateOneToOneCommand(oldOneToOneRelationship, newOneToOneRelationship) {\n        this.edmValidator.validateOneToOneRelationship(oldOneToOneRelationship);\n        this.edmValidator.validateOneToOneRelationship(newOneToOneRelationship);\n\n        let command = new Command();\n\n        command.execute.action = \"updateOneToOneRelationship\";\n        command.execute.options = newOneToOneRelationship;\n\n        command.revert.action = \"updateOneToOneRelationship\";\n        command.revert.options = oldOneToOneRelationship;\n\n        return command;\n    }\n\n    createUpdateOneToManyCommand(oldOneToManyRelationship, newOneToManyRelationship) {\n        this.edmValidator.validateOneToOneRelationship(oldOneToManyRelationship);\n        this.edmValidator.validateOneToOneRelationship(newOneToManyRelationship);\n\n        let command = new Command();\n\n        command.execute.action = \"updateOneToManyRelationship\";\n        command.execute.options = newOneToManyRelationship;\n\n        command.revert.action = \"updateOneToManyRelationship\";\n        command.revert.options = oldOneToManyRelationship;\n\n        return command;\n    }\n\n    createUpdateTableCommand(tableName, oldTable, newTable) {\n        this.edmValidator.validateTableDescriptors(oldTable);\n        this.edmValidator.validateTableDescriptors(newTable);\n\n        let command = new Command();\n\n        command.execute.action = \"updateTable\";\n        command.execute.options = {\n            tableName: tableName,\n            table: newTable\n        };\n\n        command.revert.action = \"updateTable\";\n        command.revert.options = {\n            tableName: tableName,\n            table: oldTable\n        };;\n\n        return command;\n    }\n\n    createCommandsFromEdm(edm) {\n\n        //TODO: clean decorators out of table, do separately\n        \n        let commands = edm.tables.reduce((accumulator, table) => {\n            let tableTemplate = Object.assign({}, table);\n            delete tableTemplate.columns;\n\n            accumulator.push(this.createAddTableCommand(tableTemplate));\n\n            table.columns.forEach((column) => {\n                accumulator.push(this.createAddColumnCommand(table.name, column));\n            });\n\n            return accumulator;\n        }, []);\n\n        edm.relationships.oneToOne.reduce((accumulator, relationship) => {\n            accumulator.push(this.createAddOneToOneRelationshipCommand(relationship));\n            return accumulator;\n\n        }, commands);\n\n        edm.relationships.oneToMany.reduce((accumulator, relationship) => {\n            accumulator.push(this.createAddOneToManyRelationshipCommand(relationship));\n            return accumulator;\n\n        }, commands);\n\n        return commands;\n    }\n}"]}